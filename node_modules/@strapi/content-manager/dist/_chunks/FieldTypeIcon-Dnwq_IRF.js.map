{"version":3,"file":"FieldTypeIcon-Dnwq_IRF.js","sources":["../../admin/src/components/FieldTypeIcon.tsx"],"sourcesContent":["import * as React from 'react';\n\nimport { useStrapiApp } from '@strapi/admin/strapi-admin';\nimport { Box } from '@strapi/design-system';\nimport {\n  BlocksField,\n  BooleanField,\n  ComponentField,\n  DateField,\n  DynamicZoneField,\n  EmailField,\n  EnumerationField,\n  JsonField,\n  MediaField,\n  NumberField,\n  PasswordField,\n  RelationField,\n  TextField,\n  UidField,\n} from '@strapi/icons/symbols';\n\nimport type { Schema } from '@strapi/types';\n\nconst iconByTypes: Record<Schema.Attribute.Kind, React.ReactElement> = {\n  biginteger: <NumberField />,\n  boolean: <BooleanField />,\n  date: <DateField />,\n  datetime: <DateField />,\n  decimal: <NumberField />,\n  email: <EmailField />,\n  enumeration: <EnumerationField />,\n  float: <NumberField />,\n  integer: <NumberField />,\n  media: <MediaField />,\n  password: <PasswordField />,\n  relation: <RelationField />,\n  string: <TextField />,\n  text: <TextField />,\n  richtext: <TextField />,\n  time: <DateField />,\n  timestamp: <DateField />,\n  json: <JsonField />,\n  uid: <UidField />,\n  component: <ComponentField />,\n  dynamiczone: <DynamicZoneField />,\n  blocks: <BlocksField />,\n};\n\ninterface FieldTypeIconProps {\n  type?: keyof typeof iconByTypes;\n  customFieldUid?: string;\n}\n\nconst FieldTypeIcon = ({ type, customFieldUid }: FieldTypeIconProps) => {\n  const getCustomField = useStrapiApp('FieldTypeIcon', (state) => state.customFields.get);\n\n  if (!type) {\n    return null;\n  }\n\n  let Compo = iconByTypes[type];\n\n  if (customFieldUid) {\n    const customField = getCustomField(customFieldUid);\n    const CustomFieldIcon = customField?.icon;\n\n    if (CustomFieldIcon) {\n      Compo = (\n        <Box marginRight={3} width={7} height={6}>\n          <CustomFieldIcon />\n        </Box>\n      );\n    }\n  }\n\n  if (!iconByTypes[type]) {\n    return null;\n  }\n\n  return Compo;\n};\n\nexport { FieldTypeIcon };\n"],"names":["NumberField","BooleanField","DateField","EmailField","EnumerationField","MediaField","PasswordField","RelationField","TextField","JsonField","UidField","ComponentField","DynamicZoneField","BlocksField","useStrapiApp","jsx","Box"],"mappings":";;;;;AAuBA,MAAM,cAAiE;AAAA,EACrE,2CAAaA,QAAY,aAAA,EAAA;AAAA,EACzB,wCAAUC,QAAa,cAAA,EAAA;AAAA,EACvB,qCAAOC,QAAU,WAAA,EAAA;AAAA,EACjB,yCAAWA,QAAU,WAAA,EAAA;AAAA,EACrB,wCAAUF,QAAY,aAAA,EAAA;AAAA,EACtB,sCAAQG,QAAW,YAAA,EAAA;AAAA,EACnB,4CAAcC,QAAiB,kBAAA,EAAA;AAAA,EAC/B,sCAAQJ,QAAY,aAAA,EAAA;AAAA,EACpB,wCAAUA,QAAY,aAAA,EAAA;AAAA,EACtB,sCAAQK,QAAW,YAAA,EAAA;AAAA,EACnB,yCAAWC,QAAc,eAAA,EAAA;AAAA,EACzB,yCAAWC,QAAc,eAAA,EAAA;AAAA,EACzB,uCAASC,QAAU,WAAA,EAAA;AAAA,EACnB,qCAAOA,QAAU,WAAA,EAAA;AAAA,EACjB,yCAAWA,QAAU,WAAA,EAAA;AAAA,EACrB,qCAAON,QAAU,WAAA,EAAA;AAAA,EACjB,0CAAYA,QAAU,WAAA,EAAA;AAAA,EACtB,qCAAOO,QAAU,WAAA,EAAA;AAAA,EACjB,oCAAMC,QAAS,UAAA,EAAA;AAAA,EACf,0CAAYC,QAAe,gBAAA,EAAA;AAAA,EAC3B,4CAAcC,QAAiB,kBAAA,EAAA;AAAA,EAC/B,uCAASC,QAAAA,aAAY,CAAA,CAAA;AACvB;AAOA,MAAM,gBAAgB,CAAC,EAAE,MAAM,qBAAyC;AACtE,QAAM,iBAAiBC,YAAAA,aAAa,iBAAiB,CAAC,UAAU,MAAM,aAAa,GAAG;AAEtF,MAAI,CAAC,MAAM;AACF,WAAA;AAAA,EAAA;AAGL,MAAA,QAAQ,YAAY,IAAI;AAE5B,MAAI,gBAAgB;AACZ,UAAA,cAAc,eAAe,cAAc;AACjD,UAAM,kBAAkB,aAAa;AAErC,QAAI,iBAAiB;AAEjB,cAAAC,2BAAA,IAACC,aAAI,KAAA,EAAA,aAAa,GAAG,OAAO,GAAG,QAAQ,GACrC,UAACD,2BAAAA,IAAA,iBAAA,CAAA,CAAgB,EACnB,CAAA;AAAA,IAAA;AAAA,EAEJ;AAGE,MAAA,CAAC,YAAY,IAAI,GAAG;AACf,WAAA;AAAA,EAAA;AAGF,SAAA;AACT;;"}