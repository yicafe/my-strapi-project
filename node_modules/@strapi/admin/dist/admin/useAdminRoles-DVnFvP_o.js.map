{"version":3,"file":"useAdminRoles-DVnFvP_o.js","sources":["../../admin/src/hooks/useAdminRoles.ts"],"sourcesContent":["import * as React from 'react';\n\nimport { useCollator } from '@strapi/design-system';\nimport { useIntl } from 'react-intl';\n\nimport { GetRolesParams, useGetRolesQuery } from '../services/users';\n\nimport type { FindRoles } from '../../../shared/contracts/roles';\n\nexport type AdminRole = FindRoles.Response['data'][number];\n\nexport const useAdminRoles = (\n  params: GetRolesParams = {},\n  queryOptions?: Parameters<typeof useGetRolesQuery>[1]\n) => {\n  const { locale } = useIntl();\n  const formatter = useCollator(locale, {\n    sensitivity: 'base',\n  });\n\n  const { data, error, isError, isLoading, refetch } = useGetRolesQuery(params, queryOptions);\n\n  // the return value needs to be memoized, because intantiating\n  // an empty array as default value would lead to an unstable return\n  // value, which later on triggers infinite loops if used in the\n  // dependency arrays of other hooks\n  const roles = React.useMemo(\n    () =>\n      [...(data ?? [])].sort((a, b) =>\n        formatter.compare(a.name, b.name)\n      ) as FindRoles.Response['data'],\n    [data, formatter]\n  );\n\n  return {\n    roles,\n    error,\n    isError,\n    isLoading,\n    refetch,\n  };\n};\n"],"names":["useIntl","useCollator","useGetRolesQuery","React"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAWO,MAAM,aAAgB,GAAA,CAC3B,MAAyB,GAAA,IACzB,YACG,KAAA;AACH,EAAM,MAAA,EAAE,MAAO,EAAA,GAAIA,iBAAQ,EAAA;AAC3B,EAAM,MAAA,SAAA,GAAYC,yBAAY,MAAQ,EAAA;AAAA,IACpC,WAAa,EAAA;AAAA,GACd,CAAA;AAED,EAAM,MAAA,EAAE,MAAM,KAAO,EAAA,OAAA,EAAS,WAAW,OAAQ,EAAA,GAAIC,sBAAiB,CAAA,MAAA,EAAQ,YAAY,CAAA;AAM1F,EAAA,MAAM,QAAQC,gBAAM,CAAA,OAAA;AAAA,IAClB,MACE,CAAC,GAAI,IAAQ,IAAA,EAAG,CAAE,CAAA,IAAA;AAAA,MAAK,CAAC,GAAG,CACzB,KAAA,SAAA,CAAU,QAAQ,CAAE,CAAA,IAAA,EAAM,EAAE,IAAI;AAAA,KAClC;AAAA,IACF,CAAC,MAAM,SAAS;AAAA,GAClB;AAEA,EAAO,OAAA;AAAA,IACL,KAAA;AAAA,IACA,KAAA;AAAA,IACA,OAAA;AAAA,IACA,SAAA;AAAA,IACA;AAAA,GACF;AACF;;;;"}