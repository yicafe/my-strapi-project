{"version":3,"file":"ListPage-Da_2kaB7.mjs","sources":["../../admin/src/pages/Settings/pages/Users/components/CreateActionCE.tsx","../../admin/src/pages/Settings/pages/Users/components/NewUserForm.tsx","../../admin/src/pages/Settings/pages/Users/ListPage.tsx"],"sourcesContent":["import * as React from 'react';\n\nimport { Button, ButtonProps } from '@strapi/design-system';\nimport { Mail } from '@strapi/icons';\nimport { useIntl } from 'react-intl';\n\ninterface CreateActionCEProps extends Pick<ButtonProps, 'onClick'> {}\n\nconst CreateActionCE = React.forwardRef<HTMLButtonElement, CreateActionCEProps>((props, ref) => {\n  const { formatMessage } = useIntl();\n\n  return (\n    <Button ref={ref} startIcon={<Mail />} size=\"S\" {...props}>\n      {formatMessage({\n        id: 'Settings.permissions.users.create',\n        defaultMessage: 'Invite new user',\n      })}\n    </Button>\n  );\n});\n\nexport { CreateActionCE };\nexport type { CreateActionCEProps };\n","import * as React from 'react';\n\nimport {\n  Box,\n  Button,\n  Flex,\n  Grid,\n  Modal,\n  Typography,\n  Breadcrumbs,\n  Crumb,\n} from '@strapi/design-system';\nimport { useIntl } from 'react-intl';\nimport * as yup from 'yup';\n\nimport { Form, type FormHelpers } from '../../../../../components/Form';\nimport { InputRenderer } from '../../../../../components/FormInputs/Renderer';\nimport { useNotification } from '../../../../../features/Notifications';\nimport { useAPIErrorHandler } from '../../../../../hooks/useAPIErrorHandler';\nimport { useEnterprise } from '../../../../../hooks/useEnterprise';\nimport { useCreateUserMutation } from '../../../../../services/users';\nimport { FormLayoutInputProps } from '../../../../../types/forms';\nimport { isBaseQueryError } from '../../../../../utils/baseQuery';\nimport { translatedErrors } from '../../../../../utils/translatedErrors';\n\nimport { MagicLinkCE } from './MagicLinkCE';\nimport { SelectRoles } from './SelectRoles';\n\nimport type { Data } from '@strapi/types';\n\ninterface ModalFormProps {\n  onToggle: () => void;\n}\n\ntype FormLayout = FormLayoutInputProps[][];\n\nconst ModalForm = ({ onToggle }: ModalFormProps) => {\n  const [currentStep, setStep] = React.useState<keyof typeof STEPPER>('create');\n  const [registrationToken, setRegistrationToken] = React.useState('');\n  const { formatMessage } = useIntl();\n  const { toggleNotification } = useNotification();\n  const {\n    _unstableFormatAPIError: formatAPIError,\n    _unstableFormatValidationErrors: formatValidationErrors,\n  } = useAPIErrorHandler();\n  const roleLayout = useEnterprise<FormLayout, FormLayout, FormLayout>(\n    ROLE_LAYOUT,\n    async () =>\n      (\n        await import(\n          '../../../../../../../ee/admin/src/pages/SettingsPage/pages/Users/components/ModalForm'\n        )\n      ).ROLE_LAYOUT,\n    {\n      combine(ceRoles, eeRoles) {\n        return [...ceRoles, ...eeRoles];\n      },\n\n      defaultValue: [],\n    }\n  );\n\n  const initialValues = useEnterprise<InitialData>(\n    FORM_INITIAL_VALUES,\n    async () =>\n      (\n        await import(\n          '../../../../../../../ee/admin/src/pages/SettingsPage/pages/Users/components/ModalForm'\n        )\n      ).FORM_INITIAL_VALUES,\n    {\n      combine(ceValues, eeValues) {\n        return {\n          ...ceValues,\n          ...eeValues,\n        };\n      },\n\n      defaultValue: FORM_INITIAL_VALUES,\n    }\n  );\n  const MagicLink = useEnterprise(\n    MagicLinkCE,\n    async () =>\n      (\n        await import(\n          '../../../../../../../ee/admin/src/pages/SettingsPage/pages/Users/components/MagicLinkEE'\n        )\n      ).MagicLinkEE\n  );\n\n  const [createUser] = useCreateUserMutation();\n\n  const headerTitle = formatMessage({\n    id: 'Settings.permissions.users.create',\n    defaultMessage: 'Invite new user',\n  });\n\n  const handleSubmit = async (body: InitialData, { setErrors }: FormHelpers<InitialData>) => {\n    const res = await createUser({\n      ...body,\n      roles: body.roles ?? [],\n    });\n\n    if ('data' in res) {\n      // NOTE: when enabling SSO, the user doesn't have to register and the token is undefined\n      if (res.data.registrationToken) {\n        setRegistrationToken(res.data.registrationToken);\n      }\n\n      goNext();\n    } else {\n      toggleNotification({\n        type: 'danger',\n        message: formatAPIError(res.error),\n      });\n\n      if (isBaseQueryError(res.error) && res.error.name === 'ValidationError') {\n        setErrors(formatValidationErrors(res.error));\n      }\n    }\n  };\n\n  const goNext = () => {\n    if (next) {\n      setStep(next);\n    } else {\n      onToggle();\n    }\n  };\n\n  const { buttonSubmitLabel, isDisabled, next } = STEPPER[currentStep];\n\n  // block rendering until the EE component is fully loaded\n  if (!MagicLink) {\n    return null;\n  }\n\n  return (\n    <Modal.Root defaultOpen onOpenChange={onToggle}>\n      <Modal.Content>\n        <Modal.Header>\n          {/**\n           * TODO: this is not semantically correct and should be amended.\n           */}\n          <Breadcrumbs label={headerTitle}>\n            <Crumb isCurrent>{headerTitle}</Crumb>\n          </Breadcrumbs>\n        </Modal.Header>\n        <Form\n          method={currentStep === 'create' ? 'POST' : 'PUT'}\n          initialValues={initialValues ?? {}}\n          onSubmit={handleSubmit}\n          validationSchema={FORM_SCHEMA}\n        >\n          {({ isSubmitting }) => {\n            return (\n              <>\n                <Modal.Body>\n                  <Flex direction=\"column\" alignItems=\"stretch\" gap={6}>\n                    {currentStep !== 'create' && (\n                      <MagicLink registrationToken={registrationToken} />\n                    )}\n                    <Box>\n                      <Typography variant=\"beta\" tag=\"h2\">\n                        {formatMessage({\n                          id: 'app.components.Users.ModalCreateBody.block-title.details',\n                          defaultMessage: 'User details',\n                        })}\n                      </Typography>\n                      <Box paddingTop={4}>\n                        <Flex direction=\"column\" alignItems=\"stretch\" gap={1}>\n                          <Grid.Root gap={5}>\n                            {FORM_LAYOUT.map((row) => {\n                              return row.map(({ size, ...field }) => {\n                                return (\n                                  <Grid.Item\n                                    key={field.name}\n                                    col={size}\n                                    direction=\"column\"\n                                    alignItems=\"stretch\"\n                                  >\n                                    <InputRenderer\n                                      {...field}\n                                      disabled={isDisabled}\n                                      label={formatMessage(field.label)}\n                                      placeholder={formatMessage(field.placeholder)}\n                                    />\n                                  </Grid.Item>\n                                );\n                              });\n                            })}\n                          </Grid.Root>\n                        </Flex>\n                      </Box>\n                    </Box>\n                    <Box>\n                      <Typography variant=\"beta\" tag=\"h2\">\n                        {formatMessage({\n                          id: 'global.roles',\n                          defaultMessage: \"User's role\",\n                        })}\n                      </Typography>\n                      <Box paddingTop={4}>\n                        <Grid.Root gap={5}>\n                          <Grid.Item col={6} xs={12} direction=\"column\" alignItems=\"stretch\">\n                            <SelectRoles disabled={isDisabled} />\n                          </Grid.Item>\n                          {roleLayout.map((row) => {\n                            return row.map(({ size, ...field }) => {\n                              return (\n                                <Grid.Item\n                                  key={field.name}\n                                  col={size}\n                                  direction=\"column\"\n                                  alignItems=\"stretch\"\n                                >\n                                  <InputRenderer\n                                    {...field}\n                                    disabled={isDisabled}\n                                    label={formatMessage(field.label)}\n                                    placeholder={\n                                      field.placeholder\n                                        ? formatMessage(field.placeholder)\n                                        : undefined\n                                    }\n                                    hint={field.hint ? formatMessage(field.hint) : undefined}\n                                  />\n                                </Grid.Item>\n                              );\n                            });\n                          })}\n                        </Grid.Root>\n                      </Box>\n                    </Box>\n                  </Flex>\n                </Modal.Body>\n                <Modal.Footer>\n                  <Button variant=\"tertiary\" onClick={onToggle} type=\"button\">\n                    {formatMessage({\n                      id: 'app.components.Button.cancel',\n                      defaultMessage: 'Cancel',\n                    })}\n                  </Button>\n                  {currentStep === 'create' ? (\n                    <Button type=\"submit\" loading={isSubmitting}>\n                      {formatMessage(buttonSubmitLabel)}\n                    </Button>\n                  ) : (\n                    <Button type=\"button\" loading={isSubmitting} onClick={onToggle}>\n                      {formatMessage(buttonSubmitLabel)}\n                    </Button>\n                  )}\n                </Modal.Footer>\n              </>\n            );\n          }}\n        </Form>\n      </Modal.Content>\n    </Modal.Root>\n  );\n};\n\ninterface InitialData {\n  firstname?: string;\n  lastname?: string;\n  email?: string;\n  roles?: Data.ID[];\n  useSSORegistration?: boolean;\n}\n\nconst FORM_INITIAL_VALUES = {\n  firstname: '',\n  lastname: '',\n  email: '',\n  roles: [],\n};\n\nconst ROLE_LAYOUT: FormLayout = [];\n\nconst FORM_LAYOUT = [\n  [\n    {\n      label: {\n        id: 'Auth.form.firstname.label',\n        defaultMessage: 'First name',\n      },\n      name: 'firstname',\n      placeholder: {\n        id: 'Auth.form.firstname.placeholder',\n        defaultMessage: 'e.g. Kai',\n      },\n      type: 'string' as const,\n      size: 6,\n      required: true,\n    },\n    {\n      label: {\n        id: 'Auth.form.lastname.label',\n        defaultMessage: 'Last name',\n      },\n      name: 'lastname',\n      placeholder: {\n        id: 'Auth.form.lastname.placeholder',\n        defaultMessage: 'e.g. Doe',\n      },\n      type: 'string' as const,\n      size: 6,\n    },\n  ],\n  [\n    {\n      label: {\n        id: 'Auth.form.email.label',\n        defaultMessage: 'Email',\n      },\n      name: 'email',\n      placeholder: {\n        id: 'Auth.form.email.placeholder',\n        defaultMessage: 'e.g. kai.doe@strapi.io',\n      },\n      type: 'email' as const,\n      size: 6,\n      required: true,\n    },\n  ],\n] satisfies FormLayout;\n\nconst FORM_SCHEMA = yup.object().shape({\n  firstname: yup\n    .string()\n    .trim()\n    .required({\n      id: translatedErrors.required.id,\n      defaultMessage: 'This field is required',\n    })\n    .nullable(),\n  lastname: yup.string(),\n  email: yup\n    .string()\n    .email(translatedErrors.email)\n    .required({\n      id: translatedErrors.required.id,\n      defaultMessage: 'This field is required',\n    })\n    .nullable(),\n  roles: yup\n    .array()\n    .min(1, {\n      id: translatedErrors.required.id,\n      defaultMessage: 'This field is required',\n    })\n    .required({\n      id: translatedErrors.required.id,\n      defaultMessage: 'This field is required',\n    }),\n});\n\nconst STEPPER = {\n  create: {\n    buttonSubmitLabel: {\n      id: 'app.containers.Users.ModalForm.footer.button-success',\n      defaultMessage: 'Invite user',\n    },\n    isDisabled: false,\n    next: 'magic-link',\n  },\n  'magic-link': {\n    buttonSubmitLabel: { id: 'global.finish', defaultMessage: 'Finish' },\n    isDisabled: true,\n    next: null,\n  },\n} as const;\n\nexport { ModalForm };\nexport type { InitialData };\n","import * as React from 'react';\n\nimport { Flex, Typography, Status, IconButton, Dialog } from '@strapi/design-system';\nimport { Pencil, Trash } from '@strapi/icons';\nimport * as qs from 'qs';\nimport { MessageDescriptor, useIntl } from 'react-intl';\nimport { NavLink, useLocation, useNavigate } from 'react-router-dom';\n\nimport { SanitizedAdminUser } from '../../../../../../shared/contracts/shared';\nimport { ConfirmDialog } from '../../../../components/ConfirmDialog';\nimport { Filters } from '../../../../components/Filters';\nimport { Layouts } from '../../../../components/Layouts/Layout';\nimport { Page } from '../../../../components/PageHelpers';\nimport { Pagination } from '../../../../components/Pagination';\nimport { SearchInput } from '../../../../components/SearchInput';\nimport { Table } from '../../../../components/Table';\nimport { useTypedSelector } from '../../../../core/store/hooks';\nimport { useNotification } from '../../../../features/Notifications';\nimport { useAPIErrorHandler } from '../../../../hooks/useAPIErrorHandler';\nimport { useEnterprise } from '../../../../hooks/useEnterprise';\nimport { useRBAC } from '../../../../hooks/useRBAC';\nimport { useAdminUsers, useDeleteManyUsersMutation } from '../../../../services/users';\nimport { getDisplayName } from '../../../../utils/users';\n\nimport { CreateActionCE } from './components/CreateActionCE';\nimport { ModalForm } from './components/NewUserForm';\n\n/* -------------------------------------------------------------------------------------------------\n * ListPageCE\n * -----------------------------------------------------------------------------------------------*/\n\nconst ListPageCE = () => {\n  const { _unstableFormatAPIError: formatAPIError } = useAPIErrorHandler();\n  const [isModalOpened, setIsModalOpen] = React.useState(false);\n  const permissions = useTypedSelector((state) => state.admin_app.permissions);\n  const {\n    allowedActions: { canCreate, canDelete, canRead },\n  } = useRBAC(permissions.settings?.users);\n  const navigate = useNavigate();\n  const { toggleNotification } = useNotification();\n  const { formatMessage } = useIntl();\n  const { search } = useLocation();\n  const [showDeleteConfirmation, setShowDeleteConfirmation] = React.useState(false);\n  const [idsToDelete, setIdsToDelete] = React.useState<Array<SanitizedAdminUser['id']>>([]);\n  const { data, isError, isLoading } = useAdminUsers(qs.parse(search, { ignoreQueryPrefix: true }));\n\n  const { pagination, users = [] } = data ?? {};\n\n  const CreateAction = useEnterprise(\n    CreateActionCE,\n    async () =>\n      (\n        await import(\n          '../../../../../../ee/admin/src/pages/SettingsPage/pages/Users/components/CreateActionEE'\n        )\n      ).CreateActionEE\n  );\n\n  const headers = TABLE_HEADERS.map((header) => ({\n    ...header,\n    label: formatMessage(header.label),\n  }));\n\n  const title = formatMessage({\n    id: 'global.users',\n    defaultMessage: 'Users',\n  });\n\n  const handleToggle = () => {\n    setIsModalOpen((prev) => !prev);\n  };\n\n  const [deleteAll] = useDeleteManyUsersMutation();\n  const handleDeleteAll = async (ids: Array<SanitizedAdminUser['id']>) => {\n    try {\n      const res = await deleteAll({ ids });\n\n      if ('error' in res) {\n        toggleNotification({\n          type: 'danger',\n          message: formatAPIError(res.error),\n        });\n      }\n    } catch (err) {\n      toggleNotification({\n        type: 'danger',\n        message: formatMessage({\n          id: 'global.error',\n          defaultMessage: 'An error occurred',\n        }),\n      });\n    }\n  };\n\n  const handleRowClick = (id: SanitizedAdminUser['id']) => () => {\n    if (canRead) {\n      navigate(id.toString());\n    }\n  };\n\n  const handleDeleteClick = (id: SanitizedAdminUser['id']) => async () => {\n    setIdsToDelete([id]);\n    setShowDeleteConfirmation(true);\n  };\n\n  const confirmDelete = async () => {\n    await handleDeleteAll(idsToDelete);\n    setShowDeleteConfirmation(false);\n  };\n\n  // block rendering until the EE component is fully loaded\n  if (!CreateAction) {\n    return null;\n  }\n\n  if (isError) {\n    return <Page.Error />;\n  }\n\n  return (\n    <Page.Main aria-busy={isLoading}>\n      <Page.Title>\n        {formatMessage(\n          { id: 'Settings.PageTitle', defaultMessage: 'Settings - {name}' },\n          {\n            name: 'Users',\n          }\n        )}\n      </Page.Title>\n      <Layouts.Header\n        primaryAction={canCreate && <CreateAction onClick={handleToggle} />}\n        title={title}\n        subtitle={formatMessage({\n          id: 'Settings.permissions.users.listview.header.subtitle',\n          defaultMessage: 'All the users who have access to the Strapi admin panel',\n        })}\n      />\n      <Layouts.Action\n        startActions={\n          <>\n            <SearchInput\n              label={formatMessage(\n                { id: 'app.component.search.label', defaultMessage: 'Search for {target}' },\n                { target: title }\n              )}\n            />\n            <Filters.Root options={FILTERS}>\n              <Filters.Trigger />\n              <Filters.Popover />\n              <Filters.List />\n            </Filters.Root>\n          </>\n        }\n      />\n      <Layouts.Content>\n        <Table.Root rows={users} headers={headers}>\n          <Table.ActionBar />\n          <Table.Content>\n            <Table.Head>\n              {canDelete ? <Table.HeaderCheckboxCell /> : null}\n              {headers.map((header) => (\n                <Table.HeaderCell key={header.name} {...header} />\n              ))}\n            </Table.Head>\n            <Table.Empty />\n            <Table.Loading />\n            <Table.Body>\n              {users.map((user) => (\n                <Table.Row\n                  key={user.id}\n                  onClick={handleRowClick(user.id)}\n                  cursor={canRead ? 'pointer' : 'default'}\n                >\n                  {canDelete ? <Table.CheckboxCell id={user.id} /> : null}\n                  {headers.map(({ cellFormatter, name, ...rest }) => {\n                    return (\n                      <Table.Cell key={name}>\n                        {typeof cellFormatter === 'function' ? (\n                          cellFormatter(user, { name, ...rest })\n                        ) : (\n                          // @ts-expect-error – name === \"roles\" has the data value of `AdminRole[]` but the header has a cellFormatter value so this shouldn't be called.\n                          <Typography textColor=\"neutral800\">{user[name] || '-'}</Typography>\n                        )}\n                      </Table.Cell>\n                    );\n                  })}\n                  {canRead || canDelete ? (\n                    <Table.Cell onClick={(e) => e.stopPropagation()}>\n                      <Flex justifyContent=\"end\">\n                        {canRead ? (\n                          <IconButton\n                            tag={NavLink}\n                            to={user.id.toString()}\n                            label={formatMessage(\n                              { id: 'app.component.table.edit', defaultMessage: 'Edit {target}' },\n                              { target: getDisplayName(user) }\n                            )}\n                            variant=\"ghost\"\n                          >\n                            <Pencil />\n                          </IconButton>\n                        ) : null}\n                        {canDelete ? (\n                          <IconButton\n                            onClick={handleDeleteClick(user.id)}\n                            label={formatMessage(\n                              { id: 'global.delete-target', defaultMessage: 'Delete {target}' },\n                              { target: getDisplayName(user) }\n                            )}\n                            variant=\"ghost\"\n                          >\n                            <Trash />\n                          </IconButton>\n                        ) : null}\n                      </Flex>\n                    </Table.Cell>\n                  ) : null}\n                </Table.Row>\n              ))}\n            </Table.Body>\n          </Table.Content>\n        </Table.Root>\n        <Pagination.Root {...pagination}>\n          <Pagination.PageSize />\n          <Pagination.Links />\n        </Pagination.Root>\n      </Layouts.Content>\n      {isModalOpened && <ModalForm onToggle={handleToggle} />}\n      <Dialog.Root open={showDeleteConfirmation} onOpenChange={setShowDeleteConfirmation}>\n        <ConfirmDialog onConfirm={confirmDelete} />\n      </Dialog.Root>\n    </Page.Main>\n  );\n};\n\nconst TABLE_HEADERS: Array<\n  Omit<Table.Header<SanitizedAdminUser, any>, 'label'> & { label: MessageDescriptor }\n> = [\n  {\n    name: 'firstname',\n    label: {\n      id: 'Settings.permissions.users.firstname',\n      defaultMessage: 'Firstname',\n    },\n    sortable: true,\n  },\n  {\n    name: 'lastname',\n    label: {\n      id: 'Settings.permissions.users.lastname',\n      defaultMessage: 'Lastname',\n    },\n    sortable: true,\n  },\n  {\n    name: 'email',\n    label: { id: 'Settings.permissions.users.email', defaultMessage: 'Email' },\n    sortable: true,\n  },\n  {\n    name: 'roles',\n    label: {\n      id: 'Settings.permissions.users.roles',\n      defaultMessage: 'Roles',\n    },\n    sortable: false,\n    cellFormatter({ roles }) {\n      return (\n        <Typography textColor=\"neutral800\">{roles.map((role) => role.name).join(',\\n')}</Typography>\n      );\n    },\n  },\n  {\n    name: 'username',\n    label: {\n      id: 'Settings.permissions.users.username',\n      defaultMessage: 'Username',\n    },\n    sortable: true,\n  },\n  {\n    name: 'isActive',\n    label: {\n      id: 'Settings.permissions.users.user-status',\n      defaultMessage: 'User status',\n    },\n    sortable: false,\n    cellFormatter({ isActive }) {\n      return (\n        <Flex>\n          <Status\n            size=\"S\"\n            borderWidth={0}\n            background=\"transparent\"\n            color=\"neutral800\"\n            variant={isActive ? 'success' : 'danger'}\n          >\n            <Typography>{isActive ? 'Active' : 'Inactive'}</Typography>\n          </Status>\n        </Flex>\n      );\n    },\n  },\n];\n\nconst FILTERS = [\n  {\n    name: 'firstname',\n    label: 'Firstname',\n    type: 'string',\n  },\n  {\n    name: 'lastname',\n    label: 'Lastname',\n    type: 'string',\n  },\n  {\n    name: 'email',\n    label: 'Email',\n    type: 'email',\n  },\n  {\n    name: 'username',\n    label: 'Username',\n    type: 'string',\n  },\n  {\n    name: 'isActive',\n    label: 'Active user',\n    type: 'boolean',\n  },\n] satisfies Filters.Filter[];\n\n/* -------------------------------------------------------------------------------------------------\n * ListPage\n * -----------------------------------------------------------------------------------------------*/\n\n// component which determines whether this page should render the CE or EE page\nconst ListPage = () => {\n  const UsersListPage = useEnterprise(\n    ListPageCE,\n    async () =>\n      // eslint-disable-next-line import/no-cycle\n      (await import('../../../../../../ee/admin/src/pages/SettingsPage/pages/Users/ListPage'))\n        .UserListPageEE\n  );\n\n  // block rendering until the EE component is fully loaded\n  if (!UsersListPage) {\n    return null;\n  }\n\n  return <UsersListPage />;\n};\n\n/* -------------------------------------------------------------------------------------------------\n * ProtectedListPage\n * -----------------------------------------------------------------------------------------------*/\n\nconst ProtectedListPage = () => {\n  const permissions = useTypedSelector((state) => state.admin_app.permissions.settings?.users.read);\n\n  return (\n    <Page.Protect permissions={permissions}>\n      <ListPage />\n    </Page.Protect>\n  );\n};\n\nexport { ProtectedListPage, ListPage, ListPageCE };\n"],"names":["InputRenderer","translatedErrors"],"mappings":"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"}