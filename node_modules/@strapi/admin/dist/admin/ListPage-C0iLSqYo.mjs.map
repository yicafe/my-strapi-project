{"version":3,"file":"ListPage-C0iLSqYo.mjs","sources":["../../ee/admin/src/services/auditLogs.ts","../../ee/admin/src/pages/SettingsPage/pages/AuditLogs/hooks/useFormatTimeStamp.ts","../../ee/admin/src/pages/SettingsPage/pages/AuditLogs/utils/getActionTypesDefaultMessages.ts","../../ee/admin/src/pages/SettingsPage/pages/AuditLogs/components/Modal.tsx","../../ee/admin/src/pages/SettingsPage/pages/AuditLogs/hooks/useAuditLogsData.ts","../../ee/admin/src/pages/SettingsPage/pages/AuditLogs/components/ComboboxFilter.tsx","../../ee/admin/src/pages/SettingsPage/pages/AuditLogs/utils/getDisplayedFilters.ts","../../ee/admin/src/pages/SettingsPage/pages/AuditLogs/ListPage.tsx"],"sourcesContent":["import { adminApi } from '../../../../admin/src/services/api';\nimport * as AuditLogs from '../../../../shared/contracts/audit-logs';\n\nconst auditLogsService = adminApi.injectEndpoints({\n  endpoints: (builder) => ({\n    getAuditLogs: builder.query<AuditLogs.GetAll.Response, AuditLogs.GetAll.Request['query']>({\n      query: (params) => ({\n        url: `/admin/audit-logs`,\n        config: {\n          params,\n        },\n      }),\n    }),\n    getAuditLog: builder.query<AuditLogs.Get.Response, AuditLogs.Get.Params['id']>({\n      query: (id) => `/admin/audit-logs/${id}`,\n    }),\n  }),\n  overrideExisting: false,\n});\n\nconst { useGetAuditLogsQuery, useGetAuditLogQuery } = auditLogsService;\n\nexport { useGetAuditLogsQuery, useGetAuditLogQuery };\n","import parseISO from 'date-fns/parseISO';\nimport { useIntl } from 'react-intl';\n\nexport const useFormatTimeStamp = () => {\n  const { formatDate } = useIntl();\n\n  const formatTimeStamp = (value: string) => {\n    const date = parseISO(value);\n\n    const formattedDate = formatDate(date, {\n      dateStyle: 'long',\n    });\n    const formattedTime = formatDate(date, {\n      timeStyle: 'medium',\n      hourCycle: 'h24',\n    });\n\n    return `${formattedDate}, ${formattedTime}`;\n  };\n\n  return formatTimeStamp;\n};\n","export const actionTypes = {\n  'entry.create': 'Create entry{model, select, undefined {} other { ({model})}}',\n  'entry.update': 'Update entry{model, select, undefined {} other { ({model})}}',\n  'entry.delete': 'Delete entry{model, select, undefined {} other { ({model})}}',\n  'entry.publish': 'Publish entry{model, select, undefined {} other { ({model})}}',\n  'entry.unpublish': 'Unpublish entry{model, select, undefined {} other { ({model})}}',\n  'media.create': 'Create media',\n  'media.update': 'Update media',\n  'media.delete': 'Delete media',\n  'media-folder.create': 'Create media folder',\n  'media-folder.update': 'Update media folder',\n  'media-folder.delete': 'Delete media folder',\n  'user.create': 'Create user',\n  'user.update': 'Update user',\n  'user.delete': 'Delete user',\n  'admin.auth.success': 'Admin login',\n  'admin.logout': 'Admin logout',\n  'content-type.create': 'Create content type',\n  'content-type.update': 'Update content type',\n  'content-type.delete': 'Delete content type',\n  'component.create': 'Create component',\n  'component.update': 'Update component',\n  'component.delete': 'Delete component',\n  'role.create': 'Create role',\n  'role.update': 'Update role',\n  'role.delete': 'Delete role',\n  'permission.create': 'Create permission',\n  'permission.update': 'Update permission',\n  'permission.delete': 'Delete permission',\n};\n\nexport const getDefaultMessage = (value: keyof typeof actionTypes) => {\n  return actionTypes[value] || value;\n};\n","import * as React from 'react';\n\nimport {\n  Box,\n  Flex,\n  Grid,\n  JSONInput,\n  Loader,\n  Modal as DSModal,\n  Typography,\n  Breadcrumbs,\n  Crumb,\n  Field,\n} from '@strapi/design-system';\nimport { useIntl } from 'react-intl';\nimport { styled } from 'styled-components';\n\nimport { useNotification } from '../../../../../../../../admin/src/features/Notifications';\nimport { useAPIErrorHandler } from '../../../../../../../../admin/src/hooks/useAPIErrorHandler';\nimport { AuditLog } from '../../../../../../../../shared/contracts/audit-logs';\nimport { useGetAuditLogQuery } from '../../../../../services/auditLogs';\nimport { useFormatTimeStamp } from '../hooks/useFormatTimeStamp';\nimport { actionTypes, getDefaultMessage } from '../utils/getActionTypesDefaultMessages';\n\ninterface ModalProps {\n  handleClose: () => void;\n  logId: string;\n}\n\nexport const Modal = ({ handleClose, logId }: ModalProps) => {\n  const { toggleNotification } = useNotification();\n  const { _unstableFormatAPIError: formatAPIError } = useAPIErrorHandler();\n\n  const { data, error, isLoading } = useGetAuditLogQuery(logId);\n\n  React.useEffect(() => {\n    if (error) {\n      toggleNotification({\n        type: 'danger',\n        message: formatAPIError(error),\n      });\n      handleClose();\n    }\n  }, [error, formatAPIError, handleClose, toggleNotification]);\n\n  const formatTimeStamp = useFormatTimeStamp();\n  const formattedDate = data && 'date' in data ? formatTimeStamp(data.date) : '';\n\n  return (\n    <DSModal.Root defaultOpen onOpenChange={handleClose}>\n      <DSModal.Content>\n        <DSModal.Header>\n          {/**\n           * TODO: this is not semantically correct and should be amended.\n           */}\n          <Breadcrumbs label={formattedDate} id=\"title\">\n            <Crumb isCurrent>{formattedDate}</Crumb>\n          </Breadcrumbs>\n        </DSModal.Header>\n        <DSModal.Body>\n          <ActionBody isLoading={isLoading} data={data as AuditLog} formattedDate={formattedDate} />\n        </DSModal.Body>\n      </DSModal.Content>\n    </DSModal.Root>\n  );\n};\n\ninterface ActionBodyProps {\n  isLoading?: boolean;\n  data: AuditLog;\n  formattedDate: string;\n}\n\nconst ActionBody = ({ isLoading, data, formattedDate }: ActionBodyProps) => {\n  const { formatMessage } = useIntl();\n\n  if (isLoading) {\n    return (\n      <Flex padding={7} justifyContent=\"center\" alignItems=\"center\">\n        {/**\n         * TODO: this will need to be translated.\n         */}\n        <Loader>Loading content...</Loader>\n      </Flex>\n    );\n  }\n\n  const { action, user, payload } = data;\n\n  return (\n    <>\n      <Box marginBottom={3}>\n        <Typography variant=\"delta\" id=\"title\">\n          {formatMessage({\n            id: 'Settings.permissions.auditLogs.details',\n            defaultMessage: 'Log Details',\n          })}\n        </Typography>\n      </Box>\n      <Grid.Root\n        gap={4}\n        gridCols={2}\n        paddingTop={4}\n        paddingBottom={4}\n        paddingLeft={6}\n        paddingRight={6}\n        marginBottom={4}\n        background=\"neutral100\"\n        hasRadius\n      >\n        <ActionItem\n          actionLabel={formatMessage({\n            id: 'Settings.permissions.auditLogs.action',\n            defaultMessage: 'Action',\n          })}\n          actionName={formatMessage(\n            {\n              id: `Settings.permissions.auditLogs.${action}`,\n              defaultMessage: getDefaultMessage(action as keyof typeof actionTypes),\n            },\n            // @ts-expect-error - any\n            { model: payload?.model }\n          )}\n        />\n        <ActionItem\n          actionLabel={formatMessage({\n            id: 'Settings.permissions.auditLogs.date',\n            defaultMessage: 'Date',\n          })}\n          actionName={formattedDate}\n        />\n        <ActionItem\n          actionLabel={formatMessage({\n            id: 'Settings.permissions.auditLogs.user',\n            defaultMessage: 'User',\n          })}\n          actionName={user?.displayName || '-'}\n        />\n        <ActionItem\n          actionLabel={formatMessage({\n            id: 'Settings.permissions.auditLogs.userId',\n            defaultMessage: 'User ID',\n          })}\n          actionName={user?.id.toString() || '-'}\n        />\n      </Grid.Root>\n      <Field.Root>\n        <Field.Label>\n          {formatMessage({\n            id: 'Settings.permissions.auditLogs.payload',\n            defaultMessage: 'Payload',\n          })}\n        </Field.Label>\n        <Payload value={JSON.stringify(payload, null, 2)} disabled />\n      </Field.Root>\n    </>\n  );\n};\n\nconst Payload = styled(JSONInput)`\n  max-width: 100%;\n  overflow: scroll;\n`;\n\ninterface ActionItemProps {\n  actionLabel: string;\n  actionName: string;\n}\n\nconst ActionItem = ({ actionLabel, actionName }: ActionItemProps) => {\n  return (\n    <Flex direction=\"column\" alignItems=\"baseline\" gap={1}>\n      <Typography textColor=\"neutral600\" variant=\"sigma\">\n        {actionLabel}\n      </Typography>\n      <Typography textColor=\"neutral600\">{actionName}</Typography>\n    </Flex>\n  );\n};\n","import * as React from 'react';\n\nimport { useNotification } from '../../../../../../../../admin/src/features/Notifications';\nimport { useAPIErrorHandler } from '../../../../../../../../admin/src/hooks/useAPIErrorHandler';\nimport { useQueryParams } from '../../../../../../../../admin/src/hooks/useQueryParams';\nimport { useAdminUsers } from '../../../../../../../../admin/src/services/users';\nimport { useGetAuditLogsQuery } from '../../../../../services/auditLogs';\n\nexport const useAuditLogsData = ({\n  canReadAuditLogs,\n  canReadUsers,\n}: {\n  canReadAuditLogs: boolean;\n  canReadUsers: boolean;\n}) => {\n  const { toggleNotification } = useNotification();\n  const { _unstableFormatAPIError: formatAPIError } = useAPIErrorHandler();\n  const [{ query }] = useQueryParams();\n\n  const {\n    data,\n    error,\n    isError: isUsersError,\n    isLoading: isLoadingUsers,\n  } = useAdminUsers(\n    {},\n    {\n      skip: !canReadUsers,\n      refetchOnMountOrArgChange: true,\n    }\n  );\n\n  React.useEffect(() => {\n    if (error) {\n      toggleNotification({ type: 'danger', message: formatAPIError(error) });\n    }\n  }, [error, toggleNotification, formatAPIError]);\n\n  const {\n    data: auditLogs,\n    isLoading: isLoadingAuditLogs,\n    isError: isAuditLogsError,\n    error: auditLogsError,\n  } = useGetAuditLogsQuery(query, {\n    refetchOnMountOrArgChange: true,\n    skip: !canReadAuditLogs,\n  });\n\n  React.useEffect(() => {\n    if (auditLogsError) {\n      toggleNotification({ type: 'danger', message: formatAPIError(auditLogsError) });\n    }\n  }, [auditLogsError, toggleNotification, formatAPIError]);\n\n  return {\n    auditLogs,\n    users: data?.users ?? [],\n    isLoading: isLoadingUsers || isLoadingAuditLogs,\n    hasError: isAuditLogsError || isUsersError,\n  };\n};\n","import { Combobox, ComboboxOption } from '@strapi/design-system';\nimport { useIntl } from 'react-intl';\n\nimport { Filters } from '../../../../../../../../admin/src/components/Filters';\nimport { useField } from '../../../../../../../../admin/src/components/Form';\n\nexport const ComboboxFilter = (props: Filters.ValueInputProps) => {\n  const { formatMessage } = useIntl();\n  const field = useField(props.name);\n  const ariaLabel = formatMessage({\n    id: 'Settings.permissions.auditLogs.filter.aria-label',\n    defaultMessage: 'Search and select an option to filter',\n  });\n\n  const handleChange = (value?: string) => {\n    field.onChange(props.name, value);\n  };\n\n  return (\n    <Combobox aria-label={ariaLabel} value={field.value} onChange={handleChange}>\n      {props.options?.map((opt) => {\n        const value = typeof opt === 'string' ? opt : opt.value;\n        const label = typeof opt === 'string' ? opt : opt.label;\n        return (\n          <ComboboxOption key={value} value={value}>\n            {label}\n          </ComboboxOption>\n        );\n      })}\n    </Combobox>\n  );\n};\n","import { IntlShape } from 'react-intl';\n\nimport { Filters } from '../../../../../../../../admin/src/components/Filters';\nimport { getDisplayName } from '../../../../../../../../admin/src/utils/users';\nimport { SanitizedAdminUser } from '../../../../../../../../shared/contracts/shared';\nimport { ComboboxFilter } from '../components/ComboboxFilter';\n\nimport { actionTypes, getDefaultMessage } from './getActionTypesDefaultMessages';\n\nexport const getDisplayedFilters = ({\n  formatMessage,\n  users,\n  canReadUsers,\n}: {\n  formatMessage: IntlShape['formatMessage'];\n  users: SanitizedAdminUser[];\n  canReadUsers: boolean;\n}): Filters.Filter[] => {\n  const operators = [\n    {\n      label: formatMessage({\n        id: 'components.FilterOptions.FILTER_TYPES.$eq',\n        defaultMessage: 'is',\n      }),\n      value: '$eq',\n    },\n    {\n      label: formatMessage({\n        id: 'components.FilterOptions.FILTER_TYPES.$ne',\n        defaultMessage: 'is not',\n      }),\n      value: '$ne',\n    },\n  ] as NonNullable<Filters.Filter['operators']>;\n\n  const filters = [\n    {\n      input: ComboboxFilter,\n      label: formatMessage({\n        id: 'Settings.permissions.auditLogs.action',\n        defaultMessage: 'Action',\n      }),\n      name: 'action',\n      operators,\n      options: (Object.keys(actionTypes) as (keyof typeof actionTypes)[]).map((action) => ({\n        label: formatMessage(\n          {\n            id: `Settings.permissions.auditLogs.${action}`,\n            defaultMessage: getDefaultMessage(action),\n          },\n          { model: undefined }\n        ),\n        value: action,\n      })),\n      type: 'enumeration',\n    },\n    {\n      label: formatMessage({\n        id: 'Settings.permissions.auditLogs.date',\n        defaultMessage: 'Date',\n      }),\n      name: 'date',\n      type: 'datetime',\n    },\n  ] satisfies Filters.Filter[];\n\n  if (canReadUsers && users) {\n    return [\n      ...filters,\n      {\n        input: ComboboxFilter,\n        label: formatMessage({\n          id: 'Settings.permissions.auditLogs.user',\n          defaultMessage: 'User',\n        }),\n        mainField: { name: 'id', type: 'integer' },\n        name: 'user',\n        operators,\n        options: users.map((user) => ({\n          label: getDisplayName(user),\n          value: user.id.toString(),\n        })),\n        type: 'relation',\n      } satisfies Filters.Filter,\n    ];\n  }\n\n  return filters;\n};\n","import { Flex, IconButton, Typography } from '@strapi/design-system';\nimport { Eye } from '@strapi/icons';\nimport { useIntl } from 'react-intl';\n\nimport { Filters } from '../../../../../../../admin/src/components/Filters';\nimport { Layouts } from '../../../../../../../admin/src/components/Layouts/Layout';\nimport { Page } from '../../../../../../../admin/src/components/PageHelpers';\nimport { Pagination } from '../../../../../../../admin/src/components/Pagination';\nimport { Table } from '../../../../../../../admin/src/components/Table';\nimport { useTypedSelector } from '../../../../../../../admin/src/core/store/hooks';\nimport { useQueryParams } from '../../../../../../../admin/src/hooks/useQueryParams';\nimport { useRBAC } from '../../../../../../../admin/src/hooks/useRBAC';\nimport { AuditLog } from '../../../../../../../shared/contracts/audit-logs';\n\nimport { Modal } from './components/Modal';\nimport { useAuditLogsData } from './hooks/useAuditLogsData';\nimport { useFormatTimeStamp } from './hooks/useFormatTimeStamp';\nimport { getDefaultMessage } from './utils/getActionTypesDefaultMessages';\nimport { getDisplayedFilters } from './utils/getDisplayedFilters';\n\nconst ListPage = () => {\n  const { formatMessage } = useIntl();\n  const permissions = useTypedSelector((state) => state.admin_app.permissions.settings);\n\n  const {\n    allowedActions: { canRead: canReadAuditLogs, canReadUsers },\n    isLoading: isLoadingRBAC,\n  } = useRBAC({\n    ...permissions?.auditLogs,\n    readUsers: permissions?.users.read || [],\n  });\n\n  const [{ query }, setQuery] = useQueryParams<{ id?: AuditLog['id'] }>();\n  const {\n    auditLogs,\n    users,\n    isLoading: isLoadingData,\n    hasError,\n  } = useAuditLogsData({\n    canReadAuditLogs,\n    canReadUsers,\n  });\n\n  const formatTimeStamp = useFormatTimeStamp();\n\n  const displayedFilters = getDisplayedFilters({ formatMessage, users, canReadUsers });\n\n  const headers: Table.Header<AuditLog, object>[] = [\n    {\n      name: 'action',\n      label: formatMessage({\n        id: 'Settings.permissions.auditLogs.action',\n        defaultMessage: 'Action',\n      }),\n      sortable: true,\n    },\n    {\n      name: 'date',\n      label: formatMessage({\n        id: 'Settings.permissions.auditLogs.date',\n        defaultMessage: 'Date',\n      }),\n      sortable: true,\n    },\n    {\n      name: 'user',\n      label: formatMessage({\n        id: 'Settings.permissions.auditLogs.user',\n        defaultMessage: 'User',\n      }),\n      sortable: false,\n      // In this case, the passed parameter cannot and shouldn't be something else than User\n      cellFormatter: ({ user }) => (user ? user.displayName : ''),\n    },\n  ];\n\n  if (hasError) {\n    return <Page.Error />;\n  }\n\n  const isLoading = isLoadingData || isLoadingRBAC;\n\n  const { results = [] } = auditLogs ?? {};\n\n  return (\n    <Page.Main aria-busy={isLoading}>\n      <Page.Title>\n        {formatMessage(\n          { id: 'Settings.PageTitle', defaultMessage: 'Settings - {name}' },\n          {\n            name: formatMessage({\n              id: 'global.auditLogs',\n              defaultMessage: 'Audit Logs',\n            }),\n          }\n        )}\n      </Page.Title>\n      <Layouts.Header\n        title={formatMessage({\n          id: 'global.auditLogs',\n          defaultMessage: 'Audit Logs',\n        })}\n        subtitle={formatMessage({\n          id: 'Settings.permissions.auditLogs.listview.header.subtitle',\n          defaultMessage: 'Logs of all the activities that happened in your environment',\n        })}\n      />\n      <Layouts.Action\n        startActions={\n          <Filters.Root options={displayedFilters}>\n            <Filters.Trigger />\n            <Filters.Popover />\n            <Filters.List />\n          </Filters.Root>\n        }\n      />\n      <Layouts.Content>\n        <Table.Root rows={results} headers={headers} isLoading={isLoading}>\n          <Table.Content>\n            <Table.Head>\n              {headers.map((header) => (\n                <Table.HeaderCell key={header.name} {...header} />\n              ))}\n            </Table.Head>\n            <Table.Empty />\n            <Table.Loading />\n            <Table.Body>\n              {results.map((log) => (\n                <Table.Row key={log.id} onClick={() => setQuery({ id: log.id })}>\n                  {headers.map((header) => {\n                    const { name, cellFormatter } = header;\n\n                    switch (name) {\n                      case 'action':\n                        return (\n                          <Table.Cell key={name}>\n                            <Typography textColor=\"neutral800\">\n                              {formatMessage(\n                                {\n                                  id: `Settings.permissions.auditLogs.${log.action}`,\n                                  // @ts-expect-error – getDefaultMessage probably doesn't benefit from being so strongly typed unless we just add string at the end.\n                                  defaultMessage: getDefaultMessage(log.action),\n                                },\n                                { model: (log.payload?.model as string) ?? '' }\n                              )}\n                            </Typography>\n                          </Table.Cell>\n                        );\n                      case 'date':\n                        return (\n                          <Table.Cell key={name}>\n                            <Typography textColor=\"neutral800\">\n                              {formatTimeStamp(log.date)}\n                            </Typography>\n                          </Table.Cell>\n                        );\n                      case 'user':\n                        return (\n                          <Table.Cell key={name}>\n                            <Typography textColor=\"neutral800\">\n                              {cellFormatter ? cellFormatter(log, header) : '-'}\n                            </Typography>\n                          </Table.Cell>\n                        );\n                      default:\n                        return (\n                          <Table.Cell key={name}>\n                            <Typography textColor=\"neutral800\">\n                              {(log[name as keyof AuditLog] as string) || '-'}\n                            </Typography>\n                          </Table.Cell>\n                        );\n                    }\n                  })}\n                  <Table.Cell onClick={(e) => e.stopPropagation()}>\n                    <Flex justifyContent=\"end\">\n                      <IconButton\n                        onClick={() => setQuery({ id: log.id })}\n                        withTooltip={false}\n                        label={formatMessage(\n                          { id: 'app.component.table.view', defaultMessage: '{target} details' },\n                          { target: `${log.action} action` }\n                        )}\n                        variant=\"ghost\"\n                      >\n                        <Eye />\n                      </IconButton>\n                    </Flex>\n                  </Table.Cell>\n                </Table.Row>\n              ))}\n            </Table.Body>\n          </Table.Content>\n        </Table.Root>\n\n        <Pagination.Root {...auditLogs?.pagination}>\n          <Pagination.PageSize />\n          <Pagination.Links />\n        </Pagination.Root>\n      </Layouts.Content>\n      {query?.id && (\n        <Modal handleClose={() => setQuery({ id: '' }, 'remove')} logId={query.id.toString()} />\n      )}\n    </Page.Main>\n  );\n};\n\nconst ProtectedListPage = () => {\n  const permissions = useTypedSelector(\n    (state) => state.admin_app.permissions.settings?.auditLogs?.main\n  );\n\n  return (\n    <Page.Protect permissions={permissions}>\n      <ListPage />\n    </Page.Protect>\n  );\n};\n\nexport { ListPage, ProtectedListPage };\n"],"names":["DSModal"],"mappings":"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"}