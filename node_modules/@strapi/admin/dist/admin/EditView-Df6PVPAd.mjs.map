{"version":3,"file":"EditView-Df6PVPAd.mjs","sources":["../../admin/src/pages/Settings/pages/TransferTokens/EditView.tsx"],"sourcesContent":["import * as React from 'react';\n\nimport { Box, Flex, Grid, Typography } from '@strapi/design-system';\nimport { Formik, Form, FormikErrors, FormikHelpers } from 'formik';\nimport { useIntl } from 'react-intl';\nimport { useLocation, useNavigate, useMatch } from 'react-router-dom';\nimport * as yup from 'yup';\n\nimport { useGuidedTour } from '../../../../components/GuidedTour/Provider';\nimport { Layouts } from '../../../../components/Layouts/Layout';\nimport { Page } from '../../../../components/PageHelpers';\nimport { useTypedSelector } from '../../../../core/store/hooks';\nimport { useNotification } from '../../../../features/Notifications';\nimport { useTracking } from '../../../../features/Tracking';\nimport { useAPIErrorHandler } from '../../../../hooks/useAPIErrorHandler';\nimport { useRBAC } from '../../../../hooks/useRBAC';\nimport {\n  useCreateTransferTokenMutation,\n  useGetTransferTokenQuery,\n  useUpdateTransferTokenMutation,\n} from '../../../../services/transferTokens';\nimport { isBaseQueryError } from '../../../../utils/baseQuery';\nimport { translatedErrors } from '../../../../utils/translatedErrors';\nimport { TRANSFER_TOKEN_TYPE } from '../../components/Tokens/constants';\nimport { FormHead } from '../../components/Tokens/FormHead';\nimport { LifeSpanInput } from '../../components/Tokens/LifeSpanInput';\nimport { TokenBox } from '../../components/Tokens/TokenBox';\nimport { TokenDescription } from '../../components/Tokens/TokenDescription';\nimport { TokenName } from '../../components/Tokens/TokenName';\nimport { TokenTypeSelect } from '../../components/Tokens/TokenTypeSelect';\n\nimport type {\n  TransferToken,\n  SanitizedTransferToken,\n} from '../../../../../../shared/contracts/transfer';\n\nconst schema = yup.object().shape({\n  name: yup.string().max(100).required(translatedErrors.required.id),\n  description: yup.string().nullable(),\n  lifespan: yup.number().integer().min(0).nullable().defined(translatedErrors.required.id),\n  permissions: yup.string().required(translatedErrors.required.id),\n});\n\n/* -------------------------------------------------------------------------------------------------\n * EditView\n * -----------------------------------------------------------------------------------------------*/\n\nconst EditView = () => {\n  const { formatMessage } = useIntl();\n  const { toggleNotification } = useNotification();\n  const navigate = useNavigate();\n  const { state: locationState } = useLocation();\n  const [transferToken, setTransferToken] = React.useState<\n    TransferToken | SanitizedTransferToken | null\n  >(\n    locationState && 'accessKey' in locationState.transferToken\n      ? {\n          ...locationState.transferToken,\n        }\n      : null\n  );\n  const { trackUsage } = useTracking();\n  const setCurrentStep = useGuidedTour('EditView', (state) => state.setCurrentStep);\n  const permissions = useTypedSelector(\n    (state) => state.admin_app.permissions.settings?.['transfer-tokens']\n  );\n  const {\n    allowedActions: { canCreate, canUpdate, canRegenerate },\n  } = useRBAC(permissions);\n  const match = useMatch('/settings/transfer-tokens/:id');\n\n  const id = match?.params?.id;\n  const isCreating = id === 'create';\n\n  const {\n    _unstableFormatAPIError: formatAPIError,\n    _unstableFormatValidationErrors: formatValidationErrors,\n  } = useAPIErrorHandler();\n\n  React.useEffect(() => {\n    trackUsage(isCreating ? 'didAddTokenFromList' : 'didEditTokenFromList', {\n      tokenType: TRANSFER_TOKEN_TYPE,\n    });\n  }, [isCreating, trackUsage]);\n\n  const { data, error } = useGetTransferTokenQuery(id!, {\n    skip: isCreating || transferToken !== null || !id,\n  });\n\n  React.useEffect(() => {\n    if (error) {\n      toggleNotification({\n        type: 'danger',\n        message: formatAPIError(error),\n      });\n    }\n  }, [error, formatAPIError, toggleNotification]);\n\n  React.useEffect(() => {\n    if (data) {\n      setTransferToken(data);\n    }\n  }, [data]);\n\n  const [createToken] = useCreateTransferTokenMutation();\n  const [updateToken] = useUpdateTransferTokenMutation();\n\n  const handleSubmit = async (body: FormValues, formik: FormikHelpers<FormValues>) => {\n    trackUsage(isCreating ? 'willCreateToken' : 'willEditToken', {\n      tokenType: TRANSFER_TOKEN_TYPE,\n    });\n\n    const permissions = body.permissions.split('-');\n\n    const isPermissionsTransferPermission = (\n      permission: string[]\n    ): permission is Array<'push' | 'pull'> => {\n      if (permission.length === 1) {\n        return permission[0] === 'push' || permission[0] === 'pull';\n      }\n\n      return permission[0] === 'push' && permission[1] === 'pull';\n    };\n\n    // this type-guard is necessary to satisfy the type for `permissions` in the request body,\n    // because String.split returns stringp[]\n    if (isPermissionsTransferPermission(permissions)) {\n      try {\n        if (isCreating) {\n          const res = await createToken({\n            ...body,\n            // lifespan must be \"null\" for unlimited (0 would mean instantly expired and isn't accepted)\n            lifespan:\n              body?.lifespan && body.lifespan !== '0'\n                ? parseInt(body.lifespan.toString(), 10)\n                : null,\n            permissions,\n          });\n\n          if ('error' in res) {\n            if (isBaseQueryError(res.error) && res.error.name === 'ValidationError') {\n              formik.setErrors(formatValidationErrors(res.error));\n            } else {\n              toggleNotification({\n                type: 'danger',\n                message: formatAPIError(res.error),\n              });\n            }\n\n            return;\n          }\n\n          setTransferToken(res.data);\n\n          toggleNotification({\n            type: 'success',\n            message: formatMessage({\n              id: 'notification.success.transfertokencreated',\n              defaultMessage: 'Transfer Token successfully created',\n            }),\n          });\n\n          trackUsage('didCreateToken', {\n            type: transferToken?.permissions,\n            tokenType: TRANSFER_TOKEN_TYPE,\n          });\n\n          navigate(`../transfer-tokens/${res.data.id.toString()}`, {\n            replace: true,\n            state: { transferToken: res.data },\n          });\n        } else {\n          const res = await updateToken({\n            id: id!,\n            name: body.name,\n            description: body.description,\n            permissions,\n          });\n\n          if ('error' in res) {\n            if (isBaseQueryError(res.error) && res.error.name === 'ValidationError') {\n              formik.setErrors(formatValidationErrors(res.error));\n            } else {\n              toggleNotification({\n                type: 'danger',\n                message: formatAPIError(res.error),\n              });\n            }\n\n            return;\n          }\n\n          setTransferToken(res.data);\n\n          toggleNotification({\n            type: 'success',\n            message: formatMessage({\n              id: 'notification.success.transfertokenedited',\n              defaultMessage: 'Transfer Token successfully edited',\n            }),\n          });\n\n          trackUsage('didEditToken', {\n            type: transferToken?.permissions,\n            tokenType: TRANSFER_TOKEN_TYPE,\n          });\n        }\n      } catch (err) {\n        toggleNotification({\n          type: 'danger',\n          message: formatMessage({\n            id: 'notification.error',\n            defaultMessage: 'Something went wrong',\n          }),\n        });\n      }\n    }\n  };\n\n  const canEditInputs = (canUpdate && !isCreating) || (canCreate && isCreating);\n  const isLoading = !isCreating && !transferToken;\n\n  if (isLoading) {\n    return <Page.Loading />;\n  }\n\n  return (\n    <Page.Main>\n      <Page.Title>\n        {formatMessage(\n          { id: 'Settings.PageTitle', defaultMessage: 'Settings - {name}' },\n          {\n            name: 'Transfer Tokens',\n          }\n        )}\n      </Page.Title>\n      <Formik\n        validationSchema={schema}\n        validateOnChange={false}\n        initialValues={\n          {\n            name: transferToken?.name || '',\n            description: transferToken?.description || '',\n            lifespan: transferToken?.lifespan || null,\n            /**\n             * We need to cast the permissions to satisfy the type for `permissions`\n             * in the request body incase we don't have a transferToken and instead\n             * use an empty string.\n             */\n            permissions: (transferToken?.permissions.join('-') ?? '') as FormValues['permissions'],\n          } satisfies FormValues\n        }\n        enableReinitialize\n        onSubmit={(body, actions) => handleSubmit(body, actions)}\n      >\n        {({ errors, handleChange, isSubmitting, values }) => {\n          return (\n            <Form>\n              <FormHead\n                title={{\n                  id: 'Settings.transferTokens.createPage.title',\n                  defaultMessage: 'TokenCreate Transfer Token',\n                }}\n                token={transferToken}\n                setToken={setTransferToken}\n                canEditInputs={canEditInputs}\n                canRegenerate={canRegenerate}\n                isSubmitting={isSubmitting}\n                regenerateUrl=\"/admin/transfer/tokens/\"\n              />\n              <Layouts.Content>\n                <Flex direction=\"column\" alignItems=\"stretch\" gap={6}>\n                  {transferToken &&\n                    Boolean(transferToken?.name) &&\n                    'accessKey' in transferToken && (\n                      <TokenBox token={transferToken.accessKey} tokenType={TRANSFER_TOKEN_TYPE} />\n                    )}\n                  <FormTransferTokenContainer\n                    errors={errors}\n                    onChange={handleChange}\n                    canEditInputs={canEditInputs}\n                    isCreating={isCreating}\n                    values={values}\n                    transferToken={transferToken}\n                  />\n                </Flex>\n              </Layouts.Content>\n            </Form>\n          );\n        }}\n      </Formik>\n    </Page.Main>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * ProtectedEditView\n * -----------------------------------------------------------------------------------------------*/\n\nconst ProtectedEditView = () => {\n  const permissions = useTypedSelector(\n    (state) => state.admin_app.permissions.settings?.['transfer-tokens'].read\n  );\n\n  return (\n    <Page.Protect permissions={permissions}>\n      <EditView />\n    </Page.Protect>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * FormTransferTokenContainer\n * -----------------------------------------------------------------------------------------------*/\n\ninterface FormValues extends Pick<TransferToken, 'description' | 'name' | 'lifespan'> {\n  permissions: Extract<TransferToken['permissions'][number], string>;\n}\n\ninterface FormTransferTokenContainerProps {\n  errors: FormikErrors<FormValues>;\n  onChange: ({ target: { name, value } }: { target: { name: string; value: string } }) => void;\n  canEditInputs: boolean;\n  values: FormValues;\n  isCreating: boolean;\n  transferToken: Partial<TransferToken> | null;\n}\n\nconst FormTransferTokenContainer = ({\n  errors = {},\n  onChange,\n  canEditInputs,\n  isCreating,\n  values,\n  transferToken = {},\n}: FormTransferTokenContainerProps) => {\n  const { formatMessage } = useIntl();\n\n  const typeOptions = [\n    {\n      value: 'push',\n      label: {\n        id: 'Settings.transferTokens.types.push',\n        defaultMessage: 'Push',\n      },\n    },\n    {\n      value: 'pull',\n      label: {\n        id: 'Settings.transferTokens.types.pull',\n        defaultMessage: 'Pull',\n      },\n    },\n    {\n      value: 'push-pull',\n      label: {\n        id: 'Settings.transferTokens.types.push-pull',\n        defaultMessage: 'Full Access',\n      },\n    },\n  ];\n\n  return (\n    <Box\n      background=\"neutral0\"\n      hasRadius\n      shadow=\"filterShadow\"\n      paddingTop={6}\n      paddingBottom={6}\n      paddingLeft={7}\n      paddingRight={7}\n    >\n      <Flex direction=\"column\" alignItems=\"stretch\" gap={4}>\n        <Typography variant=\"delta\" tag=\"h2\">\n          {formatMessage({\n            id: 'global.details',\n            defaultMessage: 'Details',\n          })}\n        </Typography>\n        <Grid.Root gap={5}>\n          <Grid.Item key=\"name\" col={6} xs={12} direction=\"column\" alignItems=\"stretch\">\n            <TokenName\n              error={errors['name']}\n              value={values['name']}\n              canEditInputs={canEditInputs}\n              onChange={onChange}\n            />\n          </Grid.Item>\n          <Grid.Item key=\"description\" col={6} xs={12} direction=\"column\" alignItems=\"stretch\">\n            <TokenDescription\n              error={errors['description']}\n              value={values['description']}\n              canEditInputs={canEditInputs}\n              onChange={onChange}\n            />\n          </Grid.Item>\n          <Grid.Item key=\"lifespan\" col={6} xs={12} direction=\"column\" alignItems=\"stretch\">\n            <LifeSpanInput\n              isCreating={isCreating}\n              error={errors['lifespan']}\n              value={values['lifespan']}\n              onChange={onChange}\n              token={transferToken}\n            />\n          </Grid.Item>\n          <Grid.Item key=\"permissions\" col={6} xs={12} direction=\"column\" alignItems=\"stretch\">\n            <TokenTypeSelect\n              name=\"permissions\"\n              value={values['permissions']}\n              error={errors['permissions']}\n              label={{\n                id: 'Settings.tokens.form.type',\n                defaultMessage: 'Token type',\n              }}\n              // @ts-expect-error – DS Select passes number | string, will be fixed in V2\n              onChange={(value: string) => {\n                onChange({ target: { name: 'permissions', value } });\n              }}\n              options={typeOptions}\n              canEditInputs={canEditInputs}\n            />\n          </Grid.Item>\n        </Grid.Root>\n      </Flex>\n    </Box>\n  );\n};\n\nexport { EditView, ProtectedEditView };\n"],"names":["translatedErrors","permissions"],"mappings":"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"}