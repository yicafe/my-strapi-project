{"version":3,"file":"ListPage-BoJnuSeZ.js","sources":["../../admin/src/pages/Settings/pages/Webhooks/ListPage.tsx"],"sourcesContent":["import * as React from 'react';\n\nimport {\n  useNotifyAT,\n  Checkbox,\n  Button,\n  EmptyStateLayout,\n  Flex,\n  IconButton,\n  Switch,\n  Table,\n  Tbody,\n  Td,\n  TFooter,\n  Th,\n  Thead,\n  Tr,\n  Typography,\n  VisuallyHidden,\n  LinkButton,\n  Dialog,\n} from '@strapi/design-system';\nimport { Pencil, Plus, Trash } from '@strapi/icons';\nimport { EmptyDocuments } from '@strapi/icons/symbols';\nimport { useIntl } from 'react-intl';\nimport { NavLink, useNavigate } from 'react-router-dom';\n\nimport { UpdateWebhook } from '../../../../../../shared/contracts/webhooks';\nimport { ConfirmDialog } from '../../../../components/ConfirmDialog';\nimport { Layouts } from '../../../../components/Layouts/Layout';\nimport { Page } from '../../../../components/PageHelpers';\nimport { useTypedSelector } from '../../../../core/store/hooks';\nimport { useNotification } from '../../../../features/Notifications';\nimport { useAPIErrorHandler } from '../../../../hooks/useAPIErrorHandler';\nimport { useRBAC } from '../../../../hooks/useRBAC';\n\nimport { useWebhooks } from './hooks/useWebhooks';\n\n/* -------------------------------------------------------------------------------------------------\n * ListPage\n * -----------------------------------------------------------------------------------------------*/\n\nconst ListPage = () => {\n  const [showModal, setShowModal] = React.useState(false);\n  const [webhooksToDelete, setWebhooksToDelete] = React.useState<string[]>([]);\n  const permissions = useTypedSelector((state) => state.admin_app.permissions.settings?.webhooks);\n  const { formatMessage } = useIntl();\n  const { _unstableFormatAPIError: formatAPIError } = useAPIErrorHandler();\n  const { toggleNotification } = useNotification();\n  const navigate = useNavigate();\n\n  const {\n    isLoading: isRBACLoading,\n    allowedActions: { canCreate, canUpdate, canDelete },\n  } = useRBAC(permissions);\n  const { notifyStatus } = useNotifyAT();\n\n  const {\n    isLoading: isWebhooksLoading,\n    webhooks,\n    error: webhooksError,\n    updateWebhook,\n    deleteManyWebhooks,\n  } = useWebhooks();\n\n  React.useEffect(() => {\n    if (webhooksError) {\n      toggleNotification({\n        type: 'danger',\n        message: formatAPIError(webhooksError),\n      });\n\n      return;\n    }\n    if (webhooks) {\n      notifyStatus(\n        formatMessage({\n          id: 'Settings.webhooks.list.loading.success',\n          defaultMessage: 'Webhooks have been loaded',\n        })\n      );\n    }\n  }, [webhooks, webhooksError, toggleNotification, formatMessage, notifyStatus, formatAPIError]);\n\n  const enableWebhook = async (body: UpdateWebhook.Request['body'] & UpdateWebhook.Params) => {\n    try {\n      const res = await updateWebhook(body);\n\n      if ('error' in res) {\n        toggleNotification({\n          type: 'danger',\n          message: formatAPIError(res.error),\n        });\n      }\n    } catch {\n      toggleNotification({\n        type: 'danger',\n        message: formatMessage({\n          id: 'notification.error',\n          defaultMessage: 'An error occurred',\n        }),\n      });\n    }\n  };\n\n  const deleteWebhook = async (id: string) => {\n    try {\n      const res = await deleteManyWebhooks({\n        ids: [id],\n      });\n\n      if ('error' in res) {\n        toggleNotification({\n          type: 'danger',\n          message: formatAPIError(res.error),\n        });\n\n        return;\n      }\n\n      setWebhooksToDelete((prev) => prev.filter((webhookId) => webhookId !== id));\n    } catch {\n      toggleNotification({\n        type: 'danger',\n        message: formatMessage({\n          id: 'notification.error',\n          defaultMessage: 'An error occurred',\n        }),\n      });\n    }\n  };\n\n  const confirmBulkDelete = async () => {\n    try {\n      const res = await deleteManyWebhooks({\n        ids: webhooksToDelete,\n      });\n\n      if ('error' in res) {\n        toggleNotification({\n          type: 'danger',\n          message: formatAPIError(res.error),\n        });\n\n        return;\n      }\n\n      setWebhooksToDelete([]);\n    } catch {\n      toggleNotification({\n        type: 'danger',\n        message: formatMessage({\n          id: 'notification.error',\n          defaultMessage: 'An error occurred',\n        }),\n      });\n    } finally {\n      setShowModal(false);\n    }\n  };\n\n  const selectAllCheckbox = (selected: boolean) =>\n    selected\n      ? setWebhooksToDelete(webhooks?.map((webhook) => webhook.id) ?? [])\n      : setWebhooksToDelete([]);\n\n  const selectOneCheckbox = (selected: boolean, id: string) =>\n    selected\n      ? setWebhooksToDelete((prev) => [...prev, id])\n      : setWebhooksToDelete((prev) => prev.filter((webhookId) => webhookId !== id));\n\n  const isLoading = isRBACLoading || isWebhooksLoading;\n  const numberOfWebhooks = webhooks?.length ?? 0;\n  const webhooksToDeleteLength = webhooksToDelete.length;\n\n  if (isLoading) {\n    return <Page.Loading />;\n  }\n\n  return (\n    <Layouts.Root>\n      <Page.Title>\n        {formatMessage(\n          { id: 'Settings.PageTitle', defaultMessage: 'Settings - {name}' },\n          {\n            name: 'Webhooks',\n          }\n        )}\n      </Page.Title>\n      <Page.Main aria-busy={isLoading}>\n        <Layouts.Header\n          title={formatMessage({ id: 'Settings.webhooks.title', defaultMessage: 'Webhooks' })}\n          subtitle={formatMessage({\n            id: 'Settings.webhooks.list.description',\n            defaultMessage: 'Get POST changes notifications',\n          })}\n          primaryAction={\n            canCreate &&\n            !isLoading && (\n              <LinkButton tag={NavLink} startIcon={<Plus />} variant=\"default\" to=\"create\" size=\"S\">\n                {formatMessage({\n                  id: 'Settings.webhooks.list.button.add',\n                  defaultMessage: 'Create new webhook',\n                })}\n              </LinkButton>\n            )\n          }\n        />\n        {webhooksToDeleteLength > 0 && canDelete && (\n          <Layouts.Action\n            startActions={\n              <>\n                <Typography variant=\"epsilon\" textColor=\"neutral600\">\n                  {formatMessage(\n                    {\n                      id: 'Settings.webhooks.to.delete',\n                      defaultMessage:\n                        '{webhooksToDeleteLength, plural, one {# webhook} other {# webhooks}} selected',\n                    },\n                    { webhooksToDeleteLength }\n                  )}\n                </Typography>\n                <Button\n                  onClick={() => setShowModal(true)}\n                  startIcon={<Trash />}\n                  size=\"L\"\n                  variant=\"danger-light\"\n                >\n                  {formatMessage({\n                    id: 'global.delete',\n                    defaultMessage: 'Delete',\n                  })}\n                </Button>\n              </>\n            }\n          />\n        )}\n        <Layouts.Content>\n          {numberOfWebhooks > 0 ? (\n            <Table\n              colCount={5}\n              rowCount={numberOfWebhooks + 1}\n              footer={\n                <TFooter\n                  onClick={() => {\n                    if (canCreate) {\n                      navigate('create');\n                    }\n                  }}\n                  icon={<Plus />}\n                >\n                  {formatMessage({\n                    id: 'Settings.webhooks.list.button.add',\n                    defaultMessage: 'Create new webhook',\n                  })}\n                </TFooter>\n              }\n            >\n              <Thead>\n                <Tr>\n                  <Th>\n                    <Checkbox\n                      aria-label={formatMessage({\n                        id: 'global.select-all-entries',\n                        defaultMessage: 'Select all entries',\n                      })}\n                      checked={\n                        webhooksToDeleteLength > 0 && webhooksToDeleteLength < numberOfWebhooks\n                          ? 'indeterminate'\n                          : webhooksToDeleteLength === numberOfWebhooks\n                      }\n                      onCheckedChange={selectAllCheckbox}\n                    />\n                  </Th>\n                  <Th width=\"20%\">\n                    <Typography variant=\"sigma\" textColor=\"neutral600\">\n                      {formatMessage({\n                        id: 'global.name',\n                        defaultMessage: 'Name',\n                      })}\n                    </Typography>\n                  </Th>\n                  <Th width=\"60%\">\n                    <Typography variant=\"sigma\" textColor=\"neutral600\">\n                      {formatMessage({\n                        id: 'Settings.webhooks.form.url',\n                        defaultMessage: 'URL',\n                      })}\n                    </Typography>\n                  </Th>\n                  <Th width=\"20%\">\n                    <Typography variant=\"sigma\" textColor=\"neutral600\">\n                      {formatMessage({\n                        id: 'Settings.webhooks.list.th.status',\n                        defaultMessage: 'Status',\n                      })}\n                    </Typography>\n                  </Th>\n                  <Th>\n                    <VisuallyHidden>\n                      {formatMessage({\n                        id: 'Settings.webhooks.list.th.actions',\n                        defaultMessage: 'Actions',\n                      })}\n                    </VisuallyHidden>\n                  </Th>\n                </Tr>\n              </Thead>\n              <Tbody>\n                {webhooks?.map((webhook) => (\n                  <Tr\n                    key={webhook.id}\n                    onClick={() => {\n                      if (canUpdate) {\n                        navigate(webhook.id);\n                      }\n                    }}\n                    style={{ cursor: canUpdate ? 'pointer' : 'default' }}\n                  >\n                    <Td onClick={(e) => e.stopPropagation()}>\n                      <Checkbox\n                        aria-label={`${formatMessage({\n                          id: 'global.select',\n                          defaultMessage: 'Select',\n                        })} ${webhook.name}`}\n                        checked={webhooksToDelete?.includes(webhook.id)}\n                        onCheckedChange={(selected) => selectOneCheckbox(!!selected, webhook.id)}\n                        name=\"select\"\n                      />\n                    </Td>\n                    <Td>\n                      <Typography fontWeight=\"semiBold\" textColor=\"neutral800\">\n                        {webhook.name}\n                      </Typography>\n                    </Td>\n                    <Td>\n                      <Typography textColor=\"neutral800\">{webhook.url}</Typography>\n                    </Td>\n                    <Td onClick={(e) => e.stopPropagation()}>\n                      <Flex>\n                        <Switch\n                          onLabel={formatMessage({\n                            id: 'global.enabled',\n                            defaultMessage: 'Enabled',\n                          })}\n                          offLabel={formatMessage({\n                            id: 'global.disabled',\n                            defaultMessage: 'Disabled',\n                          })}\n                          aria-label={`${webhook.name} ${formatMessage({\n                            id: 'Settings.webhooks.list.th.status',\n                            defaultMessage: 'Status',\n                          })}`}\n                          checked={webhook.isEnabled}\n                          onCheckedChange={(enabled) => {\n                            enableWebhook({\n                              ...webhook,\n                              isEnabled: enabled,\n                            });\n                          }}\n                          visibleLabels\n                        />\n                      </Flex>\n                    </Td>\n                    <Td>\n                      <Flex gap={1}>\n                        {canUpdate && (\n                          <IconButton\n                            label={formatMessage({\n                              id: 'Settings.webhooks.events.update',\n                              defaultMessage: 'Update',\n                            })}\n                            variant=\"ghost\"\n                          >\n                            <Pencil />\n                          </IconButton>\n                        )}\n                        {canDelete && (\n                          <DeleteActionButton\n                            onDelete={() => {\n                              deleteWebhook(webhook.id);\n                            }}\n                          />\n                        )}\n                      </Flex>\n                    </Td>\n                  </Tr>\n                ))}\n              </Tbody>\n            </Table>\n          ) : (\n            <EmptyStateLayout\n              icon={<EmptyDocuments width=\"160px\" />}\n              content={formatMessage({\n                id: 'Settings.webhooks.list.empty.description',\n                defaultMessage: 'No webhooks found',\n              })}\n              action={\n                canCreate ? (\n                  <LinkButton variant=\"secondary\" startIcon={<Plus />} tag={NavLink} to=\"create\">\n                    {formatMessage({\n                      id: 'Settings.webhooks.list.button.add',\n                      defaultMessage: 'Create new webhook',\n                    })}\n                  </LinkButton>\n                ) : null\n              }\n            />\n          )}\n        </Layouts.Content>\n      </Page.Main>\n      <Dialog.Root open={showModal} onOpenChange={setShowModal}>\n        <ConfirmDialog onConfirm={confirmBulkDelete} />\n      </Dialog.Root>\n    </Layouts.Root>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * DeleteActionButton\n * -----------------------------------------------------------------------------------------------*/\n\ntype DeleteActionButtonProps = {\n  onDelete: () => void;\n};\n\nconst DeleteActionButton = ({ onDelete }: DeleteActionButtonProps) => {\n  const [showModal, setShowModal] = React.useState(false);\n  const { formatMessage } = useIntl();\n\n  return (\n    <>\n      <IconButton\n        onClick={(e) => {\n          e.stopPropagation();\n          setShowModal(true);\n        }}\n        label={formatMessage({\n          id: 'Settings.webhooks.events.delete',\n          defaultMessage: 'Delete webhook',\n        })}\n        variant=\"ghost\"\n      >\n        <Trash />\n      </IconButton>\n\n      <Dialog.Root open={showModal} onOpenChange={setShowModal}>\n        <ConfirmDialog\n          onConfirm={(e) => {\n            e?.stopPropagation();\n            onDelete();\n          }}\n        />\n      </Dialog.Root>\n    </>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * ProtectedListView\n * -----------------------------------------------------------------------------------------------*/\n\nconst ProtectedListPage = () => {\n  const permissions = useTypedSelector(\n    (state) => state.admin_app.permissions.settings?.webhooks.main\n  );\n\n  return (\n    <Page.Protect permissions={permissions}>\n      <ListPage />\n    </Page.Protect>\n  );\n};\n\nexport { ListPage, ProtectedListPage };\n"],"names":["React","useTypedSelector","useIntl","useAPIErrorHandler","useNotification","useNavigate","useRBAC","useNotifyAT","useWebhooks","jsx","Page","jsxs","Layouts","LinkButton","NavLink","Plus","Fragment","Typography","Button","Trash","Table","TFooter","Thead","Tr","Th","Checkbox","VisuallyHidden","Tbody","Td","Flex","Switch","IconButton","Pencil","EmptyStateLayout","EmptyDocuments","Dialog","ConfirmDialog"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0CA,MAAM,WAAW,MAAM;AACrB,EAAA,MAAM,CAAC,SAAW,EAAA,YAAY,CAAI,GAAAA,gBAAA,CAAM,SAAS,KAAK,CAAA;AACtD,EAAA,MAAM,CAAC,gBAAkB,EAAA,mBAAmB,IAAIA,gBAAM,CAAA,QAAA,CAAmB,EAAE,CAAA;AAC3E,EAAM,MAAA,WAAA,GAAcC,uBAAiB,CAAC,KAAA,KAAU,MAAM,SAAU,CAAA,WAAA,CAAY,UAAU,QAAQ,CAAA;AAC9F,EAAM,MAAA,EAAE,aAAc,EAAA,GAAIC,iBAAQ,EAAA;AAClC,EAAA,MAAM,EAAE,uBAAA,EAAyB,cAAe,EAAA,GAAIC,wBAAmB,EAAA;AACvE,EAAM,MAAA,EAAE,kBAAmB,EAAA,GAAIC,qBAAgB,EAAA;AAC/C,EAAA,MAAM,WAAWC,0BAAY,EAAA;AAE7B,EAAM,MAAA;AAAA,IACJ,SAAW,EAAA,aAAA;AAAA,IACX,cAAgB,EAAA,EAAE,SAAW,EAAA,SAAA,EAAW,SAAU;AAAA,GACpD,GAAIC,cAAQ,WAAW,CAAA;AACvB,EAAM,MAAA,EAAE,YAAa,EAAA,GAAIC,wBAAY,EAAA;AAErC,EAAM,MAAA;AAAA,IACJ,SAAW,EAAA,iBAAA;AAAA,IACX,QAAA;AAAA,IACA,KAAO,EAAA,aAAA;AAAA,IACP,aAAA;AAAA,IACA;AAAA,MACEC,uBAAY,EAAA;AAEhB,EAAAR,gBAAA,CAAM,UAAU,MAAM;AACpB,IAAA,IAAI,aAAe,EAAA;AACjB,MAAmB,kBAAA,CAAA;AAAA,QACjB,IAAM,EAAA,QAAA;AAAA,QACN,OAAA,EAAS,eAAe,aAAa;AAAA,OACtC,CAAA;AAED,MAAA;AAAA;AAEF,IAAA,IAAI,QAAU,EAAA;AACZ,MAAA,YAAA;AAAA,QACE,aAAc,CAAA;AAAA,UACZ,EAAI,EAAA,wCAAA;AAAA,UACJ,cAAgB,EAAA;AAAA,SACjB;AAAA,OACH;AAAA;AACF,GACF,EAAG,CAAC,QAAU,EAAA,aAAA,EAAe,oBAAoB,aAAe,EAAA,YAAA,EAAc,cAAc,CAAC,CAAA;AAE7F,EAAM,MAAA,aAAA,GAAgB,OAAO,IAA+D,KAAA;AAC1F,IAAI,IAAA;AACF,MAAM,MAAA,GAAA,GAAM,MAAM,aAAA,CAAc,IAAI,CAAA;AAEpC,MAAA,IAAI,WAAW,GAAK,EAAA;AAClB,QAAmB,kBAAA,CAAA;AAAA,UACjB,IAAM,EAAA,QAAA;AAAA,UACN,OAAA,EAAS,cAAe,CAAA,GAAA,CAAI,KAAK;AAAA,SAClC,CAAA;AAAA;AACH,KACM,CAAA,MAAA;AACN,MAAmB,kBAAA,CAAA;AAAA,QACjB,IAAM,EAAA,QAAA;AAAA,QACN,SAAS,aAAc,CAAA;AAAA,UACrB,EAAI,EAAA,oBAAA;AAAA,UACJ,cAAgB,EAAA;AAAA,SACjB;AAAA,OACF,CAAA;AAAA;AACH,GACF;AAEA,EAAM,MAAA,aAAA,GAAgB,OAAO,EAAe,KAAA;AAC1C,IAAI,IAAA;AACF,MAAM,MAAA,GAAA,GAAM,MAAM,kBAAmB,CAAA;AAAA,QACnC,GAAA,EAAK,CAAC,EAAE;AAAA,OACT,CAAA;AAED,MAAA,IAAI,WAAW,GAAK,EAAA;AAClB,QAAmB,kBAAA,CAAA;AAAA,UACjB,IAAM,EAAA,QAAA;AAAA,UACN,OAAA,EAAS,cAAe,CAAA,GAAA,CAAI,KAAK;AAAA,SAClC,CAAA;AAED,QAAA;AAAA;AAGF,MAAoB,mBAAA,CAAA,CAAC,SAAS,IAAK,CAAA,MAAA,CAAO,CAAC,SAAc,KAAA,SAAA,KAAc,EAAE,CAAC,CAAA;AAAA,KACpE,CAAA,MAAA;AACN,MAAmB,kBAAA,CAAA;AAAA,QACjB,IAAM,EAAA,QAAA;AAAA,QACN,SAAS,aAAc,CAAA;AAAA,UACrB,EAAI,EAAA,oBAAA;AAAA,UACJ,cAAgB,EAAA;AAAA,SACjB;AAAA,OACF,CAAA;AAAA;AACH,GACF;AAEA,EAAA,MAAM,oBAAoB,YAAY;AACpC,IAAI,IAAA;AACF,MAAM,MAAA,GAAA,GAAM,MAAM,kBAAmB,CAAA;AAAA,QACnC,GAAK,EAAA;AAAA,OACN,CAAA;AAED,MAAA,IAAI,WAAW,GAAK,EAAA;AAClB,QAAmB,kBAAA,CAAA;AAAA,UACjB,IAAM,EAAA,QAAA;AAAA,UACN,OAAA,EAAS,cAAe,CAAA,GAAA,CAAI,KAAK;AAAA,SAClC,CAAA;AAED,QAAA;AAAA;AAGF,MAAA,mBAAA,CAAoB,EAAE,CAAA;AAAA,KAChB,CAAA,MAAA;AACN,MAAmB,kBAAA,CAAA;AAAA,QACjB,IAAM,EAAA,QAAA;AAAA,QACN,SAAS,aAAc,CAAA;AAAA,UACrB,EAAI,EAAA,oBAAA;AAAA,UACJ,cAAgB,EAAA;AAAA,SACjB;AAAA,OACF,CAAA;AAAA,KACD,SAAA;AACA,MAAA,YAAA,CAAa,KAAK,CAAA;AAAA;AACpB,GACF;AAEA,EAAA,MAAM,oBAAoB,CAAC,QAAA,KACzB,QACI,GAAA,mBAAA,CAAoB,UAAU,GAAI,CAAA,CAAC,OAAY,KAAA,OAAA,CAAQ,EAAE,CAAK,IAAA,EAAE,CAChE,GAAA,mBAAA,CAAoB,EAAE,CAAA;AAE5B,EAAM,MAAA,iBAAA,GAAoB,CAAC,QAAmB,EAAA,EAAA,KAC5C,WACI,mBAAoB,CAAA,CAAC,IAAS,KAAA,CAAC,GAAG,IAAA,EAAM,EAAE,CAAC,CAAA,GAC3C,mBAAoB,CAAA,CAAC,IAAS,KAAA,IAAA,CAAK,OAAO,CAAC,SAAA,KAAc,SAAc,KAAA,EAAE,CAAC,CAAA;AAEhF,EAAA,MAAM,YAAY,aAAiB,IAAA,iBAAA;AACnC,EAAM,MAAA,gBAAA,GAAmB,UAAU,MAAU,IAAA,CAAA;AAC7C,EAAA,MAAM,yBAAyB,gBAAiB,CAAA,MAAA;AAEhD,EAAA,IAAI,SAAW,EAAA;AACb,IAAO,uBAAAS,cAAA,CAACC,UAAK,CAAA,OAAA,EAAL,EAAa,CAAA;AAAA;AAGvB,EACE,uBAAAC,eAAA,CAACC,aAAQ,CAAA,IAAA,EAAR,EACC,QAAA,EAAA;AAAA,oBAACH,cAAA,CAAAC,UAAA,CAAK,OAAL,EACE,QAAA,EAAA,aAAA;AAAA,MACC,EAAE,EAAA,EAAI,oBAAsB,EAAA,cAAA,EAAgB,mBAAoB,EAAA;AAAA,MAChE;AAAA,QACE,IAAM,EAAA;AAAA;AACR,KAEJ,EAAA,CAAA;AAAA,oBACCC,eAAA,CAAAD,UAAA,CAAK,IAAL,EAAA,EAAU,aAAW,SACpB,EAAA,QAAA,EAAA;AAAA,sBAAAD,cAAA;AAAA,QAACG,aAAQ,CAAA,MAAA;AAAA,QAAR;AAAA,UACC,OAAO,aAAc,CAAA,EAAE,IAAI,yBAA2B,EAAA,cAAA,EAAgB,YAAY,CAAA;AAAA,UAClF,UAAU,aAAc,CAAA;AAAA,YACtB,EAAI,EAAA,oCAAA;AAAA,YACJ,cAAgB,EAAA;AAAA,WACjB,CAAA;AAAA,UACD,eACE,SACA,IAAA,CAAC,6BACEH,cAAA,CAAAI,uBAAA,EAAA,EAAW,KAAKC,sBAAS,EAAA,SAAA,kBAAYL,cAAA,CAAAM,UAAA,EAAA,EAAK,GAAI,OAAQ,EAAA,SAAA,EAAU,IAAG,QAAS,EAAA,IAAA,EAAK,KAC/E,QAAc,EAAA,aAAA,CAAA;AAAA,YACb,EAAI,EAAA,mCAAA;AAAA,YACJ,cAAgB,EAAA;AAAA,WACjB,CACH,EAAA;AAAA;AAAA,OAGN;AAAA,MACC,sBAAA,GAAyB,KAAK,SAC7B,oBAAAN,cAAA;AAAA,QAACG,aAAQ,CAAA,MAAA;AAAA,QAAR;AAAA,UACC,8BAEID,eAAA,CAAAK,mBAAA,EAAA,EAAA,QAAA,EAAA;AAAA,4BAAAP,cAAA,CAACQ,uBAAW,EAAA,EAAA,OAAA,EAAQ,SAAU,EAAA,SAAA,EAAU,YACrC,EAAA,QAAA,EAAA,aAAA;AAAA,cACC;AAAA,gBACE,EAAI,EAAA,6BAAA;AAAA,gBACJ,cACE,EAAA;AAAA,eACJ;AAAA,cACA,EAAE,sBAAuB;AAAA,aAE7B,EAAA,CAAA;AAAA,4BACAR,cAAA;AAAA,cAACS,mBAAA;AAAA,cAAA;AAAA,gBACC,OAAA,EAAS,MAAM,YAAA,CAAa,IAAI,CAAA;AAAA,gBAChC,SAAA,iCAAYC,WAAM,EAAA,EAAA,CAAA;AAAA,gBAClB,IAAK,EAAA,GAAA;AAAA,gBACL,OAAQ,EAAA,cAAA;AAAA,gBAEP,QAAc,EAAA,aAAA,CAAA;AAAA,kBACb,EAAI,EAAA,eAAA;AAAA,kBACJ,cAAgB,EAAA;AAAA,iBACjB;AAAA;AAAA;AACH,WACF,EAAA;AAAA;AAAA,OAEJ;AAAA,sBAEDV,cAAA,CAAAG,aAAA,CAAQ,OAAR,EAAA,EACE,6BAAmB,CAClB,mBAAAD,eAAA;AAAA,QAACS,kBAAA;AAAA,QAAA;AAAA,UACC,QAAU,EAAA,CAAA;AAAA,UACV,UAAU,gBAAmB,GAAA,CAAA;AAAA,UAC7B,MACE,kBAAAX,cAAA;AAAA,YAACY,oBAAA;AAAA,YAAA;AAAA,cACC,SAAS,MAAM;AACb,gBAAA,IAAI,SAAW,EAAA;AACb,kBAAA,QAAA,CAAS,QAAQ,CAAA;AAAA;AACnB,eACF;AAAA,cACA,IAAA,iCAAON,UAAK,EAAA,EAAA,CAAA;AAAA,cAEX,QAAc,EAAA,aAAA,CAAA;AAAA,gBACb,EAAI,EAAA,mCAAA;AAAA,gBACJ,cAAgB,EAAA;AAAA,eACjB;AAAA;AAAA,WACH;AAAA,UAGF,QAAA,EAAA;AAAA,4BAACN,cAAA,CAAAa,kBAAA,EAAA,EACC,0CAACC,eACC,EAAA,EAAA,QAAA,EAAA;AAAA,8BAAAd,cAAA,CAACe,eACC,EAAA,EAAA,QAAA,kBAAAf,cAAA;AAAA,gBAACgB,qBAAA;AAAA,gBAAA;AAAA,kBACC,cAAY,aAAc,CAAA;AAAA,oBACxB,EAAI,EAAA,2BAAA;AAAA,oBACJ,cAAgB,EAAA;AAAA,mBACjB,CAAA;AAAA,kBACD,SACE,sBAAyB,GAAA,CAAA,IAAK,sBAAyB,GAAA,gBAAA,GACnD,kBACA,sBAA2B,KAAA,gBAAA;AAAA,kBAEjC,eAAiB,EAAA;AAAA;AAAA,eAErB,EAAA,CAAA;AAAA,8BACAhB,cAAA,CAACe,eAAG,EAAA,EAAA,KAAA,EAAM,KACR,EAAA,QAAA,kBAAAf,cAAA,CAACQ,2BAAW,OAAQ,EAAA,OAAA,EAAQ,SAAU,EAAA,YAAA,EACnC,QAAc,EAAA,aAAA,CAAA;AAAA,gBACb,EAAI,EAAA,aAAA;AAAA,gBACJ,cAAgB,EAAA;AAAA,eACjB,GACH,CACF,EAAA,CAAA;AAAA,8BACAR,cAAA,CAACe,eAAG,EAAA,EAAA,KAAA,EAAM,KACR,EAAA,QAAA,kBAAAf,cAAA,CAACQ,2BAAW,OAAQ,EAAA,OAAA,EAAQ,SAAU,EAAA,YAAA,EACnC,QAAc,EAAA,aAAA,CAAA;AAAA,gBACb,EAAI,EAAA,4BAAA;AAAA,gBACJ,cAAgB,EAAA;AAAA,eACjB,GACH,CACF,EAAA,CAAA;AAAA,8BACAR,cAAA,CAACe,eAAG,EAAA,EAAA,KAAA,EAAM,KACR,EAAA,QAAA,kBAAAf,cAAA,CAACQ,2BAAW,OAAQ,EAAA,OAAA,EAAQ,SAAU,EAAA,YAAA,EACnC,QAAc,EAAA,aAAA,CAAA;AAAA,gBACb,EAAI,EAAA,kCAAA;AAAA,gBACJ,cAAgB,EAAA;AAAA,eACjB,GACH,CACF,EAAA,CAAA;AAAA,8BACCR,cAAA,CAAAe,eAAA,EAAA,EACC,QAAC,kBAAAf,cAAA,CAAAiB,2BAAA,EAAA,EACE,QAAc,EAAA,aAAA,CAAA;AAAA,gBACb,EAAI,EAAA,mCAAA;AAAA,gBACJ,cAAgB,EAAA;AAAA,eACjB,GACH,CACF,EAAA;AAAA,aAAA,EACF,CACF,EAAA,CAAA;AAAA,4BACCjB,cAAA,CAAAkB,kBAAA,EAAA,EACE,QAAU,EAAA,QAAA,EAAA,GAAA,CAAI,CAAC,OACd,qBAAAhB,eAAA;AAAA,cAACY,eAAA;AAAA,cAAA;AAAA,gBAEC,SAAS,MAAM;AACb,kBAAA,IAAI,SAAW,EAAA;AACb,oBAAA,QAAA,CAAS,QAAQ,EAAE,CAAA;AAAA;AACrB,iBACF;AAAA,gBACA,KAAO,EAAA,EAAE,MAAQ,EAAA,SAAA,GAAY,YAAY,SAAU,EAAA;AAAA,gBAEnD,QAAA,EAAA;AAAA,kCAAAd,cAAA,CAACmB,mBAAG,OAAS,EAAA,CAAC,CAAM,KAAA,CAAA,CAAE,iBACpB,EAAA,QAAA,kBAAAnB,cAAA;AAAA,oBAACgB,qBAAA;AAAA,oBAAA;AAAA,sBACC,YAAA,EAAY,GAAG,aAAc,CAAA;AAAA,wBAC3B,EAAI,EAAA,eAAA;AAAA,wBACJ,cAAgB,EAAA;AAAA,uBACjB,CAAC,CAAI,CAAA,EAAA,OAAA,CAAQ,IAAI,CAAA,CAAA;AAAA,sBAClB,OAAS,EAAA,gBAAA,EAAkB,QAAS,CAAA,OAAA,CAAQ,EAAE,CAAA;AAAA,sBAC9C,eAAA,EAAiB,CAAC,QAAa,KAAA,iBAAA,CAAkB,CAAC,CAAC,QAAA,EAAU,QAAQ,EAAE,CAAA;AAAA,sBACvE,IAAK,EAAA;AAAA;AAAA,mBAET,EAAA,CAAA;AAAA,kCACAhB,cAAA,CAACmB,eACC,EAAA,EAAA,QAAA,kBAAAnB,cAAA,CAACQ,uBAAW,EAAA,EAAA,UAAA,EAAW,YAAW,SAAU,EAAA,YAAA,EACzC,QAAQ,EAAA,OAAA,CAAA,IAAA,EACX,CACF,EAAA,CAAA;AAAA,kCACAR,cAAA,CAACmB,mBACC,QAAC,kBAAAnB,cAAA,CAAAQ,uBAAA,EAAA,EAAW,WAAU,YAAc,EAAA,QAAA,EAAA,OAAA,CAAQ,KAAI,CAClD,EAAA,CAAA;AAAA,kCACAR,cAAA,CAACmB,mBAAG,OAAS,EAAA,CAAC,MAAM,CAAE,CAAA,eAAA,EACpB,EAAA,QAAA,kBAAAnB,cAAA,CAACoB,iBACC,EAAA,EAAA,QAAA,kBAAApB,cAAA;AAAA,oBAACqB,mBAAA;AAAA,oBAAA;AAAA,sBACC,SAAS,aAAc,CAAA;AAAA,wBACrB,EAAI,EAAA,gBAAA;AAAA,wBACJ,cAAgB,EAAA;AAAA,uBACjB,CAAA;AAAA,sBACD,UAAU,aAAc,CAAA;AAAA,wBACtB,EAAI,EAAA,iBAAA;AAAA,wBACJ,cAAgB,EAAA;AAAA,uBACjB,CAAA;AAAA,sBACD,YAAY,EAAA,CAAA,EAAG,OAAQ,CAAA,IAAI,IAAI,aAAc,CAAA;AAAA,wBAC3C,EAAI,EAAA,kCAAA;AAAA,wBACJ,cAAgB,EAAA;AAAA,uBACjB,CAAC,CAAA,CAAA;AAAA,sBACF,SAAS,OAAQ,CAAA,SAAA;AAAA,sBACjB,eAAA,EAAiB,CAAC,OAAY,KAAA;AAC5B,wBAAc,aAAA,CAAA;AAAA,0BACZ,GAAG,OAAA;AAAA,0BACH,SAAW,EAAA;AAAA,yBACZ,CAAA;AAAA,uBACH;AAAA,sBACA,aAAa,EAAA;AAAA;AAAA,qBAEjB,CACF,EAAA,CAAA;AAAA,kCACCrB,cAAA,CAAAmB,eAAA,EAAA,EACC,QAAC,kBAAAjB,eAAA,CAAAkB,iBAAA,EAAA,EAAK,KAAK,CACR,EAAA,QAAA,EAAA;AAAA,oBACC,SAAA,oBAAApB,cAAA;AAAA,sBAACsB,uBAAA;AAAA,sBAAA;AAAA,wBACC,OAAO,aAAc,CAAA;AAAA,0BACnB,EAAI,EAAA,iCAAA;AAAA,0BACJ,cAAgB,EAAA;AAAA,yBACjB,CAAA;AAAA,wBACD,OAAQ,EAAA,OAAA;AAAA,wBAER,yCAACC,YAAO,EAAA,EAAA;AAAA;AAAA,qBACV;AAAA,oBAED,SACC,oBAAAvB,cAAA;AAAA,sBAAC,kBAAA;AAAA,sBAAA;AAAA,wBACC,UAAU,MAAM;AACd,0BAAA,aAAA,CAAc,QAAQ,EAAE,CAAA;AAAA;AAC1B;AAAA;AACF,mBAAA,EAEJ,CACF,EAAA;AAAA;AAAA,eAAA;AAAA,cA1EK,OAAQ,CAAA;AAAA,aA4EhB,CACH,EAAA;AAAA;AAAA;AAAA,OAGF,mBAAAA,cAAA;AAAA,QAACwB,6BAAA;AAAA,QAAA;AAAA,UACC,IAAM,kBAAAxB,cAAA,CAACyB,sBAAe,EAAA,EAAA,KAAA,EAAM,OAAQ,EAAA,CAAA;AAAA,UACpC,SAAS,aAAc,CAAA;AAAA,YACrB,EAAI,EAAA,0CAAA;AAAA,YACJ,cAAgB,EAAA;AAAA,WACjB,CAAA;AAAA,UACD,MACE,EAAA,SAAA,mBACGzB,cAAA,CAAAI,uBAAA,EAAA,EAAW,SAAQ,WAAY,EAAA,SAAA,kBAAYJ,cAAA,CAAAM,UAAA,EAAA,EAAK,CAAI,EAAA,GAAA,EAAKD,sBAAS,EAAA,EAAA,EAAG,UACnE,QAAc,EAAA,aAAA,CAAA;AAAA,YACb,EAAI,EAAA,mCAAA;AAAA,YACJ,cAAgB,EAAA;AAAA,WACjB,GACH,CACE,GAAA;AAAA;AAAA,OAIZ,EAAA;AAAA,KACF,EAAA,CAAA;AAAA,oBACCL,cAAA,CAAA0B,mBAAA,CAAO,IAAP,EAAA,EAAY,IAAM,EAAA,SAAA,EAAW,YAAc,EAAA,YAAA,EAC1C,QAAC,kBAAA1B,cAAA,CAAA2B,mBAAA,EAAA,EAAc,SAAW,EAAA,iBAAA,EAAmB,CAC/C,EAAA;AAAA,GACF,EAAA,CAAA;AAEJ;AAUA,MAAM,kBAAqB,GAAA,CAAC,EAAE,QAAA,EAAwC,KAAA;AACpE,EAAA,MAAM,CAAC,SAAW,EAAA,YAAY,CAAI,GAAApC,gBAAA,CAAM,SAAS,KAAK,CAAA;AACtD,EAAM,MAAA,EAAE,aAAc,EAAA,GAAIE,iBAAQ,EAAA;AAElC,EAAA,uBAEIS,eAAA,CAAAK,mBAAA,EAAA,EAAA,QAAA,EAAA;AAAA,oBAAAP,cAAA;AAAA,MAACsB,uBAAA;AAAA,MAAA;AAAA,QACC,OAAA,EAAS,CAAC,CAAM,KAAA;AACd,UAAA,CAAA,CAAE,eAAgB,EAAA;AAClB,UAAA,YAAA,CAAa,IAAI,CAAA;AAAA,SACnB;AAAA,QACA,OAAO,aAAc,CAAA;AAAA,UACnB,EAAI,EAAA,iCAAA;AAAA,UACJ,cAAgB,EAAA;AAAA,SACjB,CAAA;AAAA,QACD,OAAQ,EAAA,OAAA;AAAA,QAER,yCAACZ,WAAM,EAAA,EAAA;AAAA;AAAA,KACT;AAAA,mCAECgB,mBAAO,CAAA,IAAA,EAAP,EAAY,IAAM,EAAA,SAAA,EAAW,cAAc,YAC1C,EAAA,QAAA,kBAAA1B,cAAA;AAAA,MAAC2B,mBAAA;AAAA,MAAA;AAAA,QACC,SAAA,EAAW,CAAC,CAAM,KAAA;AAChB,UAAA,CAAA,EAAG,eAAgB,EAAA;AACnB,UAAS,QAAA,EAAA;AAAA;AACX;AAAA,KAEJ,EAAA;AAAA,GACF,EAAA,CAAA;AAEJ,CAAA;AAMA,MAAM,oBAAoB,MAAM;AAC9B,EAAA,MAAM,WAAc,GAAAnC,sBAAA;AAAA,IAClB,CAAC,KAAU,KAAA,KAAA,CAAM,SAAU,CAAA,WAAA,CAAY,UAAU,QAAS,CAAA;AAAA,GAC5D;AAEA,EAAA,sCACGS,UAAK,CAAA,OAAA,EAAL,EAAa,WACZ,EAAA,QAAA,kBAAAD,cAAA,CAAC,YAAS,CACZ,EAAA,CAAA;AAEJ;;;;;"}