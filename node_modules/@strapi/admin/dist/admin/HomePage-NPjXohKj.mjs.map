{"version":3,"file":"HomePage-NPjXohKj.mjs","sources":["../../admin/src/services/homepage.ts","../../admin/src/pages/Home/components/Widget.tsx","../../admin/src/pages/Home/components/ContentManagerWidgets.tsx","../../admin/src/components/GuidedTour/Homepage.tsx","../../admin/src/pages/Home/components/GuidedTour.tsx","../../admin/src/pages/Home/HomePage.tsx"],"sourcesContent":["import * as Homepage from '../../../shared/contracts/homepage';\n\nimport { adminApi } from './api';\n\nconst homepageService = adminApi\n  .enhanceEndpoints({\n    // TODO: remove when the CM widgets are moved to the CM package, the type already exists there\n    addTagTypes: ['RecentDocumentList'],\n  })\n  .injectEndpoints({\n    endpoints: (builder) => ({\n      getRecentDocuments: builder.query<\n        Homepage.GetRecentDocuments.Response['data'],\n        Homepage.GetRecentDocuments.Request['query']\n      >({\n        query: (params) => `/admin/homepage/recent-documents?action=${params.action}`,\n        transformResponse: (response: Homepage.GetRecentDocuments.Response) => response.data,\n        providesTags: (res, _err, { action }) => [\n          { type: 'RecentDocumentList' as const, id: action },\n        ],\n      }),\n    }),\n  });\n\nconst { useGetRecentDocumentsQuery } = homepageService;\n\nexport { useGetRecentDocumentsQuery };\n","import * as React from 'react';\n\nimport { Box, Flex, type FlexProps, Loader, Typography } from '@strapi/design-system';\nimport { PuzzlePiece, WarningCircle } from '@strapi/icons';\nimport { EmptyDocuments } from '@strapi/icons/symbols';\nimport { type MessageDescriptor, useIntl } from 'react-intl';\n\ninterface RootProps {\n  title: MessageDescriptor;\n  icon?: typeof import('@strapi/icons').PuzzlePiece;\n  children: React.ReactNode;\n}\n\nconst Root = ({ title, icon = PuzzlePiece, children }: RootProps) => {\n  const { formatMessage } = useIntl();\n  const id = React.useId();\n  const Icon = icon;\n\n  return (\n    <Flex\n      width=\"100%\"\n      hasRadius\n      direction=\"column\"\n      alignItems=\"flex-start\"\n      background=\"neutral0\"\n      shadow=\"tableShadow\"\n      tag=\"section\"\n      gap={4}\n      padding={6}\n      aria-labelledby={id}\n    >\n      <Flex direction=\"row\" alignItems=\"center\" gap={2} tag=\"header\">\n        <Icon fill=\"neutral500\" aria-hidden />\n        <Typography textColor=\"neutral500\" variant=\"sigma\" tag=\"h2\" id={id}>\n          {formatMessage(title)}\n        </Typography>\n      </Flex>\n      <Box width=\"100%\" height=\"261px\" overflow=\"auto\" tag=\"main\">\n        {children}\n      </Box>\n    </Flex>\n  );\n};\n\ninterface LoadingProps {\n  children?: string;\n}\n\nconst Loading = ({ children }: LoadingProps) => {\n  const { formatMessage } = useIntl();\n\n  return (\n    <Flex height=\"100%\" justifyContent=\"center\" alignItems=\"center\">\n      <Loader>\n        {children ??\n          formatMessage({\n            id: 'HomePage.widget.loading',\n            defaultMessage: 'Loading widget content',\n          })}\n      </Loader>\n    </Flex>\n  );\n};\n\ninterface ErrorProps {\n  children?: string;\n}\n\nconst Error = ({ children }: ErrorProps) => {\n  const { formatMessage } = useIntl();\n\n  return (\n    <Flex height=\"100%\" direction=\"column\" justifyContent=\"center\" alignItems=\"center\" gap={2}>\n      <WarningCircle width=\"3.2rem\" height=\"3.2rem\" fill=\"danger600\" />\n      <Typography variant=\"delta\">\n        {formatMessage({\n          id: 'global.error',\n          defaultMessage: 'Something went wrong',\n        })}\n      </Typography>\n      <Typography textColor=\"neutral600\">\n        {children ??\n          formatMessage({\n            id: 'HomePage.widget.error',\n            defaultMessage: \"Couldn't load widget content.\",\n          })}\n      </Typography>\n    </Flex>\n  );\n};\n\ninterface NoDataProps {\n  children?: string;\n}\n\nconst NoData = ({ children }: NoDataProps) => {\n  const { formatMessage } = useIntl();\n\n  return (\n    <Flex height=\"100%\" direction=\"column\" justifyContent=\"center\" alignItems=\"center\" gap={6}>\n      <EmptyDocuments width=\"16rem\" height=\"8.8rem\" />\n      <Typography textColor=\"neutral600\">\n        {children ??\n          formatMessage({\n            id: 'HomePage.widget.no-data',\n            defaultMessage: 'No content found.',\n          })}\n      </Typography>\n    </Flex>\n  );\n};\n\nconst Widget = {\n  Root,\n  Loading,\n  Error,\n  NoData,\n};\n\nexport { Widget };\n","import { Box, IconButton, Status, Table, Tbody, Td, Tr, Typography } from '@strapi/design-system';\nimport { CheckCircle, Pencil } from '@strapi/icons';\nimport { useIntl } from 'react-intl';\nimport { Link, useNavigate } from 'react-router-dom';\nimport { styled } from 'styled-components';\n\nimport { RelativeTime } from '../../../components/RelativeTime';\nimport { useTracking } from '../../../features/Tracking';\nimport { useGetRecentDocumentsQuery } from '../../../services/homepage';\nimport { capitalise } from '../../../utils/strings';\n\nimport { Widget } from './Widget';\n\nimport type { RecentDocument } from '../../../../../shared/contracts/homepage';\n\nconst CellTypography = styled(Typography).attrs({ maxWidth: '14.4rem', display: 'block' })`\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n`;\n\ninterface DocumentStatusProps {\n  status: RecentDocument['status'];\n}\n\nconst DocumentStatus = ({ status = 'draft' }: DocumentStatusProps) => {\n  const statusVariant =\n    status === 'draft' ? 'secondary' : status === 'published' ? 'success' : 'alternative';\n\n  const { formatMessage } = useIntl();\n\n  return (\n    <Status variant={statusVariant} size=\"XS\">\n      <Typography tag=\"span\" variant=\"omega\" fontWeight=\"bold\">\n        {formatMessage({\n          id: `content-manager.containers.List.${status}`,\n          defaultMessage: capitalise(status),\n        })}\n      </Typography>\n    </Status>\n  );\n};\n\nconst RecentDocumentsTable = ({ documents }: { documents: RecentDocument[] }) => {\n  const { formatMessage } = useIntl();\n  const { trackUsage } = useTracking();\n  const navigate = useNavigate();\n\n  const getEditViewLink = (document: RecentDocument): string => {\n    // TODO: import the constants for this once the code is moved to the CM package\n    const isSingleType = document.kind === 'singleType';\n    const kindPath = isSingleType ? 'single-types' : 'collection-types';\n    const queryParams = document.locale ? `?plugins[i18n][locale]=${document.locale}` : '';\n\n    return `/content-manager/${kindPath}/${document.contentTypeUid}${isSingleType ? '' : '/' + document.documentId}${queryParams}`;\n  };\n\n  const handleRowClick = (document: RecentDocument) => () => {\n    trackUsage('willEditEntryFromHome');\n    const link = getEditViewLink(document);\n    navigate(link);\n  };\n\n  return (\n    <Table colCount={5} rowCount={documents?.length ?? 0}>\n      <Tbody>\n        {documents?.map((document) => (\n          <Tr onClick={handleRowClick(document)} cursor=\"pointer\" key={document.documentId}>\n            <Td>\n              <CellTypography title={document.title} variant=\"omega\" textColor=\"neutral800\">\n                {document.title}\n              </CellTypography>\n            </Td>\n            <Td>\n              <CellTypography variant=\"omega\" textColor=\"neutral600\">\n                {document.kind === 'singleType'\n                  ? formatMessage({\n                      id: 'content-manager.widget.last-edited.single-type',\n                      defaultMessage: 'Single-Type',\n                    })\n                  : formatMessage({\n                      id: document.contentTypeDisplayName,\n                      defaultMessage: document.contentTypeDisplayName,\n                    })}\n              </CellTypography>\n            </Td>\n            <Td>\n              <Box display=\"inline-block\">\n                {document.status ? (\n                  <DocumentStatus status={document.status} />\n                ) : (\n                  <Typography textColor=\"neutral600\" aria-hidden>\n                    -\n                  </Typography>\n                )}\n              </Box>\n            </Td>\n            <Td>\n              <Typography textColor=\"neutral600\">\n                <RelativeTime timestamp={new Date(document.updatedAt)} />\n              </Typography>\n            </Td>\n            <Td onClick={(e) => e.stopPropagation()}>\n              <Box display=\"inline-block\">\n                <IconButton\n                  tag={Link}\n                  to={getEditViewLink(document)}\n                  onClick={() => trackUsage('willEditEntryFromHome')}\n                  label={formatMessage({\n                    id: 'content-manager.actions.edit.label',\n                    defaultMessage: 'Edit',\n                  })}\n                  variant=\"ghost\"\n                >\n                  <Pencil />\n                </IconButton>\n              </Box>\n            </Td>\n          </Tr>\n        ))}\n      </Tbody>\n    </Table>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * LastEditedWidget\n * -----------------------------------------------------------------------------------------------*/\n\nconst LastEditedWidgetContent = () => {\n  const { formatMessage } = useIntl();\n  const { data, isLoading, error } = useGetRecentDocumentsQuery({ action: 'update' });\n\n  if (isLoading) {\n    return <Widget.Loading />;\n  }\n\n  if (error || !data) {\n    return <Widget.Error />;\n  }\n\n  if (data.length === 0) {\n    return (\n      <Widget.NoData>\n        {formatMessage({\n          id: 'content-manager.widget.last-edited.no-data',\n          defaultMessage: 'No edited entries',\n        })}\n      </Widget.NoData>\n    );\n  }\n\n  return <RecentDocumentsTable documents={data} />;\n};\n\nconst LastEditedWidget = () => {\n  return (\n    <Widget.Root\n      title={{\n        id: 'content-manager.widget.last-edited.title',\n        defaultMessage: 'Last edited entries',\n      }}\n      icon={Pencil}\n    >\n      <LastEditedWidgetContent />\n    </Widget.Root>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * LastPublishedWidget\n * -----------------------------------------------------------------------------------------------*/\n\nconst LastPublishedWidgetContent = () => {\n  const { formatMessage } = useIntl();\n  const { data, isLoading, error } = useGetRecentDocumentsQuery({ action: 'publish' });\n\n  if (isLoading) {\n    return <Widget.Loading />;\n  }\n\n  if (error || !data) {\n    return <Widget.Error />;\n  }\n\n  if (data.length === 0) {\n    return (\n      <Widget.NoData>\n        {formatMessage({\n          id: 'content-manager.widget.last-published.no-data',\n          defaultMessage: 'No published entries',\n        })}\n      </Widget.NoData>\n    );\n  }\n\n  return <RecentDocumentsTable documents={data} />;\n};\n\nconst LastPublishedWidget = () => {\n  return (\n    <Widget.Root\n      title={{\n        id: 'content-manager.widget.last-published.title',\n        defaultMessage: 'Last published entries',\n      }}\n      icon={CheckCircle}\n    >\n      <LastPublishedWidgetContent />\n    </Widget.Root>\n  );\n};\n\nexport { LastEditedWidget, LastPublishedWidget };\n","import { Box, Button, Flex, Typography, LinkButton } from '@strapi/design-system';\nimport { ArrowRight } from '@strapi/icons';\nimport { useIntl } from 'react-intl';\nimport { NavLink } from 'react-router-dom';\n\nimport { useTracking } from '../../features/Tracking';\n\nimport { LAYOUT_DATA, States, STATES } from './constants';\nimport { Number, VerticalDivider } from './Ornaments';\nimport { GuidedTourContextValue, useGuidedTour } from './Provider';\n\ntype SectionName = keyof GuidedTourContextValue['guidedTourState'];\n\nconst GuidedTourHomepage = () => {\n  const guidedTourState = useGuidedTour('GuidedTourHomepage', (state) => state.guidedTourState);\n  const setSkipped = useGuidedTour('GuidedTourHomepage', (state) => state.setSkipped);\n  const { formatMessage } = useIntl();\n  const { trackUsage } = useTracking();\n\n  const sections = Object.entries(LAYOUT_DATA).map(([key, val]) => ({\n    key: key,\n    title: val.home.title,\n    content: (\n      <LinkButton\n        onClick={() => trackUsage(val.home.trackingEvent)}\n        tag={NavLink}\n        to={val.home.cta.target}\n        endIcon={<ArrowRight />}\n      >\n        {formatMessage(val.home.cta.title)}\n      </LinkButton>\n    ),\n    isDone: Object.values(guidedTourState[key as SectionName]).every((value) => value === true),\n  }));\n\n  const activeSectionIndex = sections.findIndex((section) => !section.isDone);\n\n  const handleSkip = () => {\n    setSkipped(true);\n    trackUsage('didSkipGuidedtour');\n  };\n\n  return (\n    <Box\n      hasRadius\n      shadow=\"tableShadow\"\n      paddingTop={7}\n      paddingRight={4}\n      paddingLeft={7}\n      paddingBottom={4}\n      background=\"neutral0\"\n    >\n      <Flex direction=\"column\" alignItems=\"stretch\" gap={6}>\n        <Typography variant=\"beta\" tag=\"h2\">\n          {formatMessage({\n            id: 'app.components.GuidedTour.title',\n            defaultMessage: '3 steps to get started',\n          })}\n        </Typography>\n        <Box>\n          {sections.map((section, index) => {\n            const state = getState(activeSectionIndex, index);\n\n            return (\n              <Box key={section.key}>\n                <Flex>\n                  <Box minWidth={`3rem`} marginRight={5}>\n                    <Number state={state}>{index + 1}</Number>\n                  </Box>\n                  <Typography variant=\"delta\" tag=\"h3\">\n                    {formatMessage(section.title)}\n                  </Typography>\n                </Flex>\n                <Flex alignItems=\"flex-start\">\n                  <Flex\n                    justifyContent=\"center\"\n                    minWidth={`3rem`}\n                    marginBottom={3}\n                    marginTop={3}\n                    marginRight={5}\n                  >\n                    {index === sections.length - 1 ? null : <VerticalDivider state={state} />}\n                  </Flex>\n                  <Box marginTop={2}>{state === STATES.IS_ACTIVE ? section.content : null}</Box>\n                </Flex>\n              </Box>\n            );\n          })}\n        </Box>\n      </Flex>\n      <Flex justifyContent=\"flex-end\">\n        <Button variant=\"tertiary\" onClick={handleSkip}>\n          {formatMessage({ id: 'app.components.GuidedTour.skip', defaultMessage: 'Skip the tour' })}\n        </Button>\n      </Flex>\n    </Box>\n  );\n};\n\nconst getState = (activeSectionIndex: number, index: number): States => {\n  if (activeSectionIndex === -1) {\n    return STATES.IS_DONE;\n  }\n  if (index < activeSectionIndex) {\n    return STATES.IS_DONE;\n  }\n  if (index > activeSectionIndex) {\n    return STATES.IS_NOT_DONE;\n  }\n  return STATES.IS_ACTIVE;\n};\n\nexport { GuidedTourHomepage };\n","import { GuidedTourHomepage } from '../../../components/GuidedTour/Homepage';\nimport { useGuidedTour } from '../../../components/GuidedTour/Provider';\n\nexport const GuidedTour = () => {\n  const guidedTourState = useGuidedTour('HomePage', (state) => state.guidedTourState);\n  const isGuidedTourVisible = useGuidedTour('HomePage', (state) => state.isGuidedTourVisible);\n  const isSkipped = useGuidedTour('HomePage', (state) => state.isSkipped);\n  const showGuidedTour =\n    !Object.values(guidedTourState).every((section) =>\n      Object.values(section).every((step) => step)\n    ) &&\n    isGuidedTourVisible &&\n    !isSkipped;\n\n  if (!showGuidedTour) {\n    return null;\n  }\n\n  return <GuidedTourHomepage />;\n};\n","import * as React from 'react';\n\nimport { Flex, Grid, Main } from '@strapi/design-system';\nimport { useIntl } from 'react-intl';\n\nimport { Layouts } from '../../components/Layouts/Layout';\nimport { Page } from '../../components/PageHelpers';\nimport { useEnterprise } from '../../ee';\nimport { useAuth } from '../../features/Auth';\n\nimport { LastEditedWidget, LastPublishedWidget } from './components/ContentManagerWidgets';\nimport { GuidedTour } from './components/GuidedTour';\n\n/* -------------------------------------------------------------------------------------------------\n * HomePageCE\n * -----------------------------------------------------------------------------------------------*/\n\nconst HomePageCE = () => {\n  const { formatMessage } = useIntl();\n  const user = useAuth('HomePageCE', (state) => state.user);\n  const displayName = user?.firstname ?? user?.username ?? user?.email;\n\n  return (\n    <Main>\n      <Page.Title>\n        {formatMessage({ id: 'HomePage.head.title', defaultMessage: 'Homepage' })}\n      </Page.Title>\n      <Layouts.Header\n        title={formatMessage(\n          { id: 'HomePage.header.title', defaultMessage: 'Hello {name}' },\n          { name: displayName }\n        )}\n        subtitle={formatMessage({\n          id: 'HomePage.header.subtitle',\n          defaultMessage: 'Welcome to your administration panel',\n        })}\n      />\n      <Layouts.Content>\n        <Flex direction=\"column\" alignItems=\"stretch\" gap={8} paddingBottom={10}>\n          <GuidedTour />\n          <Grid.Root gap={5}>\n            <Grid.Item col={6} s={12}>\n              <LastEditedWidget />\n            </Grid.Item>\n            <Grid.Item col={6} s={12}>\n              <LastPublishedWidget />\n            </Grid.Item>\n          </Grid.Root>\n        </Flex>\n      </Layouts.Content>\n    </Main>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * HomePage\n * -----------------------------------------------------------------------------------------------*/\n\nconst HomePage = () => {\n  const Page = useEnterprise(\n    HomePageCE,\n    // eslint-disable-next-line import/no-cycle\n    async () => (await import('../../../../ee/admin/src/pages/HomePage')).HomePageEE\n  );\n\n  // block rendering until the EE component is fully loaded\n  if (!Page) {\n    return null;\n  }\n\n  return <Page />;\n};\n\nexport { HomePage, HomePageCE };\n"],"names":["Page"],"mappings":"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"}