{"version":3,"file":"ProfilePage-Bcb_ayAW.mjs","sources":["../../admin/src/pages/ProfilePage.tsx"],"sourcesContent":["import * as React from 'react';\n\nimport { Box, Button, Flex, useNotifyAT, Grid, Typography } from '@strapi/design-system';\nimport { Check } from '@strapi/icons';\nimport upperFirst from 'lodash/upperFirst';\nimport { useIntl } from 'react-intl';\nimport * as yup from 'yup';\n\nimport { Form, FormHelpers } from '../components/Form';\nimport { InputRenderer } from '../components/FormInputs/Renderer';\nimport { Layouts } from '../components/Layouts/Layout';\nimport { Page } from '../components/PageHelpers';\nimport { useTypedDispatch, useTypedSelector } from '../core/store/hooks';\nimport { useAuth } from '../features/Auth';\nimport { useNotification } from '../features/Notifications';\nimport { useTracking } from '../features/Tracking';\nimport { useAPIErrorHandler } from '../hooks/useAPIErrorHandler';\nimport { AppState, setAppTheme } from '../reducer';\nimport { useIsSSOLockedQuery, useUpdateMeMutation } from '../services/auth';\nimport { isBaseQueryError } from '../utils/baseQuery';\nimport { translatedErrors } from '../utils/translatedErrors';\nimport { getDisplayName } from '../utils/users';\n\nimport { COMMON_USER_SCHEMA } from './Settings/pages/Users/utils/validation';\n\nimport type { UpdateMe } from '../../../shared/contracts/users';\n\nconst PROFILE_VALIDTION_SCHEMA = yup.object().shape({\n  ...COMMON_USER_SCHEMA,\n  currentPassword: yup\n    .string()\n    // @ts-expect-error â€“ no idea why this is failing.\n    .when(['password', 'confirmPassword'], (password, confirmPassword, passSchema) => {\n      return password || confirmPassword\n        ? passSchema\n            .required({\n              id: translatedErrors.required.id,\n              defaultMessage: 'This field is required',\n            })\n            .nullable()\n        : passSchema;\n    }),\n  preferedLanguage: yup.string().nullable(),\n});\n\n/* -------------------------------------------------------------------------------------------------\n * ProfilePage\n * -----------------------------------------------------------------------------------------------*/\n\nconst ProfilePage = () => {\n  const localeNames = useTypedSelector((state) => state.admin_app.language.localeNames);\n  const { formatMessage } = useIntl();\n  const { trackUsage } = useTracking();\n  const { toggleNotification } = useNotification();\n  const { notifyStatus } = useNotifyAT();\n  const currentTheme = useTypedSelector((state) => state.admin_app.theme.currentTheme);\n  const dispatch = useTypedDispatch();\n  const {\n    _unstableFormatValidationErrors: formatValidationErrors,\n    _unstableFormatAPIError: formatApiError,\n  } = useAPIErrorHandler();\n\n  const user = useAuth('ProfilePage', (state) => state.user);\n\n  React.useEffect(() => {\n    if (user) {\n      notifyStatus(\n        formatMessage({\n          id: 'Settings.profile.form.notify.data.loaded',\n          defaultMessage: 'Your profile data has been loaded',\n        })\n      );\n    } else {\n      toggleNotification({\n        type: 'danger',\n        message: formatMessage({ id: 'notification.error', defaultMessage: 'An error occured' }),\n      });\n    }\n  }, [formatMessage, notifyStatus, toggleNotification, user]);\n\n  const [updateMe, { isLoading: isSubmittingForm }] = useUpdateMeMutation();\n\n  const {\n    isLoading,\n    data: dataSSO,\n    error,\n  } = useIsSSOLockedQuery(undefined, {\n    skip: !(window.strapi.isEE && window.strapi.features.isEnabled('sso')),\n  });\n\n  React.useEffect(() => {\n    if (error) {\n      toggleNotification({\n        type: 'danger',\n        message: formatMessage({ id: 'Settings.permissions.users.sso.provider.error' }),\n      });\n    }\n  }, [error, formatMessage, toggleNotification]);\n\n  type UpdateUsersMeBody = UpdateMe.Request['body'] & {\n    confirmPassword: string;\n    currentTheme: AppState['theme']['currentTheme'];\n  };\n\n  const handleSubmit = async (\n    body: UpdateUsersMeBody,\n    { setErrors }: FormHelpers<UpdateUsersMeBody>\n  ) => {\n    const { confirmPassword: _confirmPassword, currentTheme, ...bodyRest } = body;\n    let dataToSend = bodyRest;\n\n    // The password fields are optional. If the user didn't touch them, don't send any password\n    // to the API, because an empty string would throw a validation error\n    if (dataToSend.password === '') {\n      const {\n        password: _password,\n        currentPassword: _currentPassword,\n        ...passwordRequestBodyRest\n      } = dataToSend;\n      dataToSend = passwordRequestBodyRest;\n    }\n\n    const res = await updateMe(dataToSend);\n\n    if ('data' in res) {\n      dispatch(setAppTheme(currentTheme));\n\n      trackUsage('didChangeMode', { newMode: currentTheme });\n\n      toggleNotification({\n        type: 'success',\n        message: formatMessage({ id: 'notification.success.saved', defaultMessage: 'Saved' }),\n      });\n    }\n\n    if ('error' in res) {\n      if (isBaseQueryError(res.error) && res.error.name === 'ValidationError') {\n        setErrors(formatValidationErrors(res.error));\n      } else if (isBaseQueryError(res.error)) {\n        toggleNotification({\n          type: 'danger',\n          message: formatApiError(res.error),\n        });\n      } else {\n        toggleNotification({\n          type: 'danger',\n          message: formatMessage({ id: 'notification.error', defaultMessage: 'An error occured' }),\n        });\n      }\n    }\n  };\n\n  if (isLoading) {\n    return <Page.Loading />;\n  }\n\n  const hasLockedRole = dataSSO?.isSSOLocked ?? false;\n  const { email, firstname, lastname, username, preferedLanguage } = user ?? {};\n  const initialData = {\n    email: email ?? '',\n    firstname: firstname ?? '',\n    lastname: lastname ?? '',\n    username: username ?? '',\n    preferedLanguage,\n    currentTheme,\n    confirmPassword: '',\n    password: '',\n  };\n\n  return (\n    <Page.Main aria-busy={isSubmittingForm}>\n      <Page.Title>\n        {formatMessage({\n          id: 'Settings.profile.form.section.head.title',\n          defaultMessage: 'User profile',\n        })}\n      </Page.Title>\n      <Form\n        method=\"PUT\"\n        onSubmit={handleSubmit}\n        initialValues={initialData}\n        validationSchema={PROFILE_VALIDTION_SCHEMA}\n      >\n        {({ isSubmitting, modified }) => (\n          <>\n            <Layouts.Header\n              title={getDisplayName(user)}\n              primaryAction={\n                <Button\n                  startIcon={<Check />}\n                  loading={isSubmitting}\n                  type=\"submit\"\n                  disabled={!modified}\n                >\n                  {formatMessage({ id: 'global.save', defaultMessage: 'Save' })}\n                </Button>\n              }\n            />\n            <Box paddingBottom={10}>\n              <Layouts.Content>\n                <Flex direction=\"column\" alignItems=\"stretch\" gap={6}>\n                  <UserInfoSection />\n                  {!hasLockedRole && <PasswordSection />}\n                  <PreferencesSection localeNames={localeNames} />\n                </Flex>\n              </Layouts.Content>\n            </Box>\n          </>\n        )}\n      </Form>\n    </Page.Main>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * PasswordSection\n * -----------------------------------------------------------------------------------------------*/\n\nconst PasswordSection = () => {\n  const { formatMessage } = useIntl();\n\n  return (\n    <Box\n      background=\"neutral0\"\n      hasRadius\n      shadow=\"filterShadow\"\n      paddingTop={6}\n      paddingBottom={6}\n      paddingLeft={7}\n      paddingRight={7}\n    >\n      <Flex direction=\"column\" alignItems=\"stretch\" gap={4}>\n        <Typography variant=\"delta\" tag=\"h2\">\n          {formatMessage({\n            id: 'global.change-password',\n            defaultMessage: 'Change password',\n          })}\n        </Typography>\n        {[\n          [\n            {\n              label: formatMessage({\n                id: 'Auth.form.currentPassword.label',\n                defaultMessage: 'Current Password',\n              }),\n              name: 'currentPassword',\n              size: 6,\n              type: 'password' as const,\n            },\n          ],\n          [\n            {\n              autoComplete: 'new-password',\n              label: formatMessage({\n                id: 'global.password',\n                defaultMessage: 'Password',\n              }),\n              name: 'password',\n              size: 6,\n              type: 'password' as const,\n            },\n            {\n              autoComplete: 'new-password',\n              label: formatMessage({\n                id: 'Auth.form.confirmPassword.label',\n                defaultMessage: 'Confirm Password',\n              }),\n              name: 'confirmPassword',\n              size: 6,\n              type: 'password' as const,\n            },\n          ],\n        ].map((row, index) => (\n          <Grid.Root key={index} gap={5}>\n            {row.map(({ size, ...field }) => (\n              <Grid.Item key={field.name} col={size} direction=\"column\" alignItems=\"stretch\">\n                <InputRenderer {...field} />\n              </Grid.Item>\n            ))}\n          </Grid.Root>\n        ))}\n      </Flex>\n    </Box>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * PreferencesSection\n * -----------------------------------------------------------------------------------------------*/\n\ninterface PreferencesSectionProps {\n  localeNames: Record<string, string>;\n}\n\nconst PreferencesSection = ({ localeNames }: PreferencesSectionProps) => {\n  const { formatMessage } = useIntl();\n  const themesToDisplay = useTypedSelector((state) => state.admin_app.theme.availableThemes);\n\n  return (\n    <Box\n      background=\"neutral0\"\n      hasRadius\n      shadow=\"filterShadow\"\n      paddingTop={6}\n      paddingBottom={6}\n      paddingLeft={7}\n      paddingRight={7}\n    >\n      <Flex direction=\"column\" alignItems=\"stretch\" gap={4}>\n        <Flex direction=\"column\" alignItems=\"stretch\" gap={1}>\n          <Typography variant=\"delta\" tag=\"h2\">\n            {formatMessage({\n              id: 'Settings.profile.form.section.experience.title',\n              defaultMessage: 'Experience',\n            })}\n          </Typography>\n          <Typography>\n            {formatMessage(\n              {\n                id: 'Settings.profile.form.section.experience.interfaceLanguageHelp',\n                defaultMessage:\n                  'Preference changes will apply only to you. More information is available {here}.',\n              },\n              {\n                here: (\n                  <Box\n                    tag=\"a\"\n                    color=\"primary600\"\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                    href=\"https://docs.strapi.io/developer-docs/latest/development/admin-customization.html#locales\"\n                  >\n                    {formatMessage({\n                      id: 'Settings.profile.form.section.experience.here',\n                      defaultMessage: 'here',\n                    })}\n                  </Box>\n                ),\n              }\n            )}\n          </Typography>\n        </Flex>\n        <Grid.Root gap={5}>\n          {[\n            {\n              hint: formatMessage({\n                id: 'Settings.profile.form.section.experience.interfaceLanguage.hint',\n                defaultMessage: 'This will only display your own interface in the chosen language.',\n              }),\n              label: formatMessage({\n                id: 'Settings.profile.form.section.experience.interfaceLanguage',\n                defaultMessage: 'Interface language',\n              }),\n              name: 'preferedLanguage',\n              options: Object.entries(localeNames).map(([value, label]) => ({\n                label,\n                value,\n              })),\n              placeholder: formatMessage({\n                id: 'global.select',\n                defaultMessage: 'Select',\n              }),\n              size: 6,\n              type: 'enumeration' as const,\n            },\n            {\n              hint: formatMessage({\n                id: 'Settings.profile.form.section.experience.mode.hint',\n                defaultMessage: 'Displays your interface in the chosen mode.',\n              }),\n              label: formatMessage({\n                id: 'Settings.profile.form.section.experience.mode.label',\n                defaultMessage: 'Interface mode',\n              }),\n              name: 'currentTheme',\n              options: [\n                {\n                  label: formatMessage({\n                    id: 'Settings.profile.form.section.experience.mode.option-system-label',\n                    defaultMessage: 'Use system settings',\n                  }),\n                  value: 'system',\n                },\n                ...themesToDisplay.map((theme) => ({\n                  label: formatMessage(\n                    {\n                      id: 'Settings.profile.form.section.experience.mode.option-label',\n                      defaultMessage: '{name} mode',\n                    },\n                    {\n                      name: formatMessage({\n                        id: theme,\n                        defaultMessage: upperFirst(theme),\n                      }),\n                    }\n                  ),\n                  value: theme,\n                })),\n              ],\n              placeholder: formatMessage({\n                id: 'components.Select.placeholder',\n                defaultMessage: 'Select',\n              }),\n              size: 6,\n              type: 'enumeration' as const,\n            },\n          ].map(({ size, ...field }) => (\n            <Grid.Item key={field.name} col={size} direction=\"column\" alignItems=\"stretch\">\n              <InputRenderer {...field} />\n            </Grid.Item>\n          ))}\n        </Grid.Root>\n      </Flex>\n    </Box>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * UserInfoSection\n * -----------------------------------------------------------------------------------------------*/\n\nconst UserInfoSection = () => {\n  const { formatMessage } = useIntl();\n\n  return (\n    <Box\n      background=\"neutral0\"\n      hasRadius\n      shadow=\"filterShadow\"\n      paddingTop={6}\n      paddingBottom={6}\n      paddingLeft={7}\n      paddingRight={7}\n    >\n      <Flex direction=\"column\" alignItems=\"stretch\" gap={4}>\n        <Typography variant=\"delta\" tag=\"h2\">\n          {formatMessage({\n            id: 'global.profile',\n            defaultMessage: 'Profile',\n          })}\n        </Typography>\n        <Grid.Root gap={5}>\n          {[\n            {\n              label: formatMessage({\n                id: 'Auth.form.firstname.label',\n                defaultMessage: 'First name',\n              }),\n              name: 'firstname',\n              required: true,\n              size: 6,\n              type: 'string' as const,\n            },\n            {\n              label: formatMessage({\n                id: 'Auth.form.lastname.label',\n                defaultMessage: 'Last name',\n              }),\n              name: 'lastname',\n              size: 6,\n              type: 'string' as const,\n            },\n            {\n              label: formatMessage({\n                id: 'Auth.form.email.label',\n                defaultMessage: 'Email',\n              }),\n              name: 'email',\n              required: true,\n              size: 6,\n              type: 'email' as const,\n            },\n            {\n              label: formatMessage({\n                id: 'Auth.form.username.label',\n                defaultMessage: 'Username',\n              }),\n              name: 'username',\n              size: 6,\n              type: 'string' as const,\n            },\n          ].map(({ size, ...field }) => (\n            <Grid.Item key={field.name} col={size} direction=\"column\" alignItems=\"stretch\">\n              <InputRenderer {...field} />\n            </Grid.Item>\n          ))}\n        </Grid.Root>\n      </Flex>\n    </Box>\n  );\n};\n\nexport { ProfilePage };\n"],"names":["translatedErrors","currentTheme","InputRenderer"],"mappings":";;;;;;;;;;;;;AA2BA,MAAM,wBAA2B,GAAA,GAAA,CAAI,MAAO,EAAA,CAAE,KAAM,CAAA;AAAA,EAClD,GAAG,kBAAA;AAAA,EACH,eAAiB,EAAA,GAAA,CACd,MAAO,EAAA,CAEP,IAAK,CAAA,CAAC,UAAY,EAAA,iBAAiB,CAAG,EAAA,CAAC,QAAU,EAAA,eAAA,EAAiB,UAAe,KAAA;AAChF,IAAO,OAAA,QAAA,IAAY,eACf,GAAA,UAAA,CACG,QAAS,CAAA;AAAA,MACR,EAAA,EAAIA,YAAiB,QAAS,CAAA,EAAA;AAAA,MAC9B,cAAgB,EAAA;AAAA,KACjB,CACA,CAAA,QAAA,EACH,GAAA,UAAA;AAAA,GACL,CAAA;AAAA,EACH,gBAAkB,EAAA,GAAA,CAAI,MAAO,EAAA,CAAE,QAAS;AAC1C,CAAC,CAAA;AAMD,MAAM,cAAc,MAAM;AACxB,EAAA,MAAM,cAAc,gBAAiB,CAAA,CAAC,UAAU,KAAM,CAAA,SAAA,CAAU,SAAS,WAAW,CAAA;AACpF,EAAM,MAAA,EAAE,aAAc,EAAA,GAAI,OAAQ,EAAA;AAClC,EAAM,MAAA,EAAE,UAAW,EAAA,GAAI,WAAY,EAAA;AACnC,EAAM,MAAA,EAAE,kBAAmB,EAAA,GAAI,eAAgB,EAAA;AAC/C,EAAM,MAAA,EAAE,YAAa,EAAA,GAAI,WAAY,EAAA;AACrC,EAAA,MAAM,eAAe,gBAAiB,CAAA,CAAC,UAAU,KAAM,CAAA,SAAA,CAAU,MAAM,YAAY,CAAA;AACnF,EAAA,MAAM,WAAW,gBAAiB,EAAA;AAClC,EAAM,MAAA;AAAA,IACJ,+BAAiC,EAAA,sBAAA;AAAA,IACjC,uBAAyB,EAAA;AAAA,MACvB,kBAAmB,EAAA;AAEvB,EAAA,MAAM,OAAO,OAAQ,CAAA,aAAA,EAAe,CAAC,KAAA,KAAU,MAAM,IAAI,CAAA;AAEzD,EAAA,KAAA,CAAM,UAAU,MAAM;AACpB,IAAA,IAAI,IAAM,EAAA;AACR,MAAA,YAAA;AAAA,QACE,aAAc,CAAA;AAAA,UACZ,EAAI,EAAA,0CAAA;AAAA,UACJ,cAAgB,EAAA;AAAA,SACjB;AAAA,OACH;AAAA,KACK,MAAA;AACL,MAAmB,kBAAA,CAAA;AAAA,QACjB,IAAM,EAAA,QAAA;AAAA,QACN,SAAS,aAAc,CAAA,EAAE,IAAI,oBAAsB,EAAA,cAAA,EAAgB,oBAAoB;AAAA,OACxF,CAAA;AAAA;AACH,KACC,CAAC,aAAA,EAAe,YAAc,EAAA,kBAAA,EAAoB,IAAI,CAAC,CAAA;AAE1D,EAAA,MAAM,CAAC,QAAU,EAAA,EAAE,WAAW,gBAAiB,EAAC,IAAI,mBAAoB,EAAA;AAExE,EAAM,MAAA;AAAA,IACJ,SAAA;AAAA,IACA,IAAM,EAAA,OAAA;AAAA,IACN;AAAA,GACF,GAAI,oBAAoB,KAAW,CAAA,EAAA;AAAA,IACjC,IAAA,EAAM,EAAE,MAAO,CAAA,MAAA,CAAO,QAAQ,MAAO,CAAA,MAAA,CAAO,QAAS,CAAA,SAAA,CAAU,KAAK,CAAA;AAAA,GACrE,CAAA;AAED,EAAA,KAAA,CAAM,UAAU,MAAM;AACpB,IAAA,IAAI,KAAO,EAAA;AACT,MAAmB,kBAAA,CAAA;AAAA,QACjB,IAAM,EAAA,QAAA;AAAA,QACN,OAAS,EAAA,aAAA,CAAc,EAAE,EAAA,EAAI,iDAAiD;AAAA,OAC/E,CAAA;AAAA;AACH,GACC,EAAA,CAAC,KAAO,EAAA,aAAA,EAAe,kBAAkB,CAAC,CAAA;AAO7C,EAAA,MAAM,YAAe,GAAA,OACnB,IACA,EAAA,EAAE,WACC,KAAA;AACH,IAAA,MAAM,EAAE,eAAiB,EAAA,gBAAA,EAAkB,cAAAC,aAAc,EAAA,GAAG,UAAa,GAAA,IAAA;AACzE,IAAA,IAAI,UAAa,GAAA,QAAA;AAIjB,IAAI,IAAA,UAAA,CAAW,aAAa,EAAI,EAAA;AAC9B,MAAM,MAAA;AAAA,QACJ,QAAU,EAAA,SAAA;AAAA,QACV,eAAiB,EAAA,gBAAA;AAAA,QACjB,GAAG;AAAA,OACD,GAAA,UAAA;AACJ,MAAa,UAAA,GAAA,uBAAA;AAAA;AAGf,IAAM,MAAA,GAAA,GAAM,MAAM,QAAA,CAAS,UAAU,CAAA;AAErC,IAAA,IAAI,UAAU,GAAK,EAAA;AACjB,MAAS,QAAA,CAAA,WAAA,CAAYA,aAAY,CAAC,CAAA;AAElC,MAAA,UAAA,CAAW,eAAiB,EAAA,EAAE,OAASA,EAAAA,aAAAA,EAAc,CAAA;AAErD,MAAmB,kBAAA,CAAA;AAAA,QACjB,IAAM,EAAA,SAAA;AAAA,QACN,SAAS,aAAc,CAAA,EAAE,IAAI,4BAA8B,EAAA,cAAA,EAAgB,SAAS;AAAA,OACrF,CAAA;AAAA;AAGH,IAAA,IAAI,WAAW,GAAK,EAAA;AAClB,MAAA,IAAI,iBAAiB,GAAI,CAAA,KAAK,KAAK,GAAI,CAAA,KAAA,CAAM,SAAS,iBAAmB,EAAA;AACvE,QAAU,SAAA,CAAA,sBAAA,CAAuB,GAAI,CAAA,KAAK,CAAC,CAAA;AAAA,OAClC,MAAA,IAAA,gBAAA,CAAiB,GAAI,CAAA,KAAK,CAAG,EAAA;AACtC,QAAmB,kBAAA,CAAA;AAAA,UACjB,IAAM,EAAA,QAAA;AAAA,UACN,OAAA,EAAS,cAAe,CAAA,GAAA,CAAI,KAAK;AAAA,SAClC,CAAA;AAAA,OACI,MAAA;AACL,QAAmB,kBAAA,CAAA;AAAA,UACjB,IAAM,EAAA,QAAA;AAAA,UACN,SAAS,aAAc,CAAA,EAAE,IAAI,oBAAsB,EAAA,cAAA,EAAgB,oBAAoB;AAAA,SACxF,CAAA;AAAA;AACH;AACF,GACF;AAEA,EAAA,IAAI,SAAW,EAAA;AACb,IAAO,uBAAA,GAAA,CAAC,IAAK,CAAA,OAAA,EAAL,EAAa,CAAA;AAAA;AAGvB,EAAM,MAAA,aAAA,GAAgB,SAAS,WAAe,IAAA,KAAA;AAC9C,EAAM,MAAA,EAAE,OAAO,SAAW,EAAA,QAAA,EAAU,UAAU,gBAAiB,EAAA,GAAI,QAAQ,EAAC;AAC5E,EAAA,MAAM,WAAc,GAAA;AAAA,IAClB,OAAO,KAAS,IAAA,EAAA;AAAA,IAChB,WAAW,SAAa,IAAA,EAAA;AAAA,IACxB,UAAU,QAAY,IAAA,EAAA;AAAA,IACtB,UAAU,QAAY,IAAA,EAAA;AAAA,IACtB,gBAAA;AAAA,IACA,YAAA;AAAA,IACA,eAAiB,EAAA,EAAA;AAAA,IACjB,QAAU,EAAA;AAAA,GACZ;AAEA,EAAA,uBACG,IAAA,CAAA,IAAA,CAAK,IAAL,EAAA,EAAU,aAAW,gBACpB,EAAA,QAAA,EAAA;AAAA,oBAAC,GAAA,CAAA,IAAA,CAAK,KAAL,EAAA,EACE,QAAc,EAAA,aAAA,CAAA;AAAA,MACb,EAAI,EAAA,0CAAA;AAAA,MACJ,cAAgB,EAAA;AAAA,KACjB,CACH,EAAA,CAAA;AAAA,oBACA,GAAA;AAAA,MAAC,IAAA;AAAA,MAAA;AAAA,QACC,MAAO,EAAA,KAAA;AAAA,QACP,QAAU,EAAA,YAAA;AAAA,QACV,aAAe,EAAA,WAAA;AAAA,QACf,gBAAkB,EAAA,wBAAA;AAAA,QAEjB,QAAC,EAAA,CAAA,EAAE,YAAc,EAAA,QAAA,uBAEd,IAAA,CAAA,QAAA,EAAA,EAAA,QAAA,EAAA;AAAA,0BAAA,GAAA;AAAA,YAAC,OAAQ,CAAA,MAAA;AAAA,YAAR;AAAA,cACC,KAAA,EAAO,eAAe,IAAI,CAAA;AAAA,cAC1B,aACE,kBAAA,GAAA;AAAA,gBAAC,MAAA;AAAA,gBAAA;AAAA,kBACC,SAAA,sBAAY,KAAM,EAAA,EAAA,CAAA;AAAA,kBAClB,OAAS,EAAA,YAAA;AAAA,kBACT,IAAK,EAAA,QAAA;AAAA,kBACL,UAAU,CAAC,QAAA;AAAA,kBAEV,wBAAc,EAAE,EAAA,EAAI,aAAe,EAAA,cAAA,EAAgB,QAAQ;AAAA;AAAA;AAC9D;AAAA,WAEJ;AAAA,0BACC,GAAA,CAAA,GAAA,EAAA,EAAI,aAAe,EAAA,EAAA,EAClB,8BAAC,OAAQ,CAAA,OAAA,EAAR,EACC,QAAA,kBAAA,IAAA,CAAC,QAAK,SAAU,EAAA,QAAA,EAAS,UAAW,EAAA,SAAA,EAAU,KAAK,CACjD,EAAA,QAAA,EAAA;AAAA,4BAAA,GAAA,CAAC,eAAgB,EAAA,EAAA,CAAA;AAAA,YAChB,CAAC,aAAiB,oBAAA,GAAA,CAAC,eAAgB,EAAA,EAAA,CAAA;AAAA,4BACpC,GAAA,CAAC,sBAAmB,WAA0B,EAAA;AAAA,WAAA,EAChD,GACF,CACF,EAAA;AAAA,SACF,EAAA;AAAA;AAAA;AAEJ,GACF,EAAA,CAAA;AAEJ;AAMA,MAAM,kBAAkB,MAAM;AAC5B,EAAM,MAAA,EAAE,aAAc,EAAA,GAAI,OAAQ,EAAA;AAElC,EACE,uBAAA,GAAA;AAAA,IAAC,GAAA;AAAA,IAAA;AAAA,MACC,UAAW,EAAA,UAAA;AAAA,MACX,SAAS,EAAA,IAAA;AAAA,MACT,MAAO,EAAA,cAAA;AAAA,MACP,UAAY,EAAA,CAAA;AAAA,MACZ,aAAe,EAAA,CAAA;AAAA,MACf,WAAa,EAAA,CAAA;AAAA,MACb,YAAc,EAAA,CAAA;AAAA,MAEd,+BAAC,IAAK,EAAA,EAAA,SAAA,EAAU,UAAS,UAAW,EAAA,SAAA,EAAU,KAAK,CACjD,EAAA,QAAA,EAAA;AAAA,wBAAA,GAAA,CAAC,UAAW,EAAA,EAAA,OAAA,EAAQ,OAAQ,EAAA,GAAA,EAAI,MAC7B,QAAc,EAAA,aAAA,CAAA;AAAA,UACb,EAAI,EAAA,wBAAA;AAAA,UACJ,cAAgB,EAAA;AAAA,SACjB,CACH,EAAA,CAAA;AAAA,QACC;AAAA,UACC;AAAA,YACE;AAAA,cACE,OAAO,aAAc,CAAA;AAAA,gBACnB,EAAI,EAAA,iCAAA;AAAA,gBACJ,cAAgB,EAAA;AAAA,eACjB,CAAA;AAAA,cACD,IAAM,EAAA,iBAAA;AAAA,cACN,IAAM,EAAA,CAAA;AAAA,cACN,IAAM,EAAA;AAAA;AACR,WACF;AAAA,UACA;AAAA,YACE;AAAA,cACE,YAAc,EAAA,cAAA;AAAA,cACd,OAAO,aAAc,CAAA;AAAA,gBACnB,EAAI,EAAA,iBAAA;AAAA,gBACJ,cAAgB,EAAA;AAAA,eACjB,CAAA;AAAA,cACD,IAAM,EAAA,UAAA;AAAA,cACN,IAAM,EAAA,CAAA;AAAA,cACN,IAAM,EAAA;AAAA,aACR;AAAA,YACA;AAAA,cACE,YAAc,EAAA,cAAA;AAAA,cACd,OAAO,aAAc,CAAA;AAAA,gBACnB,EAAI,EAAA,iCAAA;AAAA,gBACJ,cAAgB,EAAA;AAAA,eACjB,CAAA;AAAA,cACD,IAAM,EAAA,iBAAA;AAAA,cACN,IAAM,EAAA,CAAA;AAAA,cACN,IAAM,EAAA;AAAA;AACR;AACF,UACA,GAAI,CAAA,CAAC,GAAK,EAAA,KAAA,yBACT,IAAK,CAAA,IAAA,EAAL,EAAsB,GAAA,EAAK,GACzB,QAAI,EAAA,GAAA,CAAA,GAAA,CAAI,CAAC,EAAE,IAAA,EAAM,GAAG,KAAM,EAAA,qBACxB,GAAA,CAAA,IAAA,CAAK,MAAL,EAA2B,GAAA,EAAK,MAAM,SAAU,EAAA,QAAA,EAAS,YAAW,SACnE,EAAA,QAAA,kBAAA,GAAA,CAACC,qBAAe,EAAA,EAAA,GAAG,OAAO,CADZ,EAAA,EAAA,KAAA,CAAM,IAEtB,CACD,CAAA,EAAA,EALa,KAMhB,CACD;AAAA,OACH,EAAA;AAAA;AAAA,GACF;AAEJ,CAAA;AAUA,MAAM,kBAAqB,GAAA,CAAC,EAAE,WAAA,EAA2C,KAAA;AACvE,EAAM,MAAA,EAAE,aAAc,EAAA,GAAI,OAAQ,EAAA;AAClC,EAAA,MAAM,kBAAkB,gBAAiB,CAAA,CAAC,UAAU,KAAM,CAAA,SAAA,CAAU,MAAM,eAAe,CAAA;AAEzF,EACE,uBAAA,GAAA;AAAA,IAAC,GAAA;AAAA,IAAA;AAAA,MACC,UAAW,EAAA,UAAA;AAAA,MACX,SAAS,EAAA,IAAA;AAAA,MACT,MAAO,EAAA,cAAA;AAAA,MACP,UAAY,EAAA,CAAA;AAAA,MACZ,aAAe,EAAA,CAAA;AAAA,MACf,WAAa,EAAA,CAAA;AAAA,MACb,YAAc,EAAA,CAAA;AAAA,MAEd,+BAAC,IAAK,EAAA,EAAA,SAAA,EAAU,UAAS,UAAW,EAAA,SAAA,EAAU,KAAK,CACjD,EAAA,QAAA,EAAA;AAAA,wBAAA,IAAA,CAAC,QAAK,SAAU,EAAA,QAAA,EAAS,UAAW,EAAA,SAAA,EAAU,KAAK,CACjD,EAAA,QAAA,EAAA;AAAA,0BAAA,GAAA,CAAC,UAAW,EAAA,EAAA,OAAA,EAAQ,OAAQ,EAAA,GAAA,EAAI,MAC7B,QAAc,EAAA,aAAA,CAAA;AAAA,YACb,EAAI,EAAA,gDAAA;AAAA,YACJ,cAAgB,EAAA;AAAA,WACjB,CACH,EAAA,CAAA;AAAA,8BACC,UACE,EAAA,EAAA,QAAA,EAAA,aAAA;AAAA,YACC;AAAA,cACE,EAAI,EAAA,gEAAA;AAAA,cACJ,cACE,EAAA;AAAA,aACJ;AAAA,YACA;AAAA,cACE,IACE,kBAAA,GAAA;AAAA,gBAAC,GAAA;AAAA,gBAAA;AAAA,kBACC,GAAI,EAAA,GAAA;AAAA,kBACJ,KAAM,EAAA,YAAA;AAAA,kBACN,MAAO,EAAA,QAAA;AAAA,kBACP,GAAI,EAAA,qBAAA;AAAA,kBACJ,IAAK,EAAA,2FAAA;AAAA,kBAEJ,QAAc,EAAA,aAAA,CAAA;AAAA,oBACb,EAAI,EAAA,+CAAA;AAAA,oBACJ,cAAgB,EAAA;AAAA,mBACjB;AAAA;AAAA;AACH;AAEJ,WAEJ,EAAA;AAAA,SACF,EAAA,CAAA;AAAA,wBACC,GAAA,CAAA,IAAA,CAAK,IAAL,EAAA,EAAU,KAAK,CACb,EAAA,QAAA,EAAA;AAAA,UACC;AAAA,YACE,MAAM,aAAc,CAAA;AAAA,cAClB,EAAI,EAAA,iEAAA;AAAA,cACJ,cAAgB,EAAA;AAAA,aACjB,CAAA;AAAA,YACD,OAAO,aAAc,CAAA;AAAA,cACnB,EAAI,EAAA,4DAAA;AAAA,cACJ,cAAgB,EAAA;AAAA,aACjB,CAAA;AAAA,YACD,IAAM,EAAA,kBAAA;AAAA,YACN,OAAA,EAAS,MAAO,CAAA,OAAA,CAAQ,WAAW,CAAA,CAAE,IAAI,CAAC,CAAC,KAAO,EAAA,KAAK,CAAO,MAAA;AAAA,cAC5D,KAAA;AAAA,cACA;AAAA,aACA,CAAA,CAAA;AAAA,YACF,aAAa,aAAc,CAAA;AAAA,cACzB,EAAI,EAAA,eAAA;AAAA,cACJ,cAAgB,EAAA;AAAA,aACjB,CAAA;AAAA,YACD,IAAM,EAAA,CAAA;AAAA,YACN,IAAM,EAAA;AAAA,WACR;AAAA,UACA;AAAA,YACE,MAAM,aAAc,CAAA;AAAA,cAClB,EAAI,EAAA,oDAAA;AAAA,cACJ,cAAgB,EAAA;AAAA,aACjB,CAAA;AAAA,YACD,OAAO,aAAc,CAAA;AAAA,cACnB,EAAI,EAAA,qDAAA;AAAA,cACJ,cAAgB,EAAA;AAAA,aACjB,CAAA;AAAA,YACD,IAAM,EAAA,cAAA;AAAA,YACN,OAAS,EAAA;AAAA,cACP;AAAA,gBACE,OAAO,aAAc,CAAA;AAAA,kBACnB,EAAI,EAAA,mEAAA;AAAA,kBACJ,cAAgB,EAAA;AAAA,iBACjB,CAAA;AAAA,gBACD,KAAO,EAAA;AAAA,eACT;AAAA,cACA,GAAG,eAAA,CAAgB,GAAI,CAAA,CAAC,KAAW,MAAA;AAAA,gBACjC,KAAO,EAAA,aAAA;AAAA,kBACL;AAAA,oBACE,EAAI,EAAA,4DAAA;AAAA,oBACJ,cAAgB,EAAA;AAAA,mBAClB;AAAA,kBACA;AAAA,oBACE,MAAM,aAAc,CAAA;AAAA,sBAClB,EAAI,EAAA,KAAA;AAAA,sBACJ,cAAA,EAAgB,WAAW,KAAK;AAAA,qBACjC;AAAA;AACH,iBACF;AAAA,gBACA,KAAO,EAAA;AAAA,eACP,CAAA;AAAA,aACJ;AAAA,YACA,aAAa,aAAc,CAAA;AAAA,cACzB,EAAI,EAAA,+BAAA;AAAA,cACJ,cAAgB,EAAA;AAAA,aACjB,CAAA;AAAA,YACD,IAAM,EAAA,CAAA;AAAA,YACN,IAAM,EAAA;AAAA;AACR,SACF,CAAE,GAAI,CAAA,CAAC,EAAE,IAAA,EAAM,GAAG,KAAA,EAChB,qBAAA,GAAA,CAAC,IAAK,CAAA,IAAA,EAAL,EAA2B,GAAA,EAAK,MAAM,SAAU,EAAA,QAAA,EAAS,UAAW,EAAA,SAAA,EACnE,QAAC,kBAAA,GAAA,CAAAA,qBAAA,EAAA,EAAe,GAAG,KAAA,EAAO,CADZ,EAAA,EAAA,KAAA,CAAM,IAEtB,CACD,CACH,EAAA;AAAA,OACF,EAAA;AAAA;AAAA,GACF;AAEJ,CAAA;AAMA,MAAM,kBAAkB,MAAM;AAC5B,EAAM,MAAA,EAAE,aAAc,EAAA,GAAI,OAAQ,EAAA;AAElC,EACE,uBAAA,GAAA;AAAA,IAAC,GAAA;AAAA,IAAA;AAAA,MACC,UAAW,EAAA,UAAA;AAAA,MACX,SAAS,EAAA,IAAA;AAAA,MACT,MAAO,EAAA,cAAA;AAAA,MACP,UAAY,EAAA,CAAA;AAAA,MACZ,aAAe,EAAA,CAAA;AAAA,MACf,WAAa,EAAA,CAAA;AAAA,MACb,YAAc,EAAA,CAAA;AAAA,MAEd,+BAAC,IAAK,EAAA,EAAA,SAAA,EAAU,UAAS,UAAW,EAAA,SAAA,EAAU,KAAK,CACjD,EAAA,QAAA,EAAA;AAAA,wBAAA,GAAA,CAAC,UAAW,EAAA,EAAA,OAAA,EAAQ,OAAQ,EAAA,GAAA,EAAI,MAC7B,QAAc,EAAA,aAAA,CAAA;AAAA,UACb,EAAI,EAAA,gBAAA;AAAA,UACJ,cAAgB,EAAA;AAAA,SACjB,CACH,EAAA,CAAA;AAAA,wBACC,GAAA,CAAA,IAAA,CAAK,IAAL,EAAA,EAAU,KAAK,CACb,EAAA,QAAA,EAAA;AAAA,UACC;AAAA,YACE,OAAO,aAAc,CAAA;AAAA,cACnB,EAAI,EAAA,2BAAA;AAAA,cACJ,cAAgB,EAAA;AAAA,aACjB,CAAA;AAAA,YACD,IAAM,EAAA,WAAA;AAAA,YACN,QAAU,EAAA,IAAA;AAAA,YACV,IAAM,EAAA,CAAA;AAAA,YACN,IAAM,EAAA;AAAA,WACR;AAAA,UACA;AAAA,YACE,OAAO,aAAc,CAAA;AAAA,cACnB,EAAI,EAAA,0BAAA;AAAA,cACJ,cAAgB,EAAA;AAAA,aACjB,CAAA;AAAA,YACD,IAAM,EAAA,UAAA;AAAA,YACN,IAAM,EAAA,CAAA;AAAA,YACN,IAAM,EAAA;AAAA,WACR;AAAA,UACA;AAAA,YACE,OAAO,aAAc,CAAA;AAAA,cACnB,EAAI,EAAA,uBAAA;AAAA,cACJ,cAAgB,EAAA;AAAA,aACjB,CAAA;AAAA,YACD,IAAM,EAAA,OAAA;AAAA,YACN,QAAU,EAAA,IAAA;AAAA,YACV,IAAM,EAAA,CAAA;AAAA,YACN,IAAM,EAAA;AAAA,WACR;AAAA,UACA;AAAA,YACE,OAAO,aAAc,CAAA;AAAA,cACnB,EAAI,EAAA,0BAAA;AAAA,cACJ,cAAgB,EAAA;AAAA,aACjB,CAAA;AAAA,YACD,IAAM,EAAA,UAAA;AAAA,YACN,IAAM,EAAA,CAAA;AAAA,YACN,IAAM,EAAA;AAAA;AACR,SACF,CAAE,GAAI,CAAA,CAAC,EAAE,IAAA,EAAM,GAAG,KAAA,EAChB,qBAAA,GAAA,CAAC,IAAK,CAAA,IAAA,EAAL,EAA2B,GAAA,EAAK,MAAM,SAAU,EAAA,QAAA,EAAS,UAAW,EAAA,SAAA,EACnE,QAAC,kBAAA,GAAA,CAAAA,qBAAA,EAAA,EAAe,GAAG,KAAA,EAAO,CADZ,EAAA,EAAA,KAAA,CAAM,IAEtB,CACD,CACH,EAAA;AAAA,OACF,EAAA;AAAA;AAAA,GACF;AAEJ,CAAA;;;;"}