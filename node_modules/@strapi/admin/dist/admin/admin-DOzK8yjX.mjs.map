{"version":3,"file":"admin-DOzK8yjX.mjs","sources":["../../admin/src/utils/getFetchClient.ts","../../admin/src/utils/baseQuery.ts","../../admin/src/services/api.ts","../../admin/src/utils/urls.ts","../../admin/src/services/admin.ts"],"sourcesContent":["import pipe from 'lodash/fp/pipe';\nimport qs from 'qs';\n\nimport type { ApiError } from '../hooks/useAPIErrorHandler';\n\nconst STORAGE_KEYS = {\n  TOKEN: 'jwtToken',\n  USER: 'userInfo',\n};\n\ntype FetchResponse<TData = any> = {\n  data: TData;\n  status?: number;\n};\n\ntype FetchOptions = {\n  params?: any;\n  signal?: AbortSignal;\n  headers?: Record<string, string>;\n  validateStatus?: ((status: number) => boolean) | null;\n};\n\ntype FetchConfig = {\n  signal?: AbortSignal;\n};\n\ninterface ErrorResponse {\n  data: {\n    data?: any;\n    error: ApiError & { status?: number };\n  };\n}\n\nclass FetchError extends Error {\n  public name: string;\n  public message: string;\n  public response?: ErrorResponse;\n  public code?: number;\n  public status?: number;\n\n  constructor(message: string, response?: ErrorResponse) {\n    super(message);\n    this.name = 'FetchError';\n    this.message = message;\n    this.response = response;\n    this.code = response?.data?.error?.status;\n    this.status = response?.data?.error?.status;\n\n    // Ensure correct stack trace in error object\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, FetchError);\n    }\n  }\n}\n\nconst isFetchError = (error: unknown): error is FetchError => {\n  return error instanceof FetchError;\n};\n\nconst getToken = () =>\n  JSON.parse(\n    localStorage.getItem(STORAGE_KEYS.TOKEN) ?? sessionStorage.getItem(STORAGE_KEYS.TOKEN) ?? '\"\"'\n  );\n\ntype FetchClient = {\n  get: <TData = any>(url: string, config?: FetchOptions) => Promise<FetchResponse<TData>>;\n  put: <TData = any, TSend = any>(\n    url: string,\n    data?: TSend,\n    config?: FetchOptions\n  ) => Promise<FetchResponse<TData>>;\n  post: <TData = any, TSend = any>(\n    url: string,\n    data?: TSend,\n    config?: FetchOptions\n  ) => Promise<FetchResponse<TData>>;\n  del: <TData = any>(url: string, config?: FetchOptions) => Promise<FetchResponse<TData>>;\n};\n\n/**\n * @public\n * @param {FetchConfig} [defaultOptions={}] - Fetch Configs.\n * @returns {FetchClient} A fetch client object with methods for making HTTP requests.\n * @description This is an abstraction around the native fetch exposed by a function. It provides a simple interface to handle API calls\n * to the Strapi backend.\n * @example\n * ```tsx\n * import { getFetchClient } from '@strapi/admin/admin';\n *\n * const myFunct = () => {\n *   const { get } = getFetchClient();\n *   const requestURL = \"/some-endpoint\";\n *\n *   const { data } = await get(requestURL);\n *\n *   return data;\n * };\n * ```\n */\nconst getFetchClient = (defaultOptions: FetchConfig = {}): FetchClient => {\n  const backendURL = window.strapi.backendURL;\n  const defaultHeader = {\n    Accept: 'application/json',\n    'Content-Type': 'application/json',\n    Authorization: `Bearer ${getToken()}`,\n  };\n\n  const isFormDataRequest = (body: unknown) => body instanceof FormData;\n  const addPrependingSlash = (url: string) => (url.charAt(0) !== '/' ? `/${url}` : url);\n\n  // This regular expression matches a string that starts with either \"http://\" or \"https://\" or any other protocol name in lower case letters, followed by \"://\" and ends with anything else\n  const hasProtocol = (url: string) => new RegExp('^(?:[a-z+]+:)?//', 'i').test(url);\n\n  // Check if the url has a prepending slash, if not add a slash\n  const normalizeUrl = (url: string) => (hasProtocol(url) ? url : addPrependingSlash(url));\n\n  // Add a response interceptor to return the response\n  const responseInterceptor = async <TData = any>(\n    response: Response,\n    validateStatus?: FetchOptions['validateStatus']\n  ): Promise<FetchResponse<TData>> => {\n    try {\n      const result = await response.json();\n\n      /**\n       * validateStatus allows us to customize when a response should throw an error\n       * In native Fetch API, a response is considered \"not ok\"\n       * when the status code falls in the 200 to 299 (inclusive) range\n       */\n      if (!response.ok && result.error && !validateStatus?.(response.status)) {\n        throw new FetchError(result.error.message, { data: result });\n      }\n\n      if (!response.ok && !validateStatus?.(response.status)) {\n        throw new FetchError('Unknown Server Error');\n      }\n\n      return { data: result };\n    } catch (error) {\n      if (error instanceof SyntaxError && response.ok) {\n        // Making sure that a SyntaxError doesn't throw if it's successful\n        return { data: [], status: response.status } as FetchResponse<any>;\n      } else {\n        throw error;\n      }\n    }\n  };\n\n  const paramsSerializer =\n    <Param = unknown>(params?: Param) =>\n    (url: string) => {\n      if (params) {\n        if (typeof params === 'string') {\n          return `${url}?${params}`;\n        }\n\n        /**\n         * TODO V6: Encoding should be enabled in this step\n         * So the rest of the app doesn't have to worry about it,\n         * It's considered a breaking change because it impacts any API request, including the user's custom code\n         */\n        const serializedParams = qs.stringify(params, { encode: false });\n        return `${url}?${serializedParams}`;\n      }\n      return url;\n    };\n\n  const addBaseUrl = (url: Parameters<typeof fetch>[0]) => {\n    return `${backendURL}${url}`;\n  };\n\n  /**\n   * We use the factory method because the options\n   * are unique to the individual request\n   */\n  const makeCreateRequestUrl = (options?: FetchOptions) =>\n    pipe(normalizeUrl, addBaseUrl, paramsSerializer(options?.params));\n\n  const fetchClient: FetchClient = {\n    get: async <TData>(url: string, options?: FetchOptions): Promise<FetchResponse<TData>> => {\n      const headers = new Headers({\n        ...defaultHeader,\n        ...options?.headers,\n      });\n      /**\n       * this applies all our transformations to the URL\n       * - normalizing (making sure it has the correct slash)\n       * - appending our BaseURL which comes from the window.strapi object\n       * - serializing our params with QS\n       */\n      const createRequestUrl = makeCreateRequestUrl(options);\n      const response = await fetch(createRequestUrl(url), {\n        signal: options?.signal ?? defaultOptions.signal,\n        method: 'GET',\n        headers,\n      });\n\n      return responseInterceptor<TData>(response, options?.validateStatus);\n    },\n    post: async <TData, TSend = any>(\n      url: string,\n      data?: TSend,\n      options?: FetchOptions\n    ): Promise<FetchResponse<TData>> => {\n      const headers = new Headers({\n        ...defaultHeader,\n        ...options?.headers,\n      });\n\n      const createRequestUrl = makeCreateRequestUrl(options);\n\n      /**\n       * we have to remove the Content-Type value if it was a formData request\n       * the browser will automatically set the header value\n       */\n      if (isFormDataRequest(data)) {\n        headers.delete('Content-Type');\n      }\n\n      const response = await fetch(createRequestUrl(url), {\n        signal: options?.signal ?? defaultOptions.signal,\n        method: 'POST',\n        headers,\n        body: isFormDataRequest(data) ? (data as FormData) : JSON.stringify(data),\n      });\n      return responseInterceptor<TData>(response, options?.validateStatus);\n    },\n    put: async <TData, TSend = any>(\n      url: string,\n      data?: TSend,\n      options?: FetchOptions\n    ): Promise<FetchResponse<TData>> => {\n      const headers = new Headers({\n        ...defaultHeader,\n        ...options?.headers,\n      });\n\n      const createRequestUrl = makeCreateRequestUrl(options);\n\n      /**\n       * we have to remove the Content-Type value if it was a formData request\n       * the browser will automatically set the header value\n       */\n      if (isFormDataRequest(data)) {\n        headers.delete('Content-Type');\n      }\n\n      const response = await fetch(createRequestUrl(url), {\n        signal: options?.signal ?? defaultOptions.signal,\n        method: 'PUT',\n        headers,\n        body: isFormDataRequest(data) ? (data as FormData) : JSON.stringify(data),\n      });\n\n      return responseInterceptor<TData>(response, options?.validateStatus);\n    },\n    del: async <TData>(url: string, options?: FetchOptions): Promise<FetchResponse<TData>> => {\n      const headers = new Headers({\n        ...defaultHeader,\n        ...options?.headers,\n      });\n\n      const createRequestUrl = makeCreateRequestUrl(options);\n      const response = await fetch(createRequestUrl(url), {\n        signal: options?.signal ?? defaultOptions.signal,\n        method: 'DELETE',\n        headers,\n      });\n      return responseInterceptor<TData>(response, options?.validateStatus);\n    },\n  };\n\n  return fetchClient;\n};\n\nexport { getFetchClient, isFetchError, FetchError };\nexport type { FetchOptions, FetchResponse, FetchConfig, FetchClient, ErrorResponse };\n","import { SerializedError } from '@reduxjs/toolkit';\nimport { BaseQueryFn } from '@reduxjs/toolkit/query';\n\nimport { getFetchClient, isFetchError, type FetchOptions } from '../utils/getFetchClient';\n\nimport type { ApiError } from '../hooks/useAPIErrorHandler';\n\ninterface QueryArguments {\n  url: string;\n  method?: 'GET' | 'POST' | 'DELETE' | 'PUT';\n  data?: unknown;\n  config?: FetchOptions;\n}\n\ninterface UnknownApiError {\n  name: 'UnknownError';\n  message: string;\n  details?: unknown;\n  status?: number;\n}\n\ntype BaseQueryError = ApiError | UnknownApiError;\n\nconst fetchBaseQuery =\n  (): BaseQueryFn<string | QueryArguments, unknown, BaseQueryError> =>\n  async (query, { signal }) => {\n    try {\n      const { get, post, del, put } = getFetchClient();\n\n      if (typeof query === 'string') {\n        const result = await get(query, { signal });\n        return { data: result.data };\n      } else {\n        const { url, method = 'GET', data, config } = query;\n\n        if (method === 'POST') {\n          const result = await post(url, data, {\n            ...config,\n            signal,\n          });\n          return { data: result.data };\n        }\n\n        if (method === 'DELETE') {\n          const result = await del(url, {\n            ...config,\n            signal,\n          });\n          return { data: result.data };\n        }\n\n        if (method === 'PUT') {\n          const result = await put(url, data, {\n            ...config,\n            signal,\n          });\n          return { data: result.data };\n        }\n\n        /**\n         * Default is GET.\n         */\n        const result = await get(url, {\n          ...config,\n          signal,\n        });\n        return { data: result.data };\n      }\n    } catch (err) {\n      // Handle error of type FetchError\n\n      if (isFetchError(err)) {\n        if (\n          typeof err.response?.data === 'object' &&\n          err.response?.data !== null &&\n          'error' in err.response?.data\n        ) {\n          /**\n           * This will most likely be ApiError\n           */\n          return { data: undefined, error: err.response?.data.error as any };\n        } else {\n          return {\n            data: undefined,\n            error: {\n              name: 'UnknownError',\n              message: err.message,\n              details: err.response,\n              status: err.status,\n            } as UnknownApiError,\n          };\n        }\n      }\n\n      const error = err as Error;\n      return {\n        data: undefined,\n        error: {\n          name: error.name,\n          message: error.message,\n          stack: error.stack,\n        } satisfies SerializedError,\n      };\n    }\n  };\n\nconst isBaseQueryError = (error: BaseQueryError | SerializedError): error is BaseQueryError => {\n  return error.name !== undefined;\n};\n\nexport { fetchBaseQuery, isBaseQueryError };\nexport type { BaseQueryError, UnknownApiError, QueryArguments };\n","import { createApi } from '@reduxjs/toolkit/query/react';\n\nimport { fetchBaseQuery } from '../utils/baseQuery';\n\n/**\n * @public\n * @description This is the redux toolkit api for the admin panel, users\n * should use a combination of `enhanceEndpoints` to add their TagTypes\n * to utilise in their `injectEndpoints` construction for automatic cache\n * re-validation. We specifically do not store any tagTypes by default leaving\n * the API surface as small as possible. None of the data-fetching looks for the\n * StrapiApp are stored here either.\n */\nconst adminApi = createApi({\n  reducerPath: 'adminApi',\n  baseQuery: fetchBaseQuery(),\n  tagTypes: [],\n  endpoints: () => ({}),\n});\n\nexport { adminApi };\n","import trimEnd from 'lodash/trimEnd';\n\nconst prefixFileUrlWithBackendUrl = (fileURL?: string): string | undefined => {\n  return !!fileURL && fileURL.startsWith('/') ? `${window.strapi.backendURL}${fileURL}` : fileURL;\n};\n\n/**\n * @description Creates an absolute URL, if there is no URL or it\n * is relative, we use the `window.location.origin` as a fallback.\n * IF it's an absolute URL, we return it as is.\n */\nconst createAbsoluteUrl = (url?: string): string => {\n  if (!url) {\n    return window.location.origin;\n  }\n  if (url.startsWith('/')) {\n    /**\n     * This will also manage protocol relative URLs which is fine because\n     * as we can see from the test, we still get the expected result.\n     */\n    return trimEnd(new URL(url, window.location.origin).toString(), '/');\n  } else {\n    return url;\n  }\n};\n\nexport { createAbsoluteUrl, prefixFileUrlWithBackendUrl };\n","import {\n  type TelemetryProperties,\n  type Init,\n  type Information,\n  type GetProjectSettings,\n  type UpdateProjectSettings,\n  type Plugins,\n  type GetLicenseLimitInformation,\n} from '../../../shared/contracts/admin';\nimport { prefixFileUrlWithBackendUrl } from '../utils/urls';\n\nimport { adminApi } from './api';\n\ninterface ConfigurationLogo {\n  custom?: {\n    name?: string;\n    url?: string;\n  };\n  default: string;\n}\n\nconst admin = adminApi\n  .enhanceEndpoints({\n    addTagTypes: ['ProjectSettings', 'LicenseLimits'],\n  })\n  .injectEndpoints({\n    endpoints: (builder) => ({\n      init: builder.query<Init.Response['data'], void>({\n        query: () => ({\n          url: '/admin/init',\n          method: 'GET',\n        }),\n        transformResponse(res: Init.Response) {\n          return res.data;\n        },\n      }),\n      information: builder.query<Information.Response['data'], void>({\n        query: () => ({\n          url: '/admin/information',\n          method: 'GET',\n        }),\n        transformResponse(res: Information.Response) {\n          return res.data;\n        },\n      }),\n      telemetryProperties: builder.query<TelemetryProperties.Response['data'], void>({\n        query: () => ({\n          url: '/admin/telemetry-properties',\n          method: 'GET',\n          config: {\n            validateStatus: (status) => status < 500,\n          },\n        }),\n        transformResponse(res: TelemetryProperties.Response) {\n          return res.data;\n        },\n      }),\n      projectSettings: builder.query<\n        { authLogo?: ConfigurationLogo['custom']; menuLogo?: ConfigurationLogo['custom'] },\n        void\n      >({\n        query: () => ({\n          url: '/admin/project-settings',\n          method: 'GET',\n        }),\n        providesTags: ['ProjectSettings'],\n        transformResponse(data: GetProjectSettings.Response) {\n          return {\n            authLogo: data.authLogo\n              ? {\n                  name: data.authLogo.name,\n                  url: prefixFileUrlWithBackendUrl(data.authLogo.url),\n                }\n              : undefined,\n            menuLogo: data.menuLogo\n              ? {\n                  name: data.menuLogo.name,\n                  url: prefixFileUrlWithBackendUrl(data.menuLogo.url),\n                }\n              : undefined,\n          };\n        },\n      }),\n      updateProjectSettings: builder.mutation<UpdateProjectSettings.Response, FormData>({\n        query: (data) => ({\n          url: '/admin/project-settings',\n          method: 'POST',\n          data,\n          config: {\n            headers: {\n              'Content-Type': 'multipart/form-data',\n            },\n          },\n        }),\n        invalidatesTags: ['ProjectSettings'],\n      }),\n      getPlugins: builder.query<Plugins.Response, void>({\n        query: () => ({\n          url: '/admin/plugins',\n          method: 'GET',\n        }),\n      }),\n      getLicenseLimits: builder.query<GetLicenseLimitInformation.Response, void>({\n        query: () => ({\n          url: '/admin/license-limit-information',\n          method: 'GET',\n        }),\n        providesTags: ['LicenseLimits'],\n      }),\n    }),\n    overrideExisting: false,\n  });\n\nconst {\n  useInitQuery,\n  useTelemetryPropertiesQuery,\n  useInformationQuery,\n  useProjectSettingsQuery,\n  useUpdateProjectSettingsMutation,\n  useGetPluginsQuery,\n  useGetLicenseLimitsQuery,\n} = admin;\n\nexport {\n  useInitQuery,\n  useTelemetryPropertiesQuery,\n  useInformationQuery,\n  useProjectSettingsQuery,\n  useUpdateProjectSettingsMutation,\n  useGetPluginsQuery,\n  useGetLicenseLimitsQuery,\n};\n\nexport type { ConfigurationLogo };\n"],"names":["qs","result"],"mappings":"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"}