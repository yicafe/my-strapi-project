{"version":3,"file":"SelectRoles-DIyUH00-.js","sources":["../../admin/src/pages/Settings/pages/Users/components/MagicLinkWrapper.tsx","../../admin/src/pages/Settings/pages/Users/components/MagicLinkCE.tsx","../../admin/src/pages/Settings/pages/Users/components/SelectRoles.tsx"],"sourcesContent":["import { IconButton } from '@strapi/design-system';\nimport { Duplicate } from '@strapi/icons';\nimport { useIntl } from 'react-intl';\n\nimport { ContentBox } from '../../../../../components/ContentBox';\nimport { useNotification } from '../../../../../features/Notifications';\nimport { useClipboard } from '../../../../../hooks/useClipboard';\n\ninterface MagicLinkWrapperProps {\n  children: string;\n  target: string;\n}\n\nconst MagicLinkWrapper = ({ children, target }: MagicLinkWrapperProps) => {\n  const { toggleNotification } = useNotification();\n  const { formatMessage } = useIntl();\n  const { copy } = useClipboard();\n\n  const copyLabel = formatMessage({\n    id: 'app.component.CopyToClipboard.label',\n    defaultMessage: 'Copy to clipboard',\n  });\n\n  const handleClick = async (e: React.MouseEvent<HTMLButtonElement>) => {\n    e.preventDefault();\n\n    const didCopy = await copy(target);\n\n    if (didCopy) {\n      toggleNotification({\n        type: 'info',\n        message: formatMessage({ id: 'notification.link-copied' }),\n      });\n    }\n  };\n\n  return (\n    <ContentBox\n      endAction={\n        <IconButton label={copyLabel} variant=\"ghost\" onClick={handleClick}>\n          <Duplicate />\n        </IconButton>\n      }\n      title={target}\n      titleEllipsis\n      subtitle={children}\n      icon={<span style={{ fontSize: 32 }}>✉️</span>}\n      iconBackground=\"neutral100\"\n    />\n  );\n};\n\nexport { MagicLinkWrapper };\nexport type { MagicLinkWrapperProps };\n","import { useIntl } from 'react-intl';\n\nimport { getBasename } from '../../../../../core/utils/basename';\n\nimport { MagicLinkWrapper } from './MagicLinkWrapper';\n\ninterface MagicLinkCEProps {\n  registrationToken: string;\n}\n\nconst MagicLinkCE = ({ registrationToken }: MagicLinkCEProps) => {\n  const { formatMessage } = useIntl();\n  const target = `${\n    window.location.origin\n  }${getBasename()}/auth/register?registrationToken=${registrationToken}`;\n\n  return (\n    <MagicLinkWrapper target={target}>\n      {formatMessage({\n        id: 'app.components.Users.MagicLink.connect',\n        defaultMessage: 'Copy and share this link to give access to this user',\n      })}\n    </MagicLinkWrapper>\n  );\n};\n\nexport { MagicLinkCE };\nexport type { MagicLinkCEProps };\n","import { Field, MultiSelect, MultiSelectOption } from '@strapi/design-system';\nimport { Loader as LoadingIcon } from '@strapi/icons';\nimport { useIntl } from 'react-intl';\nimport { styled, keyframes } from 'styled-components';\n\nimport { useField } from '../../../../../components/Form';\nimport { useAdminRoles } from '../../../../../hooks/useAdminRoles';\n\ninterface SelectRolesProps {\n  disabled?: boolean;\n}\n\nconst SelectRoles = ({ disabled }: SelectRolesProps) => {\n  const { isLoading, roles } = useAdminRoles();\n\n  const { formatMessage } = useIntl();\n  const { value = [], onChange, error } = useField<string[]>('roles');\n\n  return (\n    <Field.Root\n      error={error}\n      hint={formatMessage({\n        id: 'app.components.Users.ModalCreateBody.block-title.roles.description',\n        defaultMessage: 'A user can have one or several roles',\n      })}\n      name=\"roles\"\n      required\n    >\n      <Field.Label>\n        {formatMessage({\n          id: 'app.components.Users.ModalCreateBody.block-title.roles',\n          defaultMessage: \"User's roles\",\n        })}\n      </Field.Label>\n      <MultiSelect\n        disabled={disabled}\n        onChange={(v) => {\n          onChange('roles', v);\n        }}\n        placeholder={formatMessage({\n          id: 'app.components.Select.placeholder',\n          defaultMessage: 'Select',\n        })}\n        startIcon={isLoading ? <Loader /> : undefined}\n        value={value.map((v) => v.toString())}\n        withTags\n      >\n        {roles.map((role) => {\n          return (\n            <MultiSelectOption key={role.id} value={role.id.toString()}>\n              {formatMessage({\n                id: `global.${role.code}`,\n                defaultMessage: role.name,\n              })}\n            </MultiSelectOption>\n          );\n        })}\n      </MultiSelect>\n      <Field.Error />\n      <Field.Hint />\n    </Field.Root>\n  );\n};\n\nconst rotation = keyframes`\n  from {\n    transform: rotate(0deg);\n  }\n  to {\n    transform: rotate(359deg);\n  }\n`;\n\nconst LoadingWrapper = styled.div`\n  animation: ${rotation} 2s infinite linear;\n`;\n\nconst Loader = () => (\n  <LoadingWrapper>\n    <LoadingIcon />\n  </LoadingWrapper>\n);\n\nexport { SelectRoles };\n"],"names":["useNotification","useIntl","useClipboard","jsx","ContentBox","IconButton","Duplicate","getBasename","useAdminRoles","useField","jsxs","Field","MultiSelect","MultiSelectOption","keyframes","styled","LoadingIcon"],"mappings":"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"}