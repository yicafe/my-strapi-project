{"version":3,"file":"ApplicationInfoPage-Cx9Z4tfk.js","sources":["../../admin/src/pages/Settings/pages/ApplicationInfo/utils/constants.ts","../../admin/src/pages/Settings/pages/ApplicationInfo/utils/files.ts","../../admin/src/pages/Settings/pages/ApplicationInfo/components/LogoInput.tsx","../../admin/src/pages/Settings/pages/ApplicationInfo/ApplicationInfoPage.tsx"],"sourcesContent":["export const DIMENSION = 750;\nexport const SIZE = 100;\nexport const ACCEPTED_FORMAT = ['image/jpeg', 'image/png', 'image/svg+xml'];\n","import { ACCEPTED_FORMAT, DIMENSION, SIZE } from './constants';\n\nimport type { MessageDescriptor } from 'react-intl';\n\nconst FILE_FORMAT_ERROR_MESSAGE = {\n  id: 'Settings.application.customization.modal.upload.error-format',\n  defaultMessage: 'Wrong format uploaded (accepted formats only: jpeg, jpg, png, svg).',\n};\n\nconst FILE_SIZING_ERROR_MESSAGE = {\n  id: 'Settings.application.customization.modal.upload.error-size',\n  defaultMessage:\n    'The file uploaded is too large (max dimension: {dimension}x{dimension}, max file size: {size}KB)',\n};\n\ninterface ImageDimensions {\n  height: number;\n  width: number;\n}\n\ninterface ImageAsset extends ImageDimensions {\n  ext: string | undefined;\n  size: number;\n  name: string;\n  url: string;\n  rawFile: File;\n}\n\nconst parseFileMetadatas = async (file: File): Promise<ImageAsset> => {\n  const isFormatAuthorized = ACCEPTED_FORMAT.includes(file.type);\n\n  if (!isFormatAuthorized) {\n    throw new ParsingFileError('File format', FILE_FORMAT_ERROR_MESSAGE);\n  }\n\n  const fileDimensions = await new Promise<ImageDimensions>((resolve) => {\n    const reader = new FileReader();\n    reader.onload = () => {\n      const img = new Image();\n      img.onload = () => {\n        resolve({ width: img.width, height: img.height });\n      };\n      img.src = reader.result as string;\n    };\n    reader.readAsDataURL(file);\n  });\n\n  const areDimensionsAuthorized =\n    fileDimensions.width <= DIMENSION && fileDimensions.height <= DIMENSION;\n\n  if (!areDimensionsAuthorized) {\n    throw new ParsingFileError('File sizing', FILE_SIZING_ERROR_MESSAGE);\n  }\n\n  const asset = {\n    ext: file.name.split('.').pop(),\n    size: file.size / 1000,\n    name: file.name,\n    url: URL.createObjectURL(file),\n    rawFile: file,\n    width: fileDimensions.width,\n    height: fileDimensions.height,\n  };\n\n  const isSizeAuthorized = asset.size <= SIZE;\n\n  if (!isSizeAuthorized) {\n    throw new ParsingFileError('File sizing', FILE_SIZING_ERROR_MESSAGE);\n  }\n\n  return asset;\n};\n\nclass ParsingFileError extends Error {\n  displayMessage: MessageDescriptor;\n\n  constructor(message: string, displayMessage: MessageDescriptor, options?: ErrorOptions) {\n    super(message, options);\n    this.displayMessage = displayMessage;\n  }\n}\n\nexport { parseFileMetadatas, ParsingFileError };\nexport type { ImageAsset };\n","import * as React from 'react';\n\nimport { createContext } from '@radix-ui/react-context';\nimport {\n  Box,\n  Button,\n  ButtonProps,\n  Card,\n  CardAsset,\n  CardBadge,\n  CardBody,\n  CardContent,\n  CardHeader,\n  CardSubtitle,\n  CardTitle,\n  CarouselActions,\n  CarouselInput,\n  CarouselInputProps,\n  CarouselSlide,\n  Field,\n  Flex,\n  IconButton,\n  Modal,\n  Tabs,\n  TextInput,\n  TextInputProps,\n  Typography,\n} from '@strapi/design-system';\nimport { PlusCircle, Plus, ArrowClockwise } from '@strapi/icons';\nimport axios, { AxiosError } from 'axios';\nimport { useIntl } from 'react-intl';\nimport { styled } from 'styled-components';\n\nimport { ConfigurationContextValue } from '../../../../../features/Configuration';\nimport { ACCEPTED_FORMAT, DIMENSION, SIZE } from '../utils/constants';\nimport { ImageAsset, ParsingFileError, parseFileMetadatas } from '../utils/files';\n\n/* -------------------------------------------------------------------------------------------------\n * LogoInputContext\n * -----------------------------------------------------------------------------------------------*/\n\ninterface LogoInputContextValue {\n  localImage: ImageAsset | undefined;\n  goToStep: (step: Step) => void;\n  onClose: () => void;\n  setLocalImage: (asset: ImageAsset | undefined) => void;\n}\n\nconst [LogoInputContextProvider, useLogoInputContext] =\n  createContext<LogoInputContextValue>('LogoInput');\n\n/* -------------------------------------------------------------------------------------------------\n * LogoInput\n * -----------------------------------------------------------------------------------------------*/\n\ninterface LogoInputProps\n  extends Pick<PendingLogoDialogProps, 'onChangeLogo'>,\n    Pick<CarouselInputProps, 'label' | 'hint'> {\n  canUpdate: boolean;\n  customLogo?: ConfigurationContextValue['logos']['auth']['custom'];\n  defaultLogo: string;\n}\n\ntype Step = 'pending' | 'upload' | undefined;\n\nconst LogoInput = ({\n  canUpdate,\n  customLogo,\n  defaultLogo,\n  hint,\n  label,\n  onChangeLogo,\n}: LogoInputProps) => {\n  const [localImage, setLocalImage] = React.useState<ImageAsset | undefined>();\n  const [currentStep, setCurrentStep] = React.useState<Step>();\n  const { formatMessage } = useIntl();\n\n  const handleClose = () => {\n    setLocalImage(undefined);\n    setCurrentStep(undefined);\n  };\n\n  return (\n    <Modal.Root\n      open={!!currentStep}\n      onOpenChange={(state) => {\n        if (state === false) {\n          handleClose();\n        }\n      }}\n    >\n      <LogoInputContextProvider\n        setLocalImage={setLocalImage}\n        localImage={localImage}\n        goToStep={setCurrentStep}\n        onClose={handleClose}\n      >\n        <CarouselInput\n          label={label}\n          selectedSlide={0}\n          hint={hint}\n          // Carousel is used here for a single media,\n          // we don't need previous and next labels but these props are required\n          previousLabel=\"\"\n          nextLabel=\"\"\n          onNext={() => {}}\n          onPrevious={() => {}}\n          secondaryLabel={customLogo?.name || 'logo.png'}\n          actions={\n            <CarouselActions>\n              <Modal.Trigger>\n                <IconButton\n                  disabled={!canUpdate}\n                  onClick={() => setCurrentStep('upload')}\n                  label={formatMessage({\n                    id: 'Settings.application.customization.carousel.change-action',\n                    defaultMessage: 'Change logo',\n                  })}\n                >\n                  <Plus />\n                </IconButton>\n              </Modal.Trigger>\n              {customLogo?.url && (\n                <IconButton\n                  disabled={!canUpdate}\n                  onClick={() => onChangeLogo(null)}\n                  label={formatMessage({\n                    id: 'Settings.application.customization.carousel.reset-action',\n                    defaultMessage: 'Reset logo',\n                  })}\n                >\n                  <ArrowClockwise />\n                </IconButton>\n              )}\n            </CarouselActions>\n          }\n        >\n          <CarouselSlide\n            label={formatMessage({\n              id: 'Settings.application.customization.carousel-slide.label',\n              defaultMessage: 'Logo slide',\n            })}\n          >\n            <Box\n              maxHeight=\"40%\"\n              maxWidth=\"40%\"\n              tag=\"img\"\n              src={customLogo?.url || defaultLogo}\n              alt={formatMessage({\n                id: 'Settings.application.customization.carousel.title',\n                defaultMessage: 'Logo',\n              })}\n            />\n          </CarouselSlide>\n        </CarouselInput>\n        <Modal.Content>\n          <Modal.Header>\n            <Modal.Title>\n              {formatMessage(\n                currentStep === 'upload'\n                  ? {\n                      id: 'Settings.application.customization.modal.upload',\n                      defaultMessage: 'Upload logo',\n                    }\n                  : {\n                      id: 'Settings.application.customization.modal.pending',\n                      defaultMessage: 'Pending logo',\n                    }\n              )}\n            </Modal.Title>\n          </Modal.Header>\n          {currentStep === 'upload' ? (\n            <AddLogoDialog />\n          ) : (\n            <PendingLogoDialog onChangeLogo={onChangeLogo} />\n          )}\n        </Modal.Content>\n      </LogoInputContextProvider>\n    </Modal.Root>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * AddLogoDialog\n * -----------------------------------------------------------------------------------------------*/\n\nconst AddLogoDialog = () => {\n  const { formatMessage } = useIntl();\n\n  return (\n    <Tabs.Root variant=\"simple\" defaultValue=\"computer\">\n      <Box paddingLeft={8} paddingRight={8}>\n        <Tabs.List\n          aria-label={formatMessage({\n            id: 'Settings.application.customization.modal.tab.label',\n            defaultMessage: 'How do you want to upload your assets?',\n          })}\n        >\n          <Tabs.Trigger value=\"computer\">\n            {formatMessage({\n              id: 'Settings.application.customization.modal.upload.from-computer',\n              defaultMessage: 'From computer',\n            })}\n          </Tabs.Trigger>\n          <Tabs.Trigger value=\"url\">\n            {formatMessage({\n              id: 'Settings.application.customization.modal.upload.from-url',\n              defaultMessage: 'From url',\n            })}\n          </Tabs.Trigger>\n        </Tabs.List>\n      </Box>\n      <Tabs.Content value=\"computer\">\n        <ComputerForm />\n      </Tabs.Content>\n      <Tabs.Content value=\"url\">\n        <URLForm />\n      </Tabs.Content>\n    </Tabs.Root>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * URLForm\n * -----------------------------------------------------------------------------------------------*/\n\nconst URLForm = () => {\n  const { formatMessage } = useIntl();\n  const [logoUrl, setLogoUrl] = React.useState('');\n  const [error, setError] = React.useState<string>();\n  const { setLocalImage, goToStep, onClose } = useLogoInputContext('URLForm');\n\n  const handleChange: TextInputProps['onChange'] = (e) => {\n    setLogoUrl(e.target.value);\n  };\n\n  const handleSubmit: React.FormEventHandler<HTMLFormElement> = async (event) => {\n    event.preventDefault();\n\n    const data = new FormData(event.target as HTMLFormElement);\n\n    const url = data.get('logo-url');\n\n    if (!url) {\n      return;\n    }\n\n    try {\n      const res = await axios.get(url.toString(), { responseType: 'blob', timeout: 8000 });\n\n      const file = new File([res.data], res.config.url ?? '', {\n        type: res.headers['content-type'],\n      });\n\n      const asset = await parseFileMetadatas(file);\n\n      setLocalImage(asset);\n      goToStep('pending');\n    } catch (err) {\n      if (err instanceof AxiosError) {\n        setError(\n          formatMessage({\n            id: 'Settings.application.customization.modal.upload.error-network',\n            defaultMessage: 'Network error',\n          })\n        );\n      } else if (err instanceof ParsingFileError) {\n        setError(formatMessage(err.displayMessage, { size: SIZE, dimension: DIMENSION }));\n      } else {\n        throw err;\n      }\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <Box paddingLeft={8} paddingRight={8} paddingTop={6} paddingBottom={6}>\n        <Field.Root error={error} name=\"logo-url\">\n          <Field.Label>\n            {formatMessage({\n              id: 'Settings.application.customization.modal.upload.from-url.input-label',\n              defaultMessage: 'URL',\n            })}\n          </Field.Label>\n          <TextInput onChange={handleChange} value={logoUrl} />\n          <Field.Error />\n        </Field.Root>\n      </Box>\n      <Modal.Footer>\n        <Button onClick={onClose} variant=\"tertiary\">\n          {formatMessage({ id: 'app.components.Button.cancel', defaultMessage: 'Cancel' })}\n        </Button>\n        <Button type=\"submit\">\n          {formatMessage({\n            id: 'Settings.application.customization.modal.upload.next',\n            defaultMessage: 'Next',\n          })}\n        </Button>\n      </Modal.Footer>\n    </form>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * ComputerForm\n * -----------------------------------------------------------------------------------------------*/\n\nconst ComputerForm = () => {\n  const { formatMessage } = useIntl();\n  const [dragOver, setDragOver] = React.useState(false);\n  const [fileError, setFileError] = React.useState<string>();\n  const inputRef = React.useRef<HTMLInputElement>(null!);\n  const id = React.useId();\n\n  const { setLocalImage, goToStep, onClose } = useLogoInputContext('ComputerForm');\n\n  const handleDragEnter = () => {\n    setDragOver(true);\n  };\n  const handleDragLeave = () => {\n    setDragOver(false);\n  };\n\n  const handleClick: ButtonProps['onClick'] = (e) => {\n    e.preventDefault();\n    inputRef.current.click();\n  };\n\n  const handleChange = async () => {\n    handleDragLeave();\n\n    if (!inputRef.current.files) {\n      return;\n    }\n\n    const [file] = inputRef.current.files;\n\n    try {\n      const asset = await parseFileMetadatas(file);\n      setLocalImage(asset);\n      goToStep('pending');\n    } catch (err) {\n      if (err instanceof ParsingFileError) {\n        setFileError(formatMessage(err.displayMessage, { size: SIZE, dimension: DIMENSION }));\n        inputRef.current.focus();\n      } else {\n        throw err;\n      }\n    }\n  };\n\n  return (\n    <>\n      <form>\n        <Box paddingLeft={8} paddingRight={8} paddingTop={6} paddingBottom={6}>\n          <Field.Root name={id} error={fileError}>\n            <Flex direction=\"column\" alignItems=\"stretch\" gap={2}>\n              <Flex\n                paddingTop={9}\n                paddingBottom={7}\n                hasRadius\n                justifyContent=\"center\"\n                direction=\"column\"\n                background={dragOver ? 'primary100' : 'neutral100'}\n                borderColor={dragOver ? 'primary500' : fileError ? 'danger600' : 'neutral300'}\n                borderStyle=\"dashed\"\n                borderWidth=\"1px\"\n                position=\"relative\"\n                onDragEnter={handleDragEnter}\n                onDragLeave={handleDragLeave}\n              >\n                <PlusCircle fill=\"primary600\" width=\"6rem\" height=\"6rem\" aria-hidden />\n                <Box paddingTop={3} paddingBottom={5}>\n                  <Typography variant=\"delta\" tag=\"label\" htmlFor={id}>\n                    {formatMessage({\n                      id: 'Settings.application.customization.modal.upload.drag-drop',\n                      defaultMessage: 'Drag and Drop here or',\n                    })}\n                  </Typography>\n                </Box>\n                <Box position=\"relative\">\n                  <FileInput\n                    accept={ACCEPTED_FORMAT.join(', ')}\n                    type=\"file\"\n                    name=\"files\"\n                    tabIndex={-1}\n                    onChange={handleChange}\n                    ref={inputRef}\n                    id={id}\n                  />\n                </Box>\n                <Button type=\"button\" onClick={handleClick}>\n                  {formatMessage({\n                    id: 'Settings.application.customization.modal.upload.cta.browse',\n                    defaultMessage: 'Browse files',\n                  })}\n                </Button>\n                <Box paddingTop={6}>\n                  <Typography variant=\"pi\" textColor=\"neutral600\">\n                    {formatMessage(\n                      {\n                        id: 'Settings.application.customization.modal.upload.file-validation',\n                        defaultMessage:\n                          'Max dimension: {dimension}x{dimension}, Max size: {size}KB',\n                      },\n                      { size: SIZE, dimension: DIMENSION }\n                    )}\n                  </Typography>\n                </Box>\n              </Flex>\n              <Field.Error />\n            </Flex>\n          </Field.Root>\n        </Box>\n      </form>\n      <Modal.Footer>\n        <Button onClick={onClose} variant=\"tertiary\">\n          {formatMessage({ id: 'app.components.Button.cancel', defaultMessage: 'Cancel' })}\n        </Button>\n      </Modal.Footer>\n    </>\n  );\n};\n\nconst FileInput = styled(Field.Input)`\n  opacity: 0;\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  z-index: 1;\n`;\n\n/* -------------------------------------------------------------------------------------------------\n * PendingLogoDialog\n * -----------------------------------------------------------------------------------------------*/\n\ninterface PendingLogoDialogProps {\n  onChangeLogo: (file: ImageAsset | null) => void;\n}\n\nconst PendingLogoDialog = ({ onChangeLogo }: PendingLogoDialogProps) => {\n  const { formatMessage } = useIntl();\n  const { localImage, setLocalImage, goToStep, onClose } = useLogoInputContext('PendingLogoDialog');\n\n  const handleGoBack = () => {\n    setLocalImage(undefined);\n    goToStep('upload');\n  };\n\n  const handleUpload = () => {\n    if (localImage) {\n      onChangeLogo(localImage);\n    }\n    onClose();\n  };\n\n  return (\n    <>\n      <Modal.Body>\n        <Box paddingLeft={8} paddingRight={8} paddingTop={6} paddingBottom={6}>\n          <Flex justifyContent=\"space-between\" paddingBottom={6}>\n            <Flex direction=\"column\" alignItems=\"flex-start\">\n              <Typography variant=\"pi\" fontWeight=\"bold\">\n                {formatMessage({\n                  id: 'Settings.application.customization.modal.pending.title',\n                  defaultMessage: 'Logo ready to upload',\n                })}\n              </Typography>\n              <Typography variant=\"pi\" textColor=\"neutral500\">\n                {formatMessage({\n                  id: 'Settings.application.customization.modal.pending.subtitle',\n                  defaultMessage: 'Manage the chosen logo before uploading it',\n                })}\n              </Typography>\n            </Flex>\n            <Button onClick={handleGoBack} variant=\"secondary\">\n              {formatMessage({\n                id: 'Settings.application.customization.modal.pending.choose-another',\n                defaultMessage: 'Choose another logo',\n              })}\n            </Button>\n          </Flex>\n          <Box maxWidth={`18rem`}>\n            {localImage?.url ? <ImageCardAsset asset={localImage} /> : null}\n          </Box>\n        </Box>\n      </Modal.Body>\n      <Modal.Footer>\n        <Modal.Close>\n          <Button onClick={onClose} variant=\"tertiary\">\n            {formatMessage({\n              id: 'Settings.application.customization.modal.cancel',\n              defaultMessage: 'Cancel',\n            })}\n          </Button>\n        </Modal.Close>\n        <Button onClick={handleUpload}>\n          {formatMessage({\n            id: 'Settings.application.customization.modal.pending.upload',\n            defaultMessage: 'Upload logo',\n          })}\n        </Button>\n      </Modal.Footer>\n    </>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * ImageCardAsset\n * -----------------------------------------------------------------------------------------------*/\n\ninterface ImageCardAssetProps {\n  asset: ImageAsset;\n}\n\nconst ImageCardAsset = ({ asset }: ImageCardAssetProps) => {\n  const { formatMessage } = useIntl();\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardAsset size=\"S\" src={asset.url} />\n      </CardHeader>\n      <CardBody>\n        <CardContent>\n          <CardTitle>{asset.name}</CardTitle>\n          <CardSubtitle>\n            {`${asset.ext?.toUpperCase()} - ${asset.width}✕${asset.height}`}\n          </CardSubtitle>\n        </CardContent>\n        <CardBadge>\n          {formatMessage({\n            id: 'Settings.application.customization.modal.pending.card-badge',\n            defaultMessage: 'image',\n          })}\n        </CardBadge>\n      </CardBody>\n    </Card>\n  );\n};\n\nexport { LogoInput };\nexport type { LogoInputProps };\n","import * as React from 'react';\n\nimport { Box, Button, Flex, Grid, Link, Typography } from '@strapi/design-system';\nimport { Check, ExternalLink } from '@strapi/icons';\nimport { useIntl } from 'react-intl';\nimport { useSelector } from 'react-redux';\n\nimport { Layouts } from '../../../../components/Layouts/Layout';\nimport { Page } from '../../../../components/PageHelpers';\nimport { useAppInfo } from '../../../../features/AppInfo';\nimport { useConfiguration } from '../../../../features/Configuration';\nimport { useTracking } from '../../../../features/Tracking';\nimport { useEnterprise } from '../../../../hooks/useEnterprise';\nimport { useRBAC } from '../../../../hooks/useRBAC';\nimport { selectAdminPermissions } from '../../../../selectors';\n\nimport { LogoInput, LogoInputProps } from './components/LogoInput';\nimport { DIMENSION, SIZE } from './utils/constants';\n\nconst AdminSeatInfoCE = () => null;\n\n/* -------------------------------------------------------------------------------------------------\n * ApplicationInfoPage\n * -----------------------------------------------------------------------------------------------*/\n\nconst ApplicationInfoPage = () => {\n  const { trackUsage } = useTracking();\n  const { formatMessage } = useIntl();\n  const { logos: serverLogos, updateProjectSettings } = useConfiguration('ApplicationInfoPage');\n  const [logos, setLogos] = React.useState({ menu: serverLogos.menu, auth: serverLogos.auth });\n  const { settings } = useSelector(selectAdminPermissions);\n\n  const communityEdition = useAppInfo('ApplicationInfoPage', (state) => state.communityEdition);\n  const latestStrapiReleaseTag = useAppInfo(\n    'ApplicationInfoPage',\n    (state) => state.latestStrapiReleaseTag\n  );\n  const nodeVersion = useAppInfo('ApplicationInfoPage', (state) => state.nodeVersion);\n  const shouldUpdateStrapi = useAppInfo('ApplicationInfoPage', (state) => state.shouldUpdateStrapi);\n  const strapiVersion = useAppInfo('ApplicationInfoPage', (state) => state.strapiVersion);\n\n  const AdminSeatInfo = useEnterprise(\n    AdminSeatInfoCE,\n    async () =>\n      (\n        await import(\n          '../../../../../../ee/admin/src/pages/SettingsPage/pages/ApplicationInfoPage/components/AdminSeatInfo'\n        )\n      ).AdminSeatInfoEE\n  );\n\n  const {\n    allowedActions: { canRead, canUpdate },\n  } = useRBAC(settings ? settings['project-settings'] : {});\n\n  const handleSubmit: React.FormEventHandler<HTMLFormElement> = (e) => {\n    e.preventDefault();\n\n    updateProjectSettings({\n      authLogo: logos.auth.custom ?? null,\n      menuLogo: logos.menu.custom ?? null,\n    });\n  };\n\n  const handleChangeLogo =\n    (logo: 'menu' | 'auth'): LogoInputProps['onChangeLogo'] =>\n    (newLogo) => {\n      /**\n       * If there's no newLogo value we can assume we're reseting.\n       */\n      if (newLogo === null) {\n        trackUsage('didClickResetLogo', {\n          logo,\n        });\n      }\n\n      setLogos((prev) => ({\n        ...prev,\n        [logo]: {\n          ...prev[logo],\n          custom: newLogo,\n        },\n      }));\n    };\n\n  React.useEffect(() => {\n    setLogos({\n      menu: serverLogos.menu,\n      auth: serverLogos.auth,\n    });\n  }, [serverLogos]);\n\n  // block rendering until the EE component is fully loaded\n  if (!AdminSeatInfo) {\n    return null;\n  }\n\n  const isSaveDisabled =\n    logos.auth.custom === serverLogos.auth.custom && logos.menu.custom === serverLogos.menu.custom;\n\n  return (\n    <Layouts.Root>\n      <Page.Title>\n        {formatMessage(\n          { id: 'Settings.PageTitle', defaultMessage: 'Settings - {name}' },\n          {\n            name: formatMessage({\n              id: 'Settings.application.header',\n              defaultMessage: 'Application',\n            }),\n          }\n        )}\n      </Page.Title>\n      <Page.Main>\n        <form onSubmit={handleSubmit}>\n          <Layouts.Header\n            title={formatMessage({\n              id: 'Settings.application.title',\n              defaultMessage: 'Overview',\n            })}\n            subtitle={formatMessage({\n              id: 'Settings.application.description',\n              defaultMessage: 'Administration panel’s global information',\n            })}\n            primaryAction={\n              canUpdate && (\n                <Button disabled={isSaveDisabled} type=\"submit\" startIcon={<Check />}>\n                  {formatMessage({ id: 'global.save', defaultMessage: 'Save' })}\n                </Button>\n              )\n            }\n          />\n          <Layouts.Content>\n            <Flex direction=\"column\" alignItems=\"stretch\" gap={6}>\n              <Flex\n                direction=\"column\"\n                alignItems=\"stretch\"\n                gap={4}\n                hasRadius\n                background=\"neutral0\"\n                shadow=\"tableShadow\"\n                paddingTop={6}\n                paddingBottom={6}\n                paddingRight={7}\n                paddingLeft={7}\n              >\n                <Typography variant=\"delta\" tag=\"h3\">\n                  {formatMessage({\n                    id: 'global.details',\n                    defaultMessage: 'Details',\n                  })}\n                </Typography>\n\n                <Grid.Root gap={5} tag=\"dl\">\n                  <Grid.Item col={6} s={12} direction=\"column\" alignItems=\"start\">\n                    <Typography variant=\"sigma\" textColor=\"neutral600\" tag=\"dt\">\n                      {formatMessage({\n                        id: 'Settings.application.strapiVersion',\n                        defaultMessage: 'strapi version',\n                      })}\n                    </Typography>\n                    <Flex gap={3} direction=\"column\" alignItems=\"start\" tag=\"dd\">\n                      <Typography>v{strapiVersion}</Typography>\n                      {shouldUpdateStrapi && (\n                        <Link\n                          href={`https://github.com/strapi/strapi/releases/tag/${latestStrapiReleaseTag}`}\n                          endIcon={<ExternalLink />}\n                        >\n                          {formatMessage({\n                            id: 'Settings.application.link-upgrade',\n                            defaultMessage: 'Upgrade your admin panel',\n                          })}\n                        </Link>\n                      )}\n                    </Flex>\n                  </Grid.Item>\n                  <Grid.Item col={6} s={12} direction=\"column\" alignItems=\"start\">\n                    <Typography variant=\"sigma\" textColor=\"neutral600\" tag=\"dt\">\n                      {formatMessage({\n                        id: 'Settings.application.edition-title',\n                        defaultMessage: 'current plan',\n                      })}\n                    </Typography>\n                    <Flex gap={3} direction=\"column\" alignItems=\"start\" tag=\"dd\">\n                      <Typography>\n                        {formatMessage(\n                          {\n                            id: 'Settings.application.ee-or-ce',\n                            defaultMessage:\n                              '{communityEdition, select, true {Community Edition} other {Enterprise Edition}}',\n                          },\n                          { communityEdition }\n                        )}\n                      </Typography>\n                      <Link href=\"https://strapi.io/pricing-self-hosted\" endIcon={<ExternalLink />}>\n                        {formatMessage({\n                          id: 'Settings.application.link-pricing',\n                          defaultMessage: 'See all pricing plans',\n                        })}\n                      </Link>\n                    </Flex>\n                  </Grid.Item>\n\n                  <Grid.Item col={6} s={12} direction=\"column\" alignItems=\"start\">\n                    <Typography variant=\"sigma\" textColor=\"neutral600\" tag=\"dt\">\n                      {formatMessage({\n                        id: 'Settings.application.node-version',\n                        defaultMessage: 'node version',\n                      })}\n                    </Typography>\n                    <Typography tag=\"dd\">{nodeVersion}</Typography>\n                  </Grid.Item>\n                  <AdminSeatInfo />\n                </Grid.Root>\n              </Flex>\n              {canRead && (\n                <Box\n                  hasRadius\n                  background=\"neutral0\"\n                  shadow=\"tableShadow\"\n                  paddingTop={6}\n                  paddingBottom={6}\n                  paddingRight={7}\n                  paddingLeft={7}\n                >\n                  <Typography variant=\"delta\" tag=\"h3\">\n                    {formatMessage({\n                      id: 'Settings.application.customization',\n                      defaultMessage: 'Customization',\n                    })}\n                  </Typography>\n                  <Typography variant=\"pi\" textColor=\"neutral600\">\n                    {formatMessage(\n                      {\n                        id: 'Settings.application.customization.size-details',\n                        defaultMessage:\n                          'Max dimension: {dimension}×{dimension}, Max file size: {size}KB',\n                      },\n                      { dimension: DIMENSION, size: SIZE }\n                    )}\n                  </Typography>\n                  <Grid.Root paddingTop={4} gap={4}>\n                    <Grid.Item col={6} s={12} direction=\"column\" alignItems=\"stretch\">\n                      <LogoInput\n                        canUpdate={canUpdate}\n                        customLogo={logos.menu.custom}\n                        defaultLogo={logos.menu.default}\n                        hint={formatMessage({\n                          id: 'Settings.application.customization.menu-logo.carousel-hint',\n                          defaultMessage: 'Replace the logo in the main navigation',\n                        })}\n                        label={formatMessage({\n                          id: 'Settings.application.customization.carousel.menu-logo.title',\n                          defaultMessage: 'Menu logo',\n                        })}\n                        onChangeLogo={handleChangeLogo('menu')}\n                      />\n                    </Grid.Item>\n                    <Grid.Item col={6} s={12} direction=\"column\" alignItems=\"stretch\">\n                      <LogoInput\n                        canUpdate={canUpdate}\n                        customLogo={logos.auth.custom}\n                        defaultLogo={logos.auth.default}\n                        hint={formatMessage({\n                          id: 'Settings.application.customization.auth-logo.carousel-hint',\n                          defaultMessage: 'Replace the logo in the authentication pages',\n                        })}\n                        label={formatMessage({\n                          id: 'Settings.application.customization.carousel.auth-logo.title',\n                          defaultMessage: 'Auth logo',\n                        })}\n                        onChangeLogo={handleChangeLogo('auth')}\n                      />\n                    </Grid.Item>\n                  </Grid.Root>\n                </Box>\n              )}\n            </Flex>\n          </Layouts.Content>\n        </form>\n      </Page.Main>\n    </Layouts.Root>\n  );\n};\n\nexport { ApplicationInfoPage };\n"],"names":["createContext","React","useIntl","jsx","Modal","jsxs","CarouselInput","CarouselActions","IconButton","Plus","ArrowClockwise","CarouselSlide","Box","Tabs","axios","AxiosError","Field","TextInput","Button","Fragment","Flex","PlusCircle","Typography","styled","Card","CardHeader","CardAsset","CardBody","CardContent","CardTitle","CardSubtitle","CardBadge","useTracking","useConfiguration","useSelector","selectAdminPermissions","useAppInfo","useEnterprise","useRBAC","Layouts","Page","Check","Grid","Link","ExternalLink"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAO,MAAM,SAAY,GAAA,GAAA;AAClB,MAAM,IAAO,GAAA,GAAA;AACb,MAAM,eAAkB,GAAA,CAAC,YAAc,EAAA,WAAA,EAAa,eAAe,CAAA;;ACE1E,MAAM,yBAA4B,GAAA;AAAA,EAChC,EAAI,EAAA,8DAAA;AAAA,EACJ,cAAgB,EAAA;AAClB,CAAA;AAEA,MAAM,yBAA4B,GAAA;AAAA,EAChC,EAAI,EAAA,4DAAA;AAAA,EACJ,cACE,EAAA;AACJ,CAAA;AAeA,MAAM,kBAAA,GAAqB,OAAO,IAAoC,KAAA;AACpE,EAAA,MAAM,kBAAqB,GAAA,eAAA,CAAgB,QAAS,CAAA,IAAA,CAAK,IAAI,CAAA;AAE7D,EAAA,IAAI,CAAC,kBAAoB,EAAA;AACvB,IAAM,MAAA,IAAI,gBAAiB,CAAA,aAAA,EAAe,yBAAyB,CAAA;AAAA;AAGrE,EAAA,MAAM,cAAiB,GAAA,MAAM,IAAI,OAAA,CAAyB,CAAC,OAAY,KAAA;AACrE,IAAM,MAAA,MAAA,GAAS,IAAI,UAAW,EAAA;AAC9B,IAAA,MAAA,CAAO,SAAS,MAAM;AACpB,MAAM,MAAA,GAAA,GAAM,IAAI,KAAM,EAAA;AACtB,MAAA,GAAA,CAAI,SAAS,MAAM;AACjB,QAAA,OAAA,CAAQ,EAAE,KAAO,EAAA,GAAA,CAAI,OAAO,MAAQ,EAAA,GAAA,CAAI,QAAQ,CAAA;AAAA,OAClD;AACA,MAAA,GAAA,CAAI,MAAM,MAAO,CAAA,MAAA;AAAA,KACnB;AACA,IAAA,MAAA,CAAO,cAAc,IAAI,CAAA;AAAA,GAC1B,CAAA;AAED,EAAA,MAAM,uBACJ,GAAA,cAAA,CAAe,KAAS,IAAA,SAAA,IAAa,eAAe,MAAU,IAAA,SAAA;AAEhE,EAAA,IAAI,CAAC,uBAAyB,EAAA;AAC5B,IAAM,MAAA,IAAI,gBAAiB,CAAA,aAAA,EAAe,yBAAyB,CAAA;AAAA;AAGrE,EAAA,MAAM,KAAQ,GAAA;AAAA,IACZ,KAAK,IAAK,CAAA,IAAA,CAAK,KAAM,CAAA,GAAG,EAAE,GAAI,EAAA;AAAA,IAC9B,IAAA,EAAM,KAAK,IAAO,GAAA,GAAA;AAAA,IAClB,MAAM,IAAK,CAAA,IAAA;AAAA,IACX,GAAA,EAAK,GAAI,CAAA,eAAA,CAAgB,IAAI,CAAA;AAAA,IAC7B,OAAS,EAAA,IAAA;AAAA,IACT,OAAO,cAAe,CAAA,KAAA;AAAA,IACtB,QAAQ,cAAe,CAAA;AAAA,GACzB;AAEA,EAAM,MAAA,gBAAA,GAAmB,MAAM,IAAQ,IAAA,IAAA;AAEvC,EAAA,IAAI,CAAC,gBAAkB,EAAA;AACrB,IAAM,MAAA,IAAI,gBAAiB,CAAA,aAAA,EAAe,yBAAyB,CAAA;AAAA;AAGrE,EAAO,OAAA,KAAA;AACT,CAAA;AAEA,MAAM,yBAAyB,KAAM,CAAA;AAAA,EACnC,cAAA;AAAA,EAEA,WAAA,CAAY,OAAiB,EAAA,cAAA,EAAmC,OAAwB,EAAA;AACtF,IAAA,KAAA,CAAM,SAAS,OAAO,CAAA;AACtB,IAAA,IAAA,CAAK,cAAiB,GAAA,cAAA;AAAA;AAE1B;;AChCA,MAAM,CAAC,wBAAA,EAA0B,mBAAmB,CAAA,GAClDA,2BAAqC,WAAW,CAAA;AAgBlD,MAAM,YAAY,CAAC;AAAA,EACjB,SAAA;AAAA,EACA,UAAA;AAAA,EACA,WAAA;AAAA,EACA,IAAA;AAAA,EACA,KAAA;AAAA,EACA;AACF,CAAsB,KAAA;AACpB,EAAA,MAAM,CAAC,UAAA,EAAY,aAAa,CAAA,GAAIC,iBAAM,QAAiC,EAAA;AAC3E,EAAA,MAAM,CAAC,WAAA,EAAa,cAAc,CAAA,GAAIA,iBAAM,QAAe,EAAA;AAC3D,EAAM,MAAA,EAAE,aAAc,EAAA,GAAIC,iBAAQ,EAAA;AAElC,EAAA,MAAM,cAAc,MAAM;AACxB,IAAA,aAAA,CAAc,KAAS,CAAA,CAAA;AACvB,IAAA,cAAA,CAAe,KAAS,CAAA,CAAA;AAAA,GAC1B;AAEA,EACE,uBAAAC,cAAA;AAAA,IAACC,kBAAM,CAAA,IAAA;AAAA,IAAN;AAAA,MACC,IAAA,EAAM,CAAC,CAAC,WAAA;AAAA,MACR,YAAA,EAAc,CAAC,KAAU,KAAA;AACvB,QAAA,IAAI,UAAU,KAAO,EAAA;AACnB,UAAY,WAAA,EAAA;AAAA;AACd,OACF;AAAA,MAEA,QAAA,kBAAAC,eAAA;AAAA,QAAC,wBAAA;AAAA,QAAA;AAAA,UACC,aAAA;AAAA,UACA,UAAA;AAAA,UACA,QAAU,EAAA,cAAA;AAAA,UACV,OAAS,EAAA,WAAA;AAAA,UAET,QAAA,EAAA;AAAA,4BAAAF,cAAA;AAAA,cAACG,0BAAA;AAAA,cAAA;AAAA,gBACC,KAAA;AAAA,gBACA,aAAe,EAAA,CAAA;AAAA,gBACf,IAAA;AAAA,gBAGA,aAAc,EAAA,EAAA;AAAA,gBACd,SAAU,EAAA,EAAA;AAAA,gBACV,QAAQ,MAAM;AAAA,iBAAC;AAAA,gBACf,YAAY,MAAM;AAAA,iBAAC;AAAA,gBACnB,cAAA,EAAgB,YAAY,IAAQ,IAAA,UAAA;AAAA,gBACpC,OAAA,kCACGC,4BACC,EAAA,EAAA,QAAA,EAAA;AAAA,kCAACJ,cAAA,CAAAC,kBAAA,CAAM,SAAN,EACC,QAAA,kBAAAD,cAAA;AAAA,oBAACK,uBAAA;AAAA,oBAAA;AAAA,sBACC,UAAU,CAAC,SAAA;AAAA,sBACX,OAAA,EAAS,MAAM,cAAA,CAAe,QAAQ,CAAA;AAAA,sBACtC,OAAO,aAAc,CAAA;AAAA,wBACnB,EAAI,EAAA,2DAAA;AAAA,wBACJ,cAAgB,EAAA;AAAA,uBACjB,CAAA;AAAA,sBAED,yCAACC,UAAK,EAAA,EAAA;AAAA;AAAA,mBAEV,EAAA,CAAA;AAAA,kBACC,YAAY,GACX,oBAAAN,cAAA;AAAA,oBAACK,uBAAA;AAAA,oBAAA;AAAA,sBACC,UAAU,CAAC,SAAA;AAAA,sBACX,OAAA,EAAS,MAAM,YAAA,CAAa,IAAI,CAAA;AAAA,sBAChC,OAAO,aAAc,CAAA;AAAA,wBACnB,EAAI,EAAA,0DAAA;AAAA,wBACJ,cAAgB,EAAA;AAAA,uBACjB,CAAA;AAAA,sBAED,yCAACE,oBAAe,EAAA,EAAA;AAAA;AAAA;AAClB,iBAEJ,EAAA,CAAA;AAAA,gBAGF,QAAA,kBAAAP,cAAA;AAAA,kBAACQ,0BAAA;AAAA,kBAAA;AAAA,oBACC,OAAO,aAAc,CAAA;AAAA,sBACnB,EAAI,EAAA,yDAAA;AAAA,sBACJ,cAAgB,EAAA;AAAA,qBACjB,CAAA;AAAA,oBAED,QAAA,kBAAAR,cAAA;AAAA,sBAACS,gBAAA;AAAA,sBAAA;AAAA,wBACC,SAAU,EAAA,KAAA;AAAA,wBACV,QAAS,EAAA,KAAA;AAAA,wBACT,GAAI,EAAA,KAAA;AAAA,wBACJ,GAAA,EAAK,YAAY,GAAO,IAAA,WAAA;AAAA,wBACxB,KAAK,aAAc,CAAA;AAAA,0BACjB,EAAI,EAAA,mDAAA;AAAA,0BACJ,cAAgB,EAAA;AAAA,yBACjB;AAAA;AAAA;AACH;AAAA;AACF;AAAA,aACF;AAAA,4BACAP,eAAA,CAACD,kBAAM,CAAA,OAAA,EAAN,EACC,QAAA,EAAA;AAAA,8BAAAD,cAAA,CAACC,mBAAM,MAAN,EAAA,EACC,QAAC,kBAAAD,cAAA,CAAAC,kBAAA,CAAM,OAAN,EACE,QAAA,EAAA,aAAA;AAAA,gBACC,gBAAgB,QACZ,GAAA;AAAA,kBACE,EAAI,EAAA,iDAAA;AAAA,kBACJ,cAAgB,EAAA;AAAA,iBAElB,GAAA;AAAA,kBACE,EAAI,EAAA,kDAAA;AAAA,kBACJ,cAAgB,EAAA;AAAA;AAClB,iBAER,CACF,EAAA,CAAA;AAAA,cACC,gBAAgB,QACf,mBAAAD,cAAA,CAAC,iBAAc,CAEf,mBAAAA,cAAA,CAAC,qBAAkB,YAA4B,EAAA;AAAA,aAEnD,EAAA;AAAA;AAAA;AAAA;AACF;AAAA,GACF;AAEJ,CAAA;AAMA,MAAM,gBAAgB,MAAM;AAC1B,EAAM,MAAA,EAAE,aAAc,EAAA,GAAID,iBAAQ,EAAA;AAElC,EAAA,uCACGW,iBAAK,CAAA,IAAA,EAAL,EAAU,OAAQ,EAAA,QAAA,EAAS,cAAa,UACvC,EAAA,QAAA,EAAA;AAAA,oBAAAV,cAAA,CAACS,gBAAI,EAAA,EAAA,WAAA,EAAa,CAAG,EAAA,YAAA,EAAc,CACjC,EAAA,QAAA,kBAAAP,eAAA;AAAA,MAACQ,iBAAK,CAAA,IAAA;AAAA,MAAL;AAAA,QACC,cAAY,aAAc,CAAA;AAAA,UACxB,EAAI,EAAA,oDAAA;AAAA,UACJ,cAAgB,EAAA;AAAA,SACjB,CAAA;AAAA,QAED,QAAA,EAAA;AAAA,0BAAAV,cAAA,CAACU,iBAAK,CAAA,OAAA,EAAL,EAAa,KAAA,EAAM,YACjB,QAAc,EAAA,aAAA,CAAA;AAAA,YACb,EAAI,EAAA,+DAAA;AAAA,YACJ,cAAgB,EAAA;AAAA,WACjB,CACH,EAAA,CAAA;AAAA,yCACCA,iBAAK,CAAA,OAAA,EAAL,EAAa,KAAA,EAAM,OACjB,QAAc,EAAA,aAAA,CAAA;AAAA,YACb,EAAI,EAAA,0DAAA;AAAA,YACJ,cAAgB,EAAA;AAAA,WACjB,CACH,EAAA;AAAA;AAAA;AAAA,KAEJ,EAAA,CAAA;AAAA,oBACAV,cAAA,CAACU,kBAAK,OAAL,EAAA,EAAa,OAAM,UAClB,EAAA,QAAA,kBAAAV,cAAA,CAAC,gBAAa,CAChB,EAAA,CAAA;AAAA,oBACAA,cAAA,CAACU,kBAAK,OAAL,EAAA,EAAa,OAAM,KAClB,EAAA,QAAA,kBAAAV,cAAA,CAAC,WAAQ,CACX,EAAA;AAAA,GACF,EAAA,CAAA;AAEJ,CAAA;AAMA,MAAM,UAAU,MAAM;AACpB,EAAM,MAAA,EAAE,aAAc,EAAA,GAAID,iBAAQ,EAAA;AAClC,EAAA,MAAM,CAAC,OAAS,EAAA,UAAU,CAAI,GAAAD,gBAAA,CAAM,SAAS,EAAE,CAAA;AAC/C,EAAA,MAAM,CAAC,KAAA,EAAO,QAAQ,CAAA,GAAIA,iBAAM,QAAiB,EAAA;AACjD,EAAA,MAAM,EAAE,aAAe,EAAA,QAAA,EAAU,OAAQ,EAAA,GAAI,oBAAoB,SAAS,CAAA;AAE1E,EAAM,MAAA,YAAA,GAA2C,CAAC,CAAM,KAAA;AACtD,IAAW,UAAA,CAAA,CAAA,CAAE,OAAO,KAAK,CAAA;AAAA,GAC3B;AAEA,EAAM,MAAA,YAAA,GAAwD,OAAO,KAAU,KAAA;AAC7E,IAAA,KAAA,CAAM,cAAe,EAAA;AAErB,IAAA,MAAM,IAAO,GAAA,IAAI,QAAS,CAAA,KAAA,CAAM,MAAyB,CAAA;AAEzD,IAAM,MAAA,GAAA,GAAM,IAAK,CAAA,GAAA,CAAI,UAAU,CAAA;AAE/B,IAAA,IAAI,CAAC,GAAK,EAAA;AACR,MAAA;AAAA;AAGF,IAAI,IAAA;AACF,MAAA,MAAM,GAAM,GAAA,MAAMa,sBAAM,CAAA,GAAA,CAAI,GAAI,CAAA,QAAA,EAAY,EAAA,EAAE,YAAc,EAAA,MAAA,EAAQ,OAAS,EAAA,GAAA,EAAM,CAAA;AAEnF,MAAM,MAAA,IAAA,GAAO,IAAI,IAAA,CAAK,CAAC,GAAA,CAAI,IAAI,CAAG,EAAA,GAAA,CAAI,MAAO,CAAA,GAAA,IAAO,EAAI,EAAA;AAAA,QACtD,IAAA,EAAM,GAAI,CAAA,OAAA,CAAQ,cAAc;AAAA,OACjC,CAAA;AAED,MAAM,MAAA,KAAA,GAAQ,MAAM,kBAAA,CAAmB,IAAI,CAAA;AAE3C,MAAA,aAAA,CAAc,KAAK,CAAA;AACnB,MAAA,QAAA,CAAS,SAAS,CAAA;AAAA,aACX,GAAK,EAAA;AACZ,MAAA,IAAI,eAAeC,gBAAY,EAAA;AAC7B,QAAA,QAAA;AAAA,UACE,aAAc,CAAA;AAAA,YACZ,EAAI,EAAA,+DAAA;AAAA,YACJ,cAAgB,EAAA;AAAA,WACjB;AAAA,SACH;AAAA,OACF,MAAA,IAAW,eAAe,gBAAkB,EAAA;AAC1C,QAAS,QAAA,CAAA,aAAA,CAAc,IAAI,cAAgB,EAAA,EAAE,MAAM,IAAM,EAAA,SAAA,EAAW,SAAU,EAAC,CAAC,CAAA;AAAA,OAC3E,MAAA;AACL,QAAM,MAAA,GAAA;AAAA;AACR;AACF,GACF;AAEA,EACE,uBAAAV,eAAA,CAAC,MAAK,EAAA,EAAA,QAAA,EAAU,YACd,EAAA,QAAA,EAAA;AAAA,oBAAAF,cAAA,CAACS,gBAAI,EAAA,EAAA,WAAA,EAAa,CAAG,EAAA,YAAA,EAAc,GAAG,UAAY,EAAA,CAAA,EAAG,aAAe,EAAA,CAAA,EAClE,0CAACI,kBAAM,CAAA,IAAA,EAAN,EAAW,KAAA,EAAc,MAAK,UAC7B,EAAA,QAAA,EAAA;AAAA,sBAACb,cAAA,CAAAa,kBAAA,CAAM,KAAN,EAAA,EACE,QAAc,EAAA,aAAA,CAAA;AAAA,QACb,EAAI,EAAA,sEAAA;AAAA,QACJ,cAAgB,EAAA;AAAA,OACjB,CACH,EAAA,CAAA;AAAA,sBACCb,cAAA,CAAAc,sBAAA,EAAA,EAAU,QAAU,EAAA,YAAA,EAAc,OAAO,OAAS,EAAA,CAAA;AAAA,sBACnDd,cAAA,CAACa,kBAAM,CAAA,KAAA,EAAN,EAAY;AAAA,KAAA,EACf,CACF,EAAA,CAAA;AAAA,oBACAX,eAAA,CAACD,kBAAM,CAAA,MAAA,EAAN,EACC,QAAA,EAAA;AAAA,sBAAAD,cAAA,CAACe,mBAAO,EAAA,EAAA,OAAA,EAAS,OAAS,EAAA,OAAA,EAAQ,UAC/B,EAAA,QAAA,EAAA,aAAA,CAAc,EAAE,EAAA,EAAI,8BAAgC,EAAA,cAAA,EAAgB,QAAS,EAAC,CACjF,EAAA,CAAA;AAAA,sBACCf,cAAA,CAAAe,mBAAA,EAAA,EAAO,IAAK,EAAA,QAAA,EACV,QAAc,EAAA,aAAA,CAAA;AAAA,QACb,EAAI,EAAA,sDAAA;AAAA,QACJ,cAAgB,EAAA;AAAA,OACjB,CACH,EAAA;AAAA,KACF,EAAA;AAAA,GACF,EAAA,CAAA;AAEJ,CAAA;AAMA,MAAM,eAAe,MAAM;AACzB,EAAM,MAAA,EAAE,aAAc,EAAA,GAAIhB,iBAAQ,EAAA;AAClC,EAAA,MAAM,CAAC,QAAU,EAAA,WAAW,CAAI,GAAAD,gBAAA,CAAM,SAAS,KAAK,CAAA;AACpD,EAAA,MAAM,CAAC,SAAA,EAAW,YAAY,CAAA,GAAIA,iBAAM,QAAiB,EAAA;AACzD,EAAM,MAAA,QAAA,GAAWA,gBAAM,CAAA,MAAA,CAAyB,IAAK,CAAA;AACrD,EAAM,MAAA,EAAA,GAAKA,iBAAM,KAAM,EAAA;AAEvB,EAAA,MAAM,EAAE,aAAe,EAAA,QAAA,EAAU,OAAQ,EAAA,GAAI,oBAAoB,cAAc,CAAA;AAE/E,EAAA,MAAM,kBAAkB,MAAM;AAC5B,IAAA,WAAA,CAAY,IAAI,CAAA;AAAA,GAClB;AACA,EAAA,MAAM,kBAAkB,MAAM;AAC5B,IAAA,WAAA,CAAY,KAAK,CAAA;AAAA,GACnB;AAEA,EAAM,MAAA,WAAA,GAAsC,CAAC,CAAM,KAAA;AACjD,IAAA,CAAA,CAAE,cAAe,EAAA;AACjB,IAAA,QAAA,CAAS,QAAQ,KAAM,EAAA;AAAA,GACzB;AAEA,EAAA,MAAM,eAAe,YAAY;AAC/B,IAAgB,eAAA,EAAA;AAEhB,IAAI,IAAA,CAAC,QAAS,CAAA,OAAA,CAAQ,KAAO,EAAA;AAC3B,MAAA;AAAA;AAGF,IAAA,MAAM,CAAC,IAAI,CAAI,GAAA,QAAA,CAAS,OAAQ,CAAA,KAAA;AAEhC,IAAI,IAAA;AACF,MAAM,MAAA,KAAA,GAAQ,MAAM,kBAAA,CAAmB,IAAI,CAAA;AAC3C,MAAA,aAAA,CAAc,KAAK,CAAA;AACnB,MAAA,QAAA,CAAS,SAAS,CAAA;AAAA,aACX,GAAK,EAAA;AACZ,MAAA,IAAI,eAAe,gBAAkB,EAAA;AACnC,QAAa,YAAA,CAAA,aAAA,CAAc,IAAI,cAAgB,EAAA,EAAE,MAAM,IAAM,EAAA,SAAA,EAAW,SAAU,EAAC,CAAC,CAAA;AACpF,QAAA,QAAA,CAAS,QAAQ,KAAM,EAAA;AAAA,OAClB,MAAA;AACL,QAAM,MAAA,GAAA;AAAA;AACR;AACF,GACF;AAEA,EAAA,uBAEII,eAAA,CAAAc,mBAAA,EAAA,EAAA,QAAA,EAAA;AAAA,oBAAChB,cAAA,CAAA,MAAA,EAAA,EACC,QAAC,kBAAAA,cAAA,CAAAS,gBAAA,EAAA,EAAI,WAAa,EAAA,CAAA,EAAG,YAAc,EAAA,CAAA,EAAG,UAAY,EAAA,CAAA,EAAG,aAAe,EAAA,CAAA,EAClE,QAAC,kBAAAT,cAAA,CAAAa,kBAAA,CAAM,MAAN,EAAW,IAAA,EAAM,EAAI,EAAA,KAAA,EAAO,SAC3B,EAAA,QAAA,kBAAAX,eAAA,CAACe,iBAAK,EAAA,EAAA,SAAA,EAAU,QAAS,EAAA,UAAA,EAAW,SAAU,EAAA,GAAA,EAAK,CACjD,EAAA,QAAA,EAAA;AAAA,sBAAAf,eAAA;AAAA,QAACe,iBAAA;AAAA,QAAA;AAAA,UACC,UAAY,EAAA,CAAA;AAAA,UACZ,aAAe,EAAA,CAAA;AAAA,UACf,SAAS,EAAA,IAAA;AAAA,UACT,cAAe,EAAA,QAAA;AAAA,UACf,SAAU,EAAA,QAAA;AAAA,UACV,UAAA,EAAY,WAAW,YAAe,GAAA,YAAA;AAAA,UACtC,WAAa,EAAA,QAAA,GAAW,YAAe,GAAA,SAAA,GAAY,WAAc,GAAA,YAAA;AAAA,UACjE,WAAY,EAAA,QAAA;AAAA,UACZ,WAAY,EAAA,KAAA;AAAA,UACZ,QAAS,EAAA,UAAA;AAAA,UACT,WAAa,EAAA,eAAA;AAAA,UACb,WAAa,EAAA,eAAA;AAAA,UAEb,QAAA,EAAA;AAAA,4BAACjB,cAAA,CAAAkB,gBAAA,EAAA,EAAW,MAAK,YAAa,EAAA,KAAA,EAAM,QAAO,MAAO,EAAA,MAAA,EAAO,eAAW,IAAC,EAAA,CAAA;AAAA,4BACpElB,cAAA,CAAAS,gBAAA,EAAA,EAAI,UAAY,EAAA,CAAA,EAAG,eAAe,CACjC,EAAA,QAAA,kBAAAT,cAAA,CAACmB,uBAAW,EAAA,EAAA,OAAA,EAAQ,OAAQ,EAAA,GAAA,EAAI,OAAQ,EAAA,OAAA,EAAS,IAC9C,QAAc,EAAA,aAAA,CAAA;AAAA,cACb,EAAI,EAAA,2DAAA;AAAA,cACJ,cAAgB,EAAA;AAAA,aACjB,GACH,CACF,EAAA,CAAA;AAAA,4BACAnB,cAAA,CAACS,gBAAI,EAAA,EAAA,QAAA,EAAS,UACZ,EAAA,QAAA,kBAAAT,cAAA;AAAA,cAAC,SAAA;AAAA,cAAA;AAAA,gBACC,MAAA,EAAQ,eAAgB,CAAA,IAAA,CAAK,IAAI,CAAA;AAAA,gBACjC,IAAK,EAAA,MAAA;AAAA,gBACL,IAAK,EAAA,OAAA;AAAA,gBACL,QAAU,EAAA,CAAA,CAAA;AAAA,gBACV,QAAU,EAAA,YAAA;AAAA,gBACV,GAAK,EAAA,QAAA;AAAA,gBACL;AAAA;AAAA,aAEJ,EAAA,CAAA;AAAA,2CACCe,mBAAO,EAAA,EAAA,IAAA,EAAK,QAAS,EAAA,OAAA,EAAS,aAC5B,QAAc,EAAA,aAAA,CAAA;AAAA,cACb,EAAI,EAAA,4DAAA;AAAA,cACJ,cAAgB,EAAA;AAAA,aACjB,CACH,EAAA,CAAA;AAAA,4BACAf,cAAA,CAACS,oBAAI,UAAY,EAAA,CAAA,EACf,yCAACU,uBAAW,EAAA,EAAA,OAAA,EAAQ,IAAK,EAAA,SAAA,EAAU,YAChC,EAAA,QAAA,EAAA,aAAA;AAAA,cACC;AAAA,gBACE,EAAI,EAAA,iEAAA;AAAA,gBACJ,cACE,EAAA;AAAA,eACJ;AAAA,cACA,EAAE,IAAA,EAAM,IAAM,EAAA,SAAA,EAAW,SAAU;AAAA,eAEvC,CACF,EAAA;AAAA;AAAA;AAAA,OACF;AAAA,sBACAnB,cAAA,CAACa,kBAAM,CAAA,KAAA,EAAN,EAAY;AAAA,KACf,EAAA,CAAA,EACF,GACF,CACF,EAAA,CAAA;AAAA,mCACCZ,kBAAM,CAAA,MAAA,EAAN,EACC,QAAC,kBAAAD,cAAA,CAAAe,mBAAA,EAAA,EAAO,SAAS,OAAS,EAAA,OAAA,EAAQ,UAC/B,EAAA,QAAA,EAAA,aAAA,CAAc,EAAE,EAAI,EAAA,8BAAA,EAAgC,gBAAgB,QAAS,EAAC,GACjF,CACF,EAAA;AAAA,GACF,EAAA,CAAA;AAEJ,CAAA;AAEA,MAAM,SAAA,GAAYK,uBAAO,CAAAP,kBAAA,CAAM,KAAK,CAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAA;AAkBpC,MAAM,iBAAoB,GAAA,CAAC,EAAE,YAAA,EAA2C,KAAA;AACtE,EAAM,MAAA,EAAE,aAAc,EAAA,GAAId,iBAAQ,EAAA;AAClC,EAAA,MAAM,EAAE,UAAY,EAAA,aAAA,EAAe,UAAU,OAAQ,EAAA,GAAI,oBAAoB,mBAAmB,CAAA;AAEhG,EAAA,MAAM,eAAe,MAAM;AACzB,IAAA,aAAA,CAAc,KAAS,CAAA,CAAA;AACvB,IAAA,QAAA,CAAS,QAAQ,CAAA;AAAA,GACnB;AAEA,EAAA,MAAM,eAAe,MAAM;AACzB,IAAA,IAAI,UAAY,EAAA;AACd,MAAA,YAAA,CAAa,UAAU,CAAA;AAAA;AAEzB,IAAQ,OAAA,EAAA;AAAA,GACV;AAEA,EAAA,uBAEIG,eAAA,CAAAc,mBAAA,EAAA,EAAA,QAAA,EAAA;AAAA,oBAAAhB,cAAA,CAACC,kBAAM,CAAA,IAAA,EAAN,EACC,QAAA,kBAAAC,eAAA,CAACO,gBAAI,EAAA,EAAA,WAAA,EAAa,CAAG,EAAA,YAAA,EAAc,CAAG,EAAA,UAAA,EAAY,CAAG,EAAA,aAAA,EAAe,CAClE,EAAA,QAAA,EAAA;AAAA,sBAAAP,eAAA,CAACe,iBAAK,EAAA,EAAA,cAAA,EAAe,eAAgB,EAAA,aAAA,EAAe,CAClD,EAAA,QAAA,EAAA;AAAA,wBAAAf,eAAA,CAACe,iBAAK,EAAA,EAAA,SAAA,EAAU,QAAS,EAAA,UAAA,EAAW,YAClC,EAAA,QAAA,EAAA;AAAA,0BAAAjB,cAAA,CAACmB,uBAAW,EAAA,EAAA,OAAA,EAAQ,IAAK,EAAA,UAAA,EAAW,QACjC,QAAc,EAAA,aAAA,CAAA;AAAA,YACb,EAAI,EAAA,wDAAA;AAAA,YACJ,cAAgB,EAAA;AAAA,WACjB,CACH,EAAA,CAAA;AAAA,yCACCA,uBAAW,EAAA,EAAA,OAAA,EAAQ,IAAK,EAAA,SAAA,EAAU,cAChC,QAAc,EAAA,aAAA,CAAA;AAAA,YACb,EAAI,EAAA,2DAAA;AAAA,YACJ,cAAgB,EAAA;AAAA,WACjB,CACH,EAAA;AAAA,SACF,EAAA,CAAA;AAAA,uCACCJ,mBAAO,EAAA,EAAA,OAAA,EAAS,YAAc,EAAA,OAAA,EAAQ,aACpC,QAAc,EAAA,aAAA,CAAA;AAAA,UACb,EAAI,EAAA,iEAAA;AAAA,UACJ,cAAgB,EAAA;AAAA,SACjB,CACH,EAAA;AAAA,OACF,EAAA,CAAA;AAAA,sBACAf,cAAA,CAACS,gBAAI,EAAA,EAAA,QAAA,EAAU,CACZ,KAAA,CAAA,EAAA,QAAA,EAAA,UAAA,EAAY,GAAM,mBAAAT,cAAA,CAAC,cAAe,EAAA,EAAA,KAAA,EAAO,UAAY,EAAA,CAAA,GAAK,IAC7D,EAAA;AAAA,KAAA,EACF,CACF,EAAA,CAAA;AAAA,oBACAE,eAAA,CAACD,kBAAM,CAAA,MAAA,EAAN,EACC,QAAA,EAAA;AAAA,sBAACD,cAAA,CAAAC,kBAAA,CAAM,OAAN,EACC,QAAA,kBAAAD,cAAA,CAACe,uBAAO,OAAS,EAAA,OAAA,EAAS,OAAQ,EAAA,UAAA,EAC/B,QAAc,EAAA,aAAA,CAAA;AAAA,QACb,EAAI,EAAA,iDAAA;AAAA,QACJ,cAAgB,EAAA;AAAA,OACjB,GACH,CACF,EAAA,CAAA;AAAA,sBACCf,cAAA,CAAAe,mBAAA,EAAA,EAAO,OAAS,EAAA,YAAA,EACd,QAAc,EAAA,aAAA,CAAA;AAAA,QACb,EAAI,EAAA,yDAAA;AAAA,QACJ,cAAgB,EAAA;AAAA,OACjB,CACH,EAAA;AAAA,KACF,EAAA;AAAA,GACF,EAAA,CAAA;AAEJ,CAAA;AAUA,MAAM,cAAiB,GAAA,CAAC,EAAE,KAAA,EAAiC,KAAA;AACzD,EAAM,MAAA,EAAE,aAAc,EAAA,GAAIhB,iBAAQ,EAAA;AAElC,EAAA,uCACGsB,iBACC,EAAA,EAAA,QAAA,EAAA;AAAA,oBAACrB,cAAA,CAAAsB,uBAAA,EAAA,EACC,yCAACC,sBAAU,EAAA,EAAA,IAAA,EAAK,KAAI,GAAK,EAAA,KAAA,CAAM,KAAK,CACtC,EAAA,CAAA;AAAA,oCACCC,qBACC,EAAA,EAAA,QAAA,EAAA;AAAA,sBAAAtB,eAAA,CAACuB,wBACC,EAAA,EAAA,QAAA,EAAA;AAAA,wBAACzB,cAAA,CAAA0B,sBAAA,EAAA,EAAW,gBAAM,IAAK,EAAA,CAAA;AAAA,wBACtB1B,cAAA,CAAA2B,yBAAA,EAAA,EACE,QAAG,EAAA,CAAA,EAAA,KAAA,CAAM,GAAK,EAAA,WAAA,EAAa,CAAA,GAAA,EAAM,KAAM,CAAA,KAAK,CAAI,CAAA,EAAA,KAAA,CAAM,MAAM,CAC/D,CAAA,EAAA;AAAA,OACF,EAAA,CAAA;AAAA,sBACA3B,cAAA,CAAC4B,0BACE,QAAc,EAAA,aAAA,CAAA;AAAA,QACb,EAAI,EAAA,6DAAA;AAAA,QACJ,cAAgB,EAAA;AAAA,OACjB,CACH,EAAA;AAAA,KACF,EAAA;AAAA,GACF,EAAA,CAAA;AAEJ,CAAA;;AC1gBA,MAAM,kBAAkB,MAAM,IAAA;AAM9B,MAAM,sBAAsB,MAAM;AAChC,EAAM,MAAA,EAAE,UAAW,EAAA,GAAIC,iBAAY,EAAA;AACnC,EAAM,MAAA,EAAE,aAAc,EAAA,GAAI9B,iBAAQ,EAAA;AAClC,EAAA,MAAM,EAAE,KAAO,EAAA,WAAA,EAAa,qBAAsB,EAAA,GAAI+B,uBAAiB,qBAAqB,CAAA;AAC5F,EAAA,MAAM,CAAC,KAAA,EAAO,QAAQ,CAAA,GAAIhC,gBAAM,CAAA,QAAA,CAAS,EAAE,IAAA,EAAM,WAAY,CAAA,IAAA,EAAM,IAAM,EAAA,WAAA,CAAY,MAAM,CAAA;AAC3F,EAAA,MAAM,EAAE,QAAA,EAAa,GAAAiC,sBAAA,CAAYC,gCAAsB,CAAA;AAEvD,EAAA,MAAM,mBAAmBC,gBAAW,CAAA,qBAAA,EAAuB,CAAC,KAAA,KAAU,MAAM,gBAAgB,CAAA;AAC5F,EAAA,MAAM,sBAAyB,GAAAA,gBAAA;AAAA,IAC7B,qBAAA;AAAA,IACA,CAAC,UAAU,KAAM,CAAA;AAAA,GACnB;AACA,EAAA,MAAM,cAAcA,gBAAW,CAAA,qBAAA,EAAuB,CAAC,KAAA,KAAU,MAAM,WAAW,CAAA;AAClF,EAAA,MAAM,qBAAqBA,gBAAW,CAAA,qBAAA,EAAuB,CAAC,KAAA,KAAU,MAAM,kBAAkB,CAAA;AAChG,EAAA,MAAM,gBAAgBA,gBAAW,CAAA,qBAAA,EAAuB,CAAC,KAAA,KAAU,MAAM,aAAa,CAAA;AAEtF,EAAA,MAAM,aAAgB,GAAAC,2BAAA;AAAA,IACpB,eAAA;AAAA,IACA,YAEI,CAAA,MAAM,qCACJ,6BACF,EACA,EAAA;AAAA,GACN;AAEA,EAAM,MAAA;AAAA,IACJ,cAAA,EAAgB,EAAE,OAAA,EAAS,SAAU;AAAA,MACnCC,aAAQ,CAAA,QAAA,GAAW,SAAS,kBAAkB,CAAA,GAAI,EAAE,CAAA;AAExD,EAAM,MAAA,YAAA,GAAwD,CAAC,CAAM,KAAA;AACnE,IAAA,CAAA,CAAE,cAAe,EAAA;AAEjB,IAAsB,qBAAA,CAAA;AAAA,MACpB,QAAA,EAAU,KAAM,CAAA,IAAA,CAAK,MAAU,IAAA,IAAA;AAAA,MAC/B,QAAA,EAAU,KAAM,CAAA,IAAA,CAAK,MAAU,IAAA;AAAA,KAChC,CAAA;AAAA,GACH;AAEA,EAAA,MAAM,gBACJ,GAAA,CAAC,IACD,KAAA,CAAC,OAAY,KAAA;AAIX,IAAA,IAAI,YAAY,IAAM,EAAA;AACpB,MAAA,UAAA,CAAW,mBAAqB,EAAA;AAAA,QAC9B;AAAA,OACD,CAAA;AAAA;AAGH,IAAA,QAAA,CAAS,CAAC,IAAU,MAAA;AAAA,MAClB,GAAG,IAAA;AAAA,MACH,CAAC,IAAI,GAAG;AAAA,QACN,GAAG,KAAK,IAAI,CAAA;AAAA,QACZ,MAAQ,EAAA;AAAA;AACV,KACA,CAAA,CAAA;AAAA,GACJ;AAEF,EAAArC,gBAAA,CAAM,UAAU,MAAM;AACpB,IAAS,QAAA,CAAA;AAAA,MACP,MAAM,WAAY,CAAA,IAAA;AAAA,MAClB,MAAM,WAAY,CAAA;AAAA,KACnB,CAAA;AAAA,GACH,EAAG,CAAC,WAAW,CAAC,CAAA;AAGhB,EAAA,IAAI,CAAC,aAAe,EAAA;AAClB,IAAO,OAAA,IAAA;AAAA;AAGT,EAAM,MAAA,cAAA,GACJ,KAAM,CAAA,IAAA,CAAK,MAAW,KAAA,WAAA,CAAY,IAAK,CAAA,MAAA,IAAU,KAAM,CAAA,IAAA,CAAK,MAAW,KAAA,WAAA,CAAY,IAAK,CAAA,MAAA;AAE1F,EACE,uBAAAI,eAAA,CAACkC,aAAQ,CAAA,IAAA,EAAR,EACC,QAAA,EAAA;AAAA,oBAACpC,cAAA,CAAAqC,UAAA,CAAK,OAAL,EACE,QAAA,EAAA,aAAA;AAAA,MACC,EAAE,EAAA,EAAI,oBAAsB,EAAA,cAAA,EAAgB,mBAAoB,EAAA;AAAA,MAChE;AAAA,QACE,MAAM,aAAc,CAAA;AAAA,UAClB,EAAI,EAAA,6BAAA;AAAA,UACJ,cAAgB,EAAA;AAAA,SACjB;AAAA;AACH,KAEJ,EAAA,CAAA;AAAA,mCACCA,UAAK,CAAA,IAAA,EAAL,EACC,QAAC,kBAAAnC,eAAA,CAAA,MAAA,EAAA,EAAK,UAAU,YACd,EAAA,QAAA,EAAA;AAAA,sBAAAF,cAAA;AAAA,QAACoC,aAAQ,CAAA,MAAA;AAAA,QAAR;AAAA,UACC,OAAO,aAAc,CAAA;AAAA,YACnB,EAAI,EAAA,4BAAA;AAAA,YACJ,cAAgB,EAAA;AAAA,WACjB,CAAA;AAAA,UACD,UAAU,aAAc,CAAA;AAAA,YACtB,EAAI,EAAA,kCAAA;AAAA,YACJ,cAAgB,EAAA;AAAA,WACjB,CAAA;AAAA,UACD,eACE,SACE,oBAAApC,cAAA,CAACe,uBAAO,QAAU,EAAA,cAAA,EAAgB,MAAK,QAAS,EAAA,SAAA,iCAAYuB,WAAM,EAAA,EAAA,CAAA,EAC/D,wBAAc,EAAE,EAAA,EAAI,eAAe,cAAgB,EAAA,MAAA,EAAQ,CAC9D,EAAA;AAAA;AAAA,OAGN;AAAA,sBACAtC,cAAA,CAACoC,aAAQ,CAAA,OAAA,EAAR,EACC,QAAA,kBAAAlC,eAAA,CAACe,iBAAK,EAAA,EAAA,SAAA,EAAU,QAAS,EAAA,UAAA,EAAW,SAAU,EAAA,GAAA,EAAK,CACjD,EAAA,QAAA,EAAA;AAAA,wBAAAf,eAAA;AAAA,UAACe,iBAAA;AAAA,UAAA;AAAA,YACC,SAAU,EAAA,QAAA;AAAA,YACV,UAAW,EAAA,SAAA;AAAA,YACX,GAAK,EAAA,CAAA;AAAA,YACL,SAAS,EAAA,IAAA;AAAA,YACT,UAAW,EAAA,UAAA;AAAA,YACX,MAAO,EAAA,aAAA;AAAA,YACP,UAAY,EAAA,CAAA;AAAA,YACZ,aAAe,EAAA,CAAA;AAAA,YACf,YAAc,EAAA,CAAA;AAAA,YACd,WAAa,EAAA,CAAA;AAAA,YAEb,QAAA,EAAA;AAAA,8BAAAjB,cAAA,CAACmB,uBAAW,EAAA,EAAA,OAAA,EAAQ,OAAQ,EAAA,GAAA,EAAI,MAC7B,QAAc,EAAA,aAAA,CAAA;AAAA,gBACb,EAAI,EAAA,gBAAA;AAAA,gBACJ,cAAgB,EAAA;AAAA,eACjB,CACH,EAAA,CAAA;AAAA,8CAECoB,iBAAK,CAAA,IAAA,EAAL,EAAU,GAAK,EAAA,CAAA,EAAG,KAAI,IACrB,EAAA,QAAA,EAAA;AAAA,gCAACrC,eAAA,CAAAqC,iBAAA,CAAK,IAAL,EAAA,EAAU,GAAK,EAAA,CAAA,EAAG,GAAG,EAAI,EAAA,SAAA,EAAU,QAAS,EAAA,UAAA,EAAW,OACtD,EAAA,QAAA,EAAA;AAAA,kCAAAvC,cAAA,CAACmB,2BAAW,OAAQ,EAAA,OAAA,EAAQ,WAAU,YAAa,EAAA,GAAA,EAAI,MACpD,QAAc,EAAA,aAAA,CAAA;AAAA,oBACb,EAAI,EAAA,oCAAA;AAAA,oBACJ,cAAgB,EAAA;AAAA,mBACjB,CACH,EAAA,CAAA;AAAA,kCACAjB,eAAA,CAACe,qBAAK,GAAK,EAAA,CAAA,EAAG,WAAU,QAAS,EAAA,UAAA,EAAW,OAAQ,EAAA,GAAA,EAAI,IACtD,EAAA,QAAA,EAAA;AAAA,oCAAAf,eAAA,CAACiB,uBAAW,EAAA,EAAA,QAAA,EAAA;AAAA,sBAAA,GAAA;AAAA,sBAAE;AAAA,qBAAc,EAAA,CAAA;AAAA,oBAC3B,kBACC,oBAAAnB,cAAA;AAAA,sBAACwC,iBAAA;AAAA,sBAAA;AAAA,wBACC,IAAA,EAAM,iDAAiD,sBAAsB,CAAA,CAAA;AAAA,wBAC7E,OAAA,iCAAUC,kBAAa,EAAA,EAAA,CAAA;AAAA,wBAEtB,QAAc,EAAA,aAAA,CAAA;AAAA,0BACb,EAAI,EAAA,mCAAA;AAAA,0BACJ,cAAgB,EAAA;AAAA,yBACjB;AAAA;AAAA;AACH,mBAEJ,EAAA;AAAA,iBACF,EAAA,CAAA;AAAA,gCACAvC,eAAA,CAACqC,iBAAK,CAAA,IAAA,EAAL,EAAU,GAAA,EAAK,CAAG,EAAA,CAAA,EAAG,EAAI,EAAA,SAAA,EAAU,QAAS,EAAA,UAAA,EAAW,OACtD,EAAA,QAAA,EAAA;AAAA,kCAAAvC,cAAA,CAACmB,2BAAW,OAAQ,EAAA,OAAA,EAAQ,WAAU,YAAa,EAAA,GAAA,EAAI,MACpD,QAAc,EAAA,aAAA,CAAA;AAAA,oBACb,EAAI,EAAA,oCAAA;AAAA,oBACJ,cAAgB,EAAA;AAAA,mBACjB,CACH,EAAA,CAAA;AAAA,kCACAjB,eAAA,CAACe,qBAAK,GAAK,EAAA,CAAA,EAAG,WAAU,QAAS,EAAA,UAAA,EAAW,OAAQ,EAAA,GAAA,EAAI,IACtD,EAAA,QAAA,EAAA;AAAA,oCAAAjB,cAAA,CAACmB,uBACE,EAAA,EAAA,QAAA,EAAA,aAAA;AAAA,sBACC;AAAA,wBACE,EAAI,EAAA,+BAAA;AAAA,wBACJ,cACE,EAAA;AAAA,uBACJ;AAAA,sBACA,EAAE,gBAAiB;AAAA,qBAEvB,EAAA,CAAA;AAAA,oCACAnB,cAAA,CAACwC,qBAAK,IAAK,EAAA,uCAAA,EAAwC,yBAAUxC,cAAA,CAAAyC,kBAAA,EAAA,EAAa,GACvE,QAAc,EAAA,aAAA,CAAA;AAAA,sBACb,EAAI,EAAA,mCAAA;AAAA,sBACJ,cAAgB,EAAA;AAAA,qBACjB,CACH,EAAA;AAAA,mBACF,EAAA;AAAA,iBACF,EAAA,CAAA;AAAA,gCAEAvC,eAAA,CAACqC,iBAAK,CAAA,IAAA,EAAL,EAAU,GAAA,EAAK,CAAG,EAAA,CAAA,EAAG,EAAI,EAAA,SAAA,EAAU,QAAS,EAAA,UAAA,EAAW,OACtD,EAAA,QAAA,EAAA;AAAA,kCAAAvC,cAAA,CAACmB,2BAAW,OAAQ,EAAA,OAAA,EAAQ,WAAU,YAAa,EAAA,GAAA,EAAI,MACpD,QAAc,EAAA,aAAA,CAAA;AAAA,oBACb,EAAI,EAAA,mCAAA;AAAA,oBACJ,cAAgB,EAAA;AAAA,mBACjB,CACH,EAAA,CAAA;AAAA,kCACCnB,cAAA,CAAAmB,uBAAA,EAAA,EAAW,GAAI,EAAA,IAAA,EAAM,QAAY,EAAA,WAAA,EAAA;AAAA,iBACpC,EAAA,CAAA;AAAA,+CACC,aAAc,EAAA,EAAA;AAAA,eACjB,EAAA;AAAA;AAAA;AAAA,SACF;AAAA,QACC,OACC,oBAAAjB,eAAA;AAAA,UAACO,gBAAA;AAAA,UAAA;AAAA,YACC,SAAS,EAAA,IAAA;AAAA,YACT,UAAW,EAAA,UAAA;AAAA,YACX,MAAO,EAAA,aAAA;AAAA,YACP,UAAY,EAAA,CAAA;AAAA,YACZ,aAAe,EAAA,CAAA;AAAA,YACf,YAAc,EAAA,CAAA;AAAA,YACd,WAAa,EAAA,CAAA;AAAA,YAEb,QAAA,EAAA;AAAA,8BAAAT,cAAA,CAACmB,uBAAW,EAAA,EAAA,OAAA,EAAQ,OAAQ,EAAA,GAAA,EAAI,MAC7B,QAAc,EAAA,aAAA,CAAA;AAAA,gBACb,EAAI,EAAA,oCAAA;AAAA,gBACJ,cAAgB,EAAA;AAAA,eACjB,CACH,EAAA,CAAA;AAAA,8BACCnB,cAAA,CAAAmB,uBAAA,EAAA,EAAW,OAAQ,EAAA,IAAA,EAAK,WAAU,YAChC,EAAA,QAAA,EAAA,aAAA;AAAA,gBACC;AAAA,kBACE,EAAI,EAAA,iDAAA;AAAA,kBACJ,cACE,EAAA;AAAA,iBACJ;AAAA,gBACA,EAAE,SAAA,EAAW,SAAW,EAAA,IAAA,EAAM,IAAK;AAAA,eAEvC,EAAA,CAAA;AAAA,8CACCoB,iBAAK,CAAA,IAAA,EAAL,EAAU,UAAY,EAAA,CAAA,EAAG,KAAK,CAC7B,EAAA,QAAA,EAAA;AAAA,gCAACvC,cAAA,CAAAuC,iBAAA,CAAK,IAAL,EAAA,EAAU,GAAK,EAAA,CAAA,EAAG,GAAG,EAAI,EAAA,SAAA,EAAU,QAAS,EAAA,UAAA,EAAW,SACtD,EAAA,QAAA,kBAAAvC,cAAA;AAAA,kBAAC,SAAA;AAAA,kBAAA;AAAA,oBACC,SAAA;AAAA,oBACA,UAAA,EAAY,MAAM,IAAK,CAAA,MAAA;AAAA,oBACvB,WAAA,EAAa,MAAM,IAAK,CAAA,OAAA;AAAA,oBACxB,MAAM,aAAc,CAAA;AAAA,sBAClB,EAAI,EAAA,4DAAA;AAAA,sBACJ,cAAgB,EAAA;AAAA,qBACjB,CAAA;AAAA,oBACD,OAAO,aAAc,CAAA;AAAA,sBACnB,EAAI,EAAA,6DAAA;AAAA,sBACJ,cAAgB,EAAA;AAAA,qBACjB,CAAA;AAAA,oBACD,YAAA,EAAc,iBAAiB,MAAM;AAAA;AAAA,iBAEzC,EAAA,CAAA;AAAA,gCACAA,cAAA,CAACuC,iBAAK,CAAA,IAAA,EAAL,EAAU,GAAA,EAAK,CAAG,EAAA,CAAA,EAAG,EAAI,EAAA,SAAA,EAAU,QAAS,EAAA,UAAA,EAAW,SACtD,EAAA,QAAA,kBAAAvC,cAAA;AAAA,kBAAC,SAAA;AAAA,kBAAA;AAAA,oBACC,SAAA;AAAA,oBACA,UAAA,EAAY,MAAM,IAAK,CAAA,MAAA;AAAA,oBACvB,WAAA,EAAa,MAAM,IAAK,CAAA,OAAA;AAAA,oBACxB,MAAM,aAAc,CAAA;AAAA,sBAClB,EAAI,EAAA,4DAAA;AAAA,sBACJ,cAAgB,EAAA;AAAA,qBACjB,CAAA;AAAA,oBACD,OAAO,aAAc,CAAA;AAAA,sBACnB,EAAI,EAAA,6DAAA;AAAA,sBACJ,cAAgB,EAAA;AAAA,qBACjB,CAAA;AAAA,oBACD,YAAA,EAAc,iBAAiB,MAAM;AAAA;AAAA,iBAEzC,EAAA;AAAA,eACF,EAAA;AAAA;AAAA;AAAA;AACF,OAAA,EAEJ,CACF,EAAA;AAAA,KAAA,EACF,CACF,EAAA;AAAA,GACF,EAAA,CAAA;AAEJ;;;;"}