{
  "version": 3,
  "sources": ["../../../lodash/fp/mapValues.js", "../../../@strapi/content-manager/admin/src/constants/plugin.ts", "../../../@strapi/content-manager/admin/src/components/InjectionZone.tsx", "../../../@strapi/content-manager/admin/src/constants/attributes.ts", "../../../@strapi/content-manager/admin/src/constants/collections.ts", "../../../@strapi/content-manager/admin/src/features/DocumentRBAC.tsx", "../../../@strapi/content-manager/admin/src/services/api.ts", "../../../@strapi/content-manager/admin/src/services/documents.ts", "../../../@strapi/content-manager/admin/src/utils/api.ts", "../../../@strapi/content-manager/admin/src/utils/validation.ts", "../../../@strapi/content-manager/admin/src/services/init.ts", "../../../@strapi/content-manager/admin/src/hooks/useContentTypeSchema.ts", "../../../@strapi/content-manager/admin/src/constants/hooks.ts", "../../../@strapi/content-manager/admin/src/services/contentTypes.ts", "../../../@strapi/content-manager/admin/src/utils/attributes.ts", "../../../@strapi/content-manager/admin/src/hooks/useDocumentLayout.ts", "../../../@strapi/content-manager/admin/src/hooks/useDocument.ts", "../../../@strapi/content-manager/admin/src/utils/translations.ts", "../../../@strapi/content-manager/admin/src/hooks/useDocumentActions.ts", "../../../@strapi/content-manager/admin/src/history/routes.tsx", "../../../@strapi/content-manager/admin/src/preview/routes.tsx", "../../../@strapi/content-manager/admin/src/router.tsx", "../../../@strapi/content-manager/admin/src/pages/EditView/components/DocumentActions.tsx", "../../../@strapi/content-manager/admin/src/components/RelativeTime.tsx", "../../../@strapi/content-manager/admin/src/utils/users.ts", "../../../@strapi/content-manager/admin/src/utils/strings.ts", "../../../@strapi/content-manager/admin/src/pages/EditView/components/DocumentStatus.tsx", "../../../@strapi/content-manager/admin/src/pages/EditView/components/Header.tsx", "../../../@strapi/content-manager/admin/src/pages/EditView/components/Panels.tsx", "../../../@strapi/content-manager/admin/src/pages/ListView/components/BulkActions/ConfirmBulkActionDialog.tsx", "../../../@strapi/content-manager/admin/src/pages/ListView/components/BulkActions/PublishAction.tsx", "../../../@strapi/content-manager/admin/src/pages/ListView/components/BulkActions/Actions.tsx", "../../../@strapi/content-manager/admin/src/pages/ListView/components/AutoCloneFailureModal.tsx", "../../../@strapi/content-manager/admin/src/pages/ListView/components/TableActions.tsx", "../../../@strapi/content-manager/admin/src/content-manager.ts", "../../../@strapi/content-manager/admin/src/history/components/HistoryAction.tsx", "../../../@strapi/content-manager/admin/src/history/index.ts", "../../../@strapi/content-manager/admin/src/modules/app.ts", "../../../@strapi/content-manager/admin/src/modules/reducers.ts", "../../../@strapi/content-manager/admin/src/preview/services/preview.ts", "../../../@strapi/content-manager/admin/src/preview/components/PreviewSidePanel.tsx", "../../../@strapi/content-manager/admin/src/preview/index.ts", "../../../@strapi/content-manager/admin/src/index.ts"],
  "sourcesContent": ["var convert = require('./convert'),\n    func = convert('mapValues', require('../mapValues'));\n\nfunc.placeholder = require('./placeholder');\nmodule.exports = func;\n", "const PLUGIN_ID = 'content-manager';\n\nconst PERMISSIONS = [\n  'plugin::content-manager.explorer.create',\n  'plugin::content-manager.explorer.read',\n  'plugin::content-manager.explorer.update',\n  'plugin::content-manager.explorer.delete',\n  'plugin::content-manager.explorer.publish',\n];\n\nexport { PLUGIN_ID, PERMISSIONS };\n", "import { useStrapiApp, InjectionZoneComponent } from '@strapi/admin/strapi-admin';\n\nimport { PLUGIN_ID } from '../constants/plugin';\n\nconst INJECTION_ZONES = {\n  editView: { informations: [], 'right-links': [] },\n  listView: {\n    actions: [],\n    deleteModalAdditionalInfos: [],\n    publishModalAdditionalInfos: [],\n    unpublishModalAdditionalInfos: [],\n  },\n} satisfies InjectionZones;\n\ninterface InjectionZones {\n  editView: {\n    informations: InjectionZoneComponent[];\n    'right-links': InjectionZoneComponent[];\n  };\n  listView: {\n    actions: InjectionZoneComponent[];\n    deleteModalAdditionalInfos: InjectionZoneComponent[];\n    publishModalAdditionalInfos: InjectionZoneComponent[];\n    unpublishModalAdditionalInfos: InjectionZoneComponent[];\n  };\n}\n\ntype InjectionZoneArea =\n  | 'editView.informations'\n  | 'editView.right-links'\n  | 'listView.actions'\n  | 'listView.unpublishModalAdditionalInfos'\n  | 'listView.deleteModalAdditionalInfos'\n  | 'listView.publishModalAdditionalInfos'\n  | 'listView.deleteModalAdditionalInfos';\n\ntype InjectionZoneModule = InjectionZoneArea extends `${infer Word}.${string}` ? Word : never;\ntype InjectionZoneContainer = InjectionZoneArea extends `${string}.${infer Word}.${string}`\n  ? Word\n  : never;\ntype InjectionZoneBlock = InjectionZoneArea extends `${string}.${string}.${infer Word}`\n  ? Word\n  : never;\n\n/**\n * You can't know what this component props will be because it's generic and used everywhere\n * e.g. content-manager edit view, we just send the slug but we might not in the listView,\n * therefore, people should type it themselves on the components they render.\n */\nconst InjectionZone = ({ area, ...props }: { area: InjectionZoneArea; [key: string]: unknown }) => {\n  const components = useInjectionZone(area);\n\n  return (\n    <>\n      {components.map((component) => (\n        <component.Component key={component.name} {...props} />\n      ))}\n    </>\n  );\n};\n\nexport const useInjectionZone = (area: InjectionZoneArea) => {\n  const getPlugin = useStrapiApp('useInjectionZone', (state) => state.getPlugin);\n  const contentManagerPlugin = getPlugin(PLUGIN_ID);\n  const [page, position] = area.split('.') as [InjectionZoneContainer, InjectionZoneBlock];\n\n  return contentManagerPlugin.getInjectedComponents(page, position);\n};\n\nexport { InjectionZone, INJECTION_ZONES };\n\nexport type {\n  InjectionZoneArea,\n  InjectionZoneComponent,\n  InjectionZones,\n  InjectionZoneModule,\n  InjectionZoneContainer,\n  InjectionZoneBlock,\n};\n", "const ID = 'id';\n\nconst CREATED_BY_ATTRIBUTE_NAME = 'createdBy';\nconst UPDATED_BY_ATTRIBUTE_NAME = 'updatedBy';\n\nconst CREATOR_FIELDS = [CREATED_BY_ATTRIBUTE_NAME, UPDATED_BY_ATTRIBUTE_NAME];\n\nconst PUBLISHED_BY_ATTRIBUTE_NAME = 'publishedBy';\nconst CREATED_AT_ATTRIBUTE_NAME = 'createdAt';\nconst UPDATED_AT_ATTRIBUTE_NAME = 'updatedAt';\nconst PUBLISHED_AT_ATTRIBUTE_NAME = 'publishedAt';\n\nconst DOCUMENT_META_FIELDS = [\n  ID,\n  ...CREATOR_FIELDS,\n  PUBLISHED_BY_ATTRIBUTE_NAME,\n  CREATED_AT_ATTRIBUTE_NAME,\n  UPDATED_AT_ATTRIBUTE_NAME,\n  PUBLISHED_AT_ATTRIBUTE_NAME,\n];\n\n/**\n * List of attribute types that cannot be used as the main field.\n * Not sure the name could be any clearer.\n */\nconst ATTRIBUTE_TYPES_THAT_CANNOT_BE_MAIN_FIELD = [\n  'dynamiczone',\n  'json',\n  'text',\n  'relation',\n  'component',\n  'boolean',\n  'media',\n  'password',\n  'richtext',\n  'timestamp',\n  'blocks',\n];\n\nexport {\n  ATTRIBUTE_TYPES_THAT_CANNOT_BE_MAIN_FIELD,\n  CREATED_AT_ATTRIBUTE_NAME,\n  UPDATED_AT_ATTRIBUTE_NAME,\n  PUBLISHED_AT_ATTRIBUTE_NAME,\n  CREATED_BY_ATTRIBUTE_NAME,\n  UPDATED_BY_ATTRIBUTE_NAME,\n  PUBLISHED_BY_ATTRIBUTE_NAME,\n  CREATOR_FIELDS,\n  DOCUMENT_META_FIELDS,\n};\n", "const SINGLE_TYPES = 'single-types';\nconst COLLECTION_TYPES = 'collection-types';\n\nexport { SINGLE_TYPES, COLLECTION_TYPES };\n", "import * as React from 'react';\n\nimport {\n  useRBAC,\n  useAuth,\n  type Permission,\n  createContext,\n  Page,\n  useQueryParams,\n} from '@strapi/admin/strapi-admin';\nimport { useParams } from 'react-router-dom';\n\nimport type { Schema } from '@strapi/types';\n\n/**\n * The boolean values indicate the global actions a user can perform on the document.\n * The `string[]` values tell us specifically which fields the actions can be performed on,\n * for example, if the `canReadFields` array is empty, than no fields can be read by the user.\n * This can happen even if the user can read the document.\n */\ninterface DocumentRBACContextValue {\n  canCreate?: boolean;\n  canCreateFields: string[];\n  canDelete?: boolean;\n  canPublish?: boolean;\n  canRead?: boolean;\n  canReadFields: string[];\n  canUpdate?: boolean;\n  canUpdateFields: string[];\n  canUserAction: (\n    fieldName: string,\n    fieldsUserCanAction: string[],\n    fieldType: Schema.Attribute.Kind\n  ) => boolean;\n  isLoading: boolean;\n}\n\nconst [DocumentRBACProvider, useDocumentRBAC] = createContext<DocumentRBACContextValue>(\n  'DocumentRBAC',\n  {\n    canCreate: false,\n    canCreateFields: [],\n    canDelete: false,\n    canPublish: false,\n    canRead: false,\n    canReadFields: [],\n    canUpdate: false,\n    canUpdateFields: [],\n    canUserAction: () => false,\n    isLoading: false,\n  }\n);\n\ninterface DocumentRBACProps {\n  children: React.ReactNode;\n  permissions: Permission[] | null;\n}\n\n/**\n * @internal This component is not meant to be used outside of the Content Manager plugin.\n * It depends on knowing the slug/model of the content-type using the params of the URL.\n * If you do use the hook outside of the context, we default to `false` for all actions.\n *\n * It then creates an list of `can{Action}` that are passed to the context for consumption\n * within the app to enforce RBAC.\n */\nconst DocumentRBAC = ({ children, permissions }: DocumentRBACProps) => {\n  const { slug } = useParams<{ slug: string }>();\n\n  if (!slug) {\n    throw new Error('Cannot find the slug param in the URL');\n  }\n  const [{ rawQuery }] = useQueryParams<{ plugins?: { i18n?: { locale?: string } } }>();\n\n  const userPermissions = useAuth('DocumentRBAC', (state) => state.permissions);\n\n  const contentTypePermissions = React.useMemo(() => {\n    const contentTypePermissions = userPermissions.filter(\n      (permission) => permission.subject === slug\n    );\n    return contentTypePermissions.reduce<Record<string, Permission[]>>((acc, permission) => {\n      const [action] = permission.action.split('.').slice(-1);\n      return { ...acc, [action]: [permission] };\n    }, {});\n  }, [slug, userPermissions]);\n\n  const { isLoading, allowedActions } = useRBAC(\n    contentTypePermissions,\n    permissions ?? undefined,\n    // TODO: useRBAC context should be typed and built differently\n    // We are passing raw query as context to the hook so that it can\n    // rely on the locale provided from DocumentRBAC for its permission calculations.\n    rawQuery\n  );\n\n  const canCreateFields =\n    !isLoading && allowedActions.canCreate\n      ? extractAndDedupeFields(contentTypePermissions.create)\n      : [];\n\n  const canReadFields =\n    !isLoading && allowedActions.canRead ? extractAndDedupeFields(contentTypePermissions.read) : [];\n\n  const canUpdateFields =\n    !isLoading && allowedActions.canUpdate\n      ? extractAndDedupeFields(contentTypePermissions.update)\n      : [];\n\n  /**\n   * @description Checks if the user can perform an action on a field based on the field names\n   * provided as the second argument.\n   */\n  const canUserAction: DocumentRBACContextValue['canUserAction'] = React.useCallback(\n    (fieldName, fieldsUserCanAction, fieldType) => {\n      const name = removeNumericalStrings(fieldName.split('.'));\n\n      const componentFieldNames = fieldsUserCanAction\n        // filter out fields that aren't components (components are dot separated)\n        .filter((field) => field.split('.').length > 1);\n\n      if (fieldType === 'component') {\n        // check if the field name is within any of those arrays\n        return componentFieldNames.some((field) => {\n          return field.includes(name.join('.'));\n        });\n      }\n\n      /**\n       * The field is within a component.\n       */\n      if (name.length > 1) {\n        return componentFieldNames.includes(name.join('.'));\n      }\n\n      /**\n       * just a regular field\n       */\n      return fieldsUserCanAction.includes(fieldName);\n    },\n    []\n  );\n\n  if (isLoading) {\n    return <Page.Loading />;\n  }\n\n  return (\n    <DocumentRBACProvider\n      isLoading={isLoading}\n      canCreateFields={canCreateFields}\n      canReadFields={canReadFields}\n      canUpdateFields={canUpdateFields}\n      canUserAction={canUserAction}\n      {...allowedActions}\n    >\n      {children}\n    </DocumentRBACProvider>\n  );\n};\n\n/**\n * @internal it's really small, but it's used three times in a row and DRY for something this straight forward.\n */\nconst extractAndDedupeFields = (permissions: Permission[] = []) =>\n  permissions\n    .flatMap((permission) => permission.properties?.fields)\n    .filter(\n      (field, index, arr): field is string =>\n        arr.indexOf(field) === index && typeof field === 'string'\n    );\n\n/**\n * @internal removes numerical strings from arrays.\n * @example\n * ```ts\n * const name = 'a.0.b';\n * const res = removeNumericalStrings(name.split('.'));\n * console.log(res); // ['a', 'b']\n * ```\n */\nconst removeNumericalStrings = (arr: string[]) => arr.filter((item) => isNaN(Number(item)));\n\nexport { DocumentRBAC, useDocumentRBAC, DocumentRBACContextValue, DocumentRBACProps };\n", "import { adminApi } from '@strapi/admin/strapi-admin';\n\nconst contentManagerApi = adminApi.enhanceEndpoints({\n  addTagTypes: [\n    'ComponentConfiguration',\n    'ContentTypesConfiguration',\n    'ContentTypeSettings',\n    'Document',\n    'InitialData',\n    'HistoryVersion',\n    'Relations',\n    'UidAvailability',\n    'RecentDocumentList',\n  ],\n});\n\nexport { contentManagerApi };\n", "/**\n * Related to fetching the actual content of a collection type or single type.\n */\nimport { stringify } from 'qs';\n\nimport { SINGLE_TYPES } from '../constants/collections';\n\nimport { contentManagerApi } from './api';\n\nimport type {\n  Clone,\n  Create,\n  Delete,\n  Find,\n  FindOne,\n  BulkDelete,\n  BulkPublish,\n  BulkUnpublish,\n  Discard,\n  CountDraftRelations,\n  CountManyEntriesDraftRelations,\n  Publish,\n  Unpublish,\n  Update,\n} from '../../../shared/contracts/collection-types';\n\nconst documentApi = contentManagerApi.injectEndpoints({\n  overrideExisting: true,\n  endpoints: (builder) => ({\n    autoCloneDocument: builder.mutation<Clone.Response, Clone.Params & { query?: string }>({\n      query: ({ model, sourceId, query }) => ({\n        url: `/content-manager/collection-types/${model}/auto-clone/${sourceId}`,\n        method: 'POST',\n        config: {\n          params: query,\n        },\n      }),\n      invalidatesTags: (_result, error, { model }) => {\n        if (error) {\n          return [];\n        }\n\n        return [{ type: 'Document', id: `${model}_LIST` }, 'RecentDocumentList'];\n      },\n    }),\n    cloneDocument: builder.mutation<\n      Clone.Response,\n      Clone.Params & {\n        data: Clone.Request['body'];\n        params?: Clone.Request['query'];\n      }\n    >({\n      query: ({ model, sourceId, data, params }) => ({\n        url: `/content-manager/collection-types/${model}/clone/${sourceId}`,\n        method: 'POST',\n        data,\n        config: {\n          params,\n        },\n      }),\n      invalidatesTags: (_result, _error, { model }) => [\n        { type: 'Document', id: `${model}_LIST` },\n        { type: 'UidAvailability', id: model },\n        'RecentDocumentList',\n      ],\n    }),\n    /**\n     * Creates a new collection-type document. This should ONLY be used for collection-types.\n     * single-types should always be using `updateDocument` since they always exist.\n     */\n    createDocument: builder.mutation<\n      Create.Response,\n      Create.Params & {\n        data: Create.Request['body'];\n        params?: Create.Request['query'];\n      }\n    >({\n      query: ({ model, data, params }) => ({\n        url: `/content-manager/collection-types/${model}`,\n        method: 'POST',\n        data,\n        config: {\n          params,\n        },\n      }),\n      invalidatesTags: (result, _error, { model }) => [\n        { type: 'Document', id: `${model}_LIST` },\n        'Relations',\n        { type: 'UidAvailability', id: model },\n        'RecentDocumentList',\n      ],\n      transformResponse: (response: Create.Response, meta, arg): Create.Response => {\n        /**\n         * TODO v6\n         * Adapt plugin:users-permissions.user to return the same response\n         * shape as all other requests. The error is returned as expected.\n         */\n        if (!('data' in response) && arg.model === 'plugin::users-permissions.user') {\n          return {\n            data: response,\n            meta: {\n              availableStatus: [],\n              availableLocales: [],\n            },\n          };\n        }\n\n        return response;\n      },\n    }),\n    deleteDocument: builder.mutation<\n      Delete.Response,\n      Pick<Delete.Params, 'model'> &\n        Pick<Partial<Delete.Params>, 'documentId'> & {\n          collectionType: string;\n          params?: Find.Request['query'];\n        }\n    >({\n      query: ({ collectionType, model, documentId, params }) => ({\n        url: `/content-manager/${collectionType}/${model}${\n          collectionType !== SINGLE_TYPES && documentId ? `/${documentId}` : ''\n        }`,\n        method: 'DELETE',\n        config: {\n          params,\n        },\n      }),\n      invalidatesTags: (_result, _error, { collectionType, model }) => [\n        { type: 'Document', id: collectionType !== SINGLE_TYPES ? `${model}_LIST` : model },\n        'RecentDocumentList',\n      ],\n    }),\n    deleteManyDocuments: builder.mutation<\n      BulkDelete.Response,\n      BulkDelete.Params & BulkDelete.Request['body'] & { params?: Find.Request['query'] }\n    >({\n      query: ({ model, params, ...body }) => ({\n        url: `/content-manager/collection-types/${model}/actions/bulkDelete`,\n        method: 'POST',\n        data: body,\n        config: {\n          params,\n        },\n      }),\n      invalidatesTags: (_res, _error, { model }) => [\n        { type: 'Document', id: `${model}_LIST` },\n        'RecentDocumentList',\n      ],\n    }),\n    discardDocument: builder.mutation<\n      Discard.Response,\n      Pick<Discard.Params, 'model'> &\n        Partial<Pick<Discard.Params, 'documentId'>> & {\n          collectionType: string;\n          params?: Find.Request['query'] & {\n            [key: string]: any;\n          };\n        }\n    >({\n      query: ({ collectionType, model, documentId, params }) => ({\n        url: documentId\n          ? `/content-manager/${collectionType}/${model}/${documentId}/actions/discard`\n          : `/content-manager/${collectionType}/${model}/actions/discard`,\n        method: 'POST',\n        config: {\n          params,\n        },\n      }),\n      invalidatesTags: (_result, _error, { collectionType, model, documentId }) => {\n        return [\n          {\n            type: 'Document',\n            id: collectionType !== SINGLE_TYPES ? `${model}_${documentId}` : model,\n          },\n          { type: 'Document', id: `${model}_LIST` },\n          'Relations',\n          { type: 'UidAvailability', id: model },\n          'RecentDocumentList',\n        ];\n      },\n    }),\n    /**\n     * Gets all documents of a collection type or single type.\n     * By passing different params you can get different results e.g. only published documents or 'es' documents.\n     */\n    getAllDocuments: builder.query<\n      Find.Response,\n      Find.Params & {\n        params?: Find.Request['query'] & {\n          [key: string]: any;\n        };\n      }\n    >({\n      query: ({ model, params }) => ({\n        url: `/content-manager/collection-types/${model}`,\n        method: 'GET',\n        config: {\n          params: stringify(params, { encode: true }),\n        },\n      }),\n      providesTags: (result, _error, arg) => {\n        return [\n          { type: 'Document', id: `ALL_LIST` },\n          { type: 'Document', id: `${arg.model}_LIST` },\n          ...(result?.results.map(({ documentId }) => ({\n            type: 'Document' as const,\n            id: `${arg.model}_${documentId}`,\n          })) ?? []),\n        ];\n      },\n    }),\n    getDraftRelationCount: builder.query<\n      CountDraftRelations.Response,\n      {\n        collectionType: string;\n        model: string;\n        /**\n         * You don't pass the documentId if the document is a single-type\n         */\n        documentId?: string;\n        params?: CountDraftRelations.Request['query'];\n      }\n    >({\n      query: ({ collectionType, model, documentId, params }) => ({\n        url: documentId\n          ? `/content-manager/${collectionType}/${model}/${documentId}/actions/countDraftRelations`\n          : `/content-manager/${collectionType}/${model}/actions/countDraftRelations`,\n        method: 'GET',\n        config: {\n          params,\n        },\n      }),\n    }),\n    getDocument: builder.query<\n      FindOne.Response,\n      Pick<FindOne.Params, 'model'> &\n        Partial<Pick<FindOne.Params, 'documentId'>> & {\n          collectionType: string;\n          params?: FindOne.Request['query'];\n        }\n    >({\n      // @ts-expect-error – TODO: fix ts error where data unknown doesn't work with response via an assertion?\n      queryFn: async (\n        { collectionType, model, documentId, params },\n        _api,\n        _extraOpts,\n        baseQuery\n      ) => {\n        const res = await baseQuery({\n          url: `/content-manager/${collectionType}/${model}${documentId ? `/${documentId}` : ''}`,\n          method: 'GET',\n          config: {\n            params,\n          },\n        });\n\n        /**\n         * To stop the query from locking itself in multiple retries, we intercept the error here and manage correctly.\n         * This is because single-types don't have a list view and fetching them with the route `/single-types/:model`\n         * never returns a list, just a single document but this won't exist if you've not made one before.\n         */\n        if (res.error && res.error.name === 'NotFoundError' && collectionType === SINGLE_TYPES) {\n          return { data: { document: undefined }, error: undefined };\n        }\n\n        return res;\n      },\n      providesTags: (result, _error, { collectionType, model, documentId }) => {\n        return [\n          // we prefer the result's id because we don't fetch single-types with an ID.\n          {\n            type: 'Document',\n            id:\n              collectionType !== SINGLE_TYPES\n                ? `${model}_${result && 'documentId' in result ? result.documentId : documentId}`\n                : model,\n          },\n          // Make it easy to invalidate all individual documents queries for a model\n          {\n            type: 'Document',\n            id: `${model}_ALL_ITEMS`,\n          },\n        ];\n      },\n    }),\n    getManyDraftRelationCount: builder.query<\n      CountManyEntriesDraftRelations.Response['data'],\n      CountManyEntriesDraftRelations.Request['query'] & {\n        model: string;\n      }\n    >({\n      query: ({ model, ...params }) => ({\n        url: `/content-manager/collection-types/${model}/actions/countManyEntriesDraftRelations`,\n        method: 'GET',\n        config: {\n          params,\n        },\n      }),\n      transformResponse: (response: CountManyEntriesDraftRelations.Response) => response.data,\n    }),\n    /**\n     * This endpoint will either create or update documents at the same time as publishing.\n     */\n    publishDocument: builder.mutation<\n      Publish.Response,\n      Pick<Publish.Params, 'model'> &\n        Partial<Pick<Publish.Params, 'documentId'>> & {\n          collectionType: string;\n          data: Publish.Request['body'];\n          params?: Publish.Request['query'];\n        }\n    >({\n      query: ({ collectionType, model, documentId, params, data }) => ({\n        url: documentId\n          ? `/content-manager/${collectionType}/${model}/${documentId}/actions/publish`\n          : `/content-manager/${collectionType}/${model}/actions/publish`,\n        method: 'POST',\n        data,\n        config: {\n          params,\n        },\n      }),\n      invalidatesTags: (_result, _error, { collectionType, model, documentId }) => {\n        return [\n          {\n            type: 'Document',\n            id: collectionType !== SINGLE_TYPES ? `${model}_${documentId}` : model,\n          },\n          { type: 'Document', id: `${model}_LIST` },\n          'Relations',\n          'RecentDocumentList',\n        ];\n      },\n    }),\n    publishManyDocuments: builder.mutation<\n      BulkPublish.Response,\n      BulkPublish.Params & BulkPublish.Request['body'] & { params?: BulkPublish.Request['query'] }\n    >({\n      query: ({ model, params, ...body }) => ({\n        url: `/content-manager/collection-types/${model}/actions/bulkPublish`,\n        method: 'POST',\n        data: body,\n        config: {\n          params,\n        },\n      }),\n      invalidatesTags: (_res, _error, { model, documentIds }) =>\n        documentIds.map((id) => ({ type: 'Document', id: `${model}_${id}` })),\n    }),\n    updateDocument: builder.mutation<\n      Update.Response,\n      Pick<Update.Params, 'model'> &\n        Partial<Pick<Update.Params, 'documentId'>> & {\n          collectionType: string;\n          data: Update.Request['body'];\n          params?: Update.Request['query'];\n        }\n    >({\n      query: ({ collectionType, model, documentId, data, params }) => ({\n        url: `/content-manager/${collectionType}/${model}${documentId ? `/${documentId}` : ''}`,\n        method: 'PUT',\n        data,\n        config: {\n          params,\n        },\n      }),\n      invalidatesTags: (_result, _error, { collectionType, model, documentId }) => {\n        return [\n          {\n            type: 'Document',\n            id: collectionType !== SINGLE_TYPES ? `${model}_${documentId}` : model,\n          },\n          'Relations',\n          { type: 'UidAvailability', id: model },\n          'RecentDocumentList',\n          'RecentDocumentList',\n        ];\n      },\n      async onQueryStarted({ data, ...patch }, { dispatch, queryFulfilled }) {\n        // Optimistically update the cache with the new data\n        const patchResult = dispatch(\n          documentApi.util.updateQueryData('getDocument', patch, (draft) => {\n            Object.assign(draft.data, data);\n          })\n        );\n        try {\n          await queryFulfilled;\n        } catch {\n          // Rollback the optimistic update if there's an error\n          patchResult.undo();\n        }\n      },\n    }),\n    unpublishDocument: builder.mutation<\n      Unpublish.Response,\n      Pick<Unpublish.Params, 'model'> &\n        Partial<Pick<Unpublish.Params, 'documentId'>> & {\n          collectionType: string;\n          params?: Unpublish.Request['query'];\n          data: Unpublish.Request['body'];\n        }\n    >({\n      query: ({ collectionType, model, documentId, params, data }) => ({\n        url: documentId\n          ? `/content-manager/${collectionType}/${model}/${documentId}/actions/unpublish`\n          : `/content-manager/${collectionType}/${model}/actions/unpublish`,\n        method: 'POST',\n        data,\n        config: {\n          params,\n        },\n      }),\n      invalidatesTags: (_result, _error, { collectionType, model, documentId }) => {\n        return [\n          {\n            type: 'Document',\n            id: collectionType !== SINGLE_TYPES ? `${model}_${documentId}` : model,\n          },\n          'RecentDocumentList',\n        ];\n      },\n    }),\n    unpublishManyDocuments: builder.mutation<\n      BulkUnpublish.Response,\n      Pick<BulkUnpublish.Params, 'model'> &\n        BulkUnpublish.Request['body'] & {\n          params?: BulkUnpublish.Request['query'];\n        }\n    >({\n      query: ({ model, params, ...body }) => ({\n        url: `/content-manager/collection-types/${model}/actions/bulkUnpublish`,\n        method: 'POST',\n        data: body,\n        config: {\n          params,\n        },\n      }),\n      invalidatesTags: (_res, _error, { model, documentIds }) => [\n        ...documentIds.map((id) => ({ type: 'Document' as const, id: `${model}_${id}` })),\n        'RecentDocumentList',\n      ],\n    }),\n  }),\n});\n\nconst {\n  useAutoCloneDocumentMutation,\n  useCloneDocumentMutation,\n  useCreateDocumentMutation,\n  useDeleteDocumentMutation,\n  useDeleteManyDocumentsMutation,\n  useDiscardDocumentMutation,\n  useGetAllDocumentsQuery,\n  useLazyGetDocumentQuery,\n  useGetDocumentQuery,\n  useLazyGetDraftRelationCountQuery,\n  useGetManyDraftRelationCountQuery,\n  usePublishDocumentMutation,\n  usePublishManyDocumentsMutation,\n  useUpdateDocumentMutation,\n  useUnpublishDocumentMutation,\n  useUnpublishManyDocumentsMutation,\n} = documentApi;\n\nexport {\n  useAutoCloneDocumentMutation,\n  useCloneDocumentMutation,\n  useCreateDocumentMutation,\n  useDeleteDocumentMutation,\n  useDeleteManyDocumentsMutation,\n  useDiscardDocumentMutation,\n  useGetAllDocumentsQuery,\n  useLazyGetDocumentQuery,\n  useGetDocumentQuery,\n  useLazyGetDraftRelationCountQuery as useGetDraftRelationCountQuery,\n  useGetManyDraftRelationCountQuery,\n  usePublishDocumentMutation,\n  usePublishManyDocumentsMutation,\n  useUpdateDocumentMutation,\n  useUnpublishDocumentMutation,\n  useUnpublishManyDocumentsMutation,\n};\n", "import { SerializedError } from '@reduxjs/toolkit';\nimport { ApiError, type UnknownApiError } from '@strapi/admin/strapi-admin';\n\ninterface Query {\n  plugins?: Record<string, unknown>;\n  _q?: string;\n  [key: string]: any;\n}\n\n/**\n * This type extracts the plugin options from the query\n * and appends them to the root of the query\n */\ntype TransformedQuery<TQuery extends Query> = Omit<TQuery, 'plugins'> & {\n  [key: string]: string;\n};\n\n/**\n * @description\n * Creates a valid query params object for get requests\n * ie. plugins[18n][locale]=en becomes locale=en\n */\nconst buildValidParams = <TQuery extends Query>(query: TQuery): TransformedQuery<TQuery> => {\n  if (!query) return query;\n\n  // Extract pluginOptions from the query, they shouldn't be part of the URL\n  const { plugins: _, ...validQueryParams } = {\n    ...query,\n    ...Object.values(query?.plugins ?? {}).reduce<Record<string, string>>(\n      (acc, current) => Object.assign(acc, current),\n      {}\n    ),\n  };\n\n  return validQueryParams;\n};\n\ntype BaseQueryError = ApiError | UnknownApiError;\n\nconst isBaseQueryError = (error: BaseQueryError | SerializedError): error is BaseQueryError => {\n  return error.name !== undefined;\n};\n\nexport { isBaseQueryError, buildValidParams };\nexport type { BaseQueryError, UnknownApiError };\n", "import { translatedErrors } from '@strapi/admin/strapi-admin';\nimport pipe from 'lodash/fp/pipe';\nimport * as yup from 'yup';\n\nimport { DOCUMENT_META_FIELDS } from '../constants/attributes';\n\nimport type { ComponentsDictionary, Schema } from '../hooks/useDocument';\nimport type { Schema as SchemaUtils } from '@strapi/types';\nimport type { ObjectShape } from 'yup/lib/object';\n\ntype AnySchema =\n  | yup.StringSchema\n  | yup.NumberSchema\n  | yup.BooleanSchema\n  | yup.DateSchema\n  | yup.ArraySchema<any>\n  | yup.ObjectSchema<any>;\n\n/* -------------------------------------------------------------------------------------------------\n * createYupSchema\n * -----------------------------------------------------------------------------------------------*/\n\ninterface ValidationOptions {\n  status: 'draft' | 'published' | null;\n}\n\nconst arrayValidator = (attribute: Schema['attributes'][string], options: ValidationOptions) => ({\n  message: translatedErrors.required,\n  test(value: unknown) {\n    if (options.status === 'draft') {\n      return true;\n    }\n\n    if (!attribute.required) {\n      return true;\n    }\n\n    if (!value) {\n      return false;\n    }\n\n    if (Array.isArray(value) && value.length === 0) {\n      return false;\n    }\n\n    return true;\n  },\n});\n\n/**\n * TODO: should we create a Map to store these based on the hash of the schema?\n */\nconst createYupSchema = (\n  attributes: Schema['attributes'] = {},\n  components: ComponentsDictionary = {},\n  options: ValidationOptions = { status: null }\n): yup.ObjectSchema<any> => {\n  const createModelSchema = (attributes: Schema['attributes']): yup.ObjectSchema<any> =>\n    yup\n      .object()\n      .shape(\n        Object.entries(attributes).reduce<ObjectShape>((acc, [name, attribute]) => {\n          if (DOCUMENT_META_FIELDS.includes(name)) {\n            return acc;\n          }\n\n          /**\n           * These validations won't apply to every attribute\n           * and that's okay, in that case we just return the\n           * schema as it was passed.\n           */\n          const validations = [\n            addNullableValidation,\n            addRequiredValidation,\n            addMinLengthValidation,\n            addMaxLengthValidation,\n            addMinValidation,\n            addMaxValidation,\n            addRegexValidation,\n          ].map((fn) => fn(attribute, options));\n\n          const transformSchema = pipe(...validations);\n\n          switch (attribute.type) {\n            case 'component': {\n              const { attributes } = components[attribute.component];\n\n              if (attribute.repeatable) {\n                return {\n                  ...acc,\n                  [name]: transformSchema(\n                    yup.array().of(createModelSchema(attributes).nullable(false))\n                  ).test(arrayValidator(attribute, options)),\n                };\n              } else {\n                return {\n                  ...acc,\n                  [name]: transformSchema(createModelSchema(attributes).nullable()),\n                };\n              }\n            }\n            case 'dynamiczone':\n              return {\n                ...acc,\n                [name]: transformSchema(\n                  yup.array().of(\n                    yup.lazy(\n                      (\n                        data: SchemaUtils.Attribute.Value<SchemaUtils.Attribute.DynamicZone>[number]\n                      ) => {\n                        const attributes = components?.[data?.__component]?.attributes;\n\n                        const validation = yup\n                          .object()\n                          .shape({\n                            __component: yup.string().required().oneOf(Object.keys(components)),\n                          })\n                          .nullable(false);\n                        if (!attributes) {\n                          return validation;\n                        }\n\n                        return validation.concat(createModelSchema(attributes));\n                      }\n                    ) as unknown as yup.ObjectSchema<any>\n                  )\n                ).test(arrayValidator(attribute, options)),\n              };\n            case 'relation':\n              return {\n                ...acc,\n                [name]: transformSchema(\n                  yup.lazy((value) => {\n                    if (!value) {\n                      return yup.mixed().nullable(true);\n                    } else if (Array.isArray(value)) {\n                      // If a relation value is an array, we expect\n                      // an array of objects with {id} properties, representing the related entities.\n                      return yup.array().of(\n                        yup.object().shape({\n                          id: yup.number().required(),\n                        })\n                      );\n                    } else if (typeof value === 'object') {\n                      // A realtion value can also be an object. Some API\n                      // repsonses return the number of entities in the relation\n                      // as { count: x }\n                      return yup.object();\n                    } else {\n                      return yup\n                        .mixed()\n                        .test(\n                          'type-error',\n                          'Relation values must be either null, an array of objects with {id} or an object.',\n                          () => false\n                        );\n                    }\n                  })\n                ),\n              };\n            default:\n              return {\n                ...acc,\n                [name]: transformSchema(createAttributeSchema(attribute)),\n              };\n          }\n        }, {})\n      )\n      /**\n       * TODO: investigate why an undefined object fails a check of `nullable`.\n       */\n      .default(null);\n\n  return createModelSchema(attributes);\n};\n\nconst createAttributeSchema = (\n  attribute: Exclude<\n    SchemaUtils.Attribute.AnyAttribute,\n    { type: 'dynamiczone' } | { type: 'component' } | { type: 'relation' }\n  >\n) => {\n  switch (attribute.type) {\n    case 'biginteger':\n      return yup.string().matches(/^-?\\d*$/);\n    case 'boolean':\n      return yup.boolean();\n    case 'blocks':\n      return yup.mixed().test('isBlocks', translatedErrors.json, (value) => {\n        if (!value || Array.isArray(value)) {\n          return true;\n        } else {\n          return false;\n        }\n      });\n    case 'decimal':\n    case 'float':\n    case 'integer':\n      return yup.number();\n    case 'email':\n      return yup.string().email(translatedErrors.email);\n    case 'enumeration':\n      return yup.string().oneOf([...attribute.enum, null]);\n    case 'json':\n      return yup.mixed().test('isJSON', translatedErrors.json, (value) => {\n        /**\n         * We don't want to validate the JSON field if it's empty.\n         */\n        if (!value || (typeof value === 'string' && value.length === 0)) {\n          return true;\n        }\n\n        // If the value was created via content API and wasn't changed, then it's still an object\n        if (typeof value === 'object') {\n          try {\n            JSON.stringify(value);\n            return true;\n          } catch (err) {\n            return false;\n          }\n        }\n\n        try {\n          JSON.parse(value);\n\n          return true;\n        } catch (err) {\n          return false;\n        }\n      });\n    case 'password':\n    case 'richtext':\n    case 'string':\n    case 'text':\n      return yup.string();\n    case 'uid':\n      return yup.string().matches(/^[A-Za-z0-9-_.~]*$/);\n    default:\n      /**\n       * This allows any value.\n       */\n      return yup.mixed();\n  }\n};\n\n// Helper function to return schema.nullable() if it exists, otherwise return schema\nconst nullableSchema = <TSchema extends AnySchema>(schema: TSchema) => {\n  return schema?.nullable\n    ? schema.nullable()\n    : // In some cases '.nullable' will not be available on the schema.\n      // e.g. when the schema has been built using yup.lazy (e.g. for relations).\n      // In these cases we should just return the schema as it is.\n      schema;\n};\n\n/* -------------------------------------------------------------------------------------------------\n * Validators\n * -----------------------------------------------------------------------------------------------*/\n/**\n * Our validator functions can be preped with the\n * attribute and then have the schema piped through them.\n */\ntype ValidationFn = (\n  attribute: Schema['attributes'][string],\n  options: ValidationOptions\n) => <TSchema extends AnySchema>(schema: TSchema) => TSchema;\n\nconst addNullableValidation: ValidationFn = () => (schema) => {\n  return nullableSchema(schema);\n};\n\nconst addRequiredValidation: ValidationFn = (attribute, options) => (schema) => {\n  if (options.status === 'draft' || !attribute.required) {\n    return schema;\n  }\n\n  if (attribute.required && 'required' in schema) {\n    return schema.required(translatedErrors.required);\n  }\n\n  return schema;\n};\n\nconst addMinLengthValidation: ValidationFn =\n  (attribute, options) =>\n  <TSchema extends AnySchema>(schema: TSchema): TSchema => {\n    // Skip minLength validation for draft\n    if (options.status === 'draft') {\n      return schema;\n    }\n\n    if (\n      'minLength' in attribute &&\n      attribute.minLength &&\n      Number.isInteger(attribute.minLength) &&\n      'min' in schema\n    ) {\n      return schema.min(attribute.minLength, {\n        ...translatedErrors.minLength,\n        values: {\n          min: attribute.minLength,\n        },\n      }) as TSchema;\n    }\n\n    return schema;\n  };\n\nconst addMaxLengthValidation: ValidationFn =\n  (attribute) =>\n  <TSchema extends AnySchema>(schema: TSchema): TSchema => {\n    if (\n      'maxLength' in attribute &&\n      attribute.maxLength &&\n      Number.isInteger(attribute.maxLength) &&\n      'max' in schema\n    ) {\n      return schema.max(attribute.maxLength, {\n        ...translatedErrors.maxLength,\n        values: {\n          max: attribute.maxLength,\n        },\n      }) as TSchema;\n    }\n\n    return schema;\n  };\n\nconst addMinValidation: ValidationFn =\n  (attribute, options) =>\n  <TSchema extends AnySchema>(schema: TSchema): TSchema => {\n    // do not validate min for draft\n    if (options.status === 'draft') {\n      return schema;\n    }\n\n    if ('min' in attribute && 'min' in schema) {\n      const min = toInteger(attribute.min);\n\n      if (min) {\n        return schema.min(min, {\n          ...translatedErrors.min,\n          values: {\n            min,\n          },\n        }) as TSchema;\n      }\n    }\n\n    return schema;\n  };\n\nconst addMaxValidation: ValidationFn =\n  (attribute) =>\n  <TSchema extends AnySchema>(schema: TSchema): TSchema => {\n    if ('max' in attribute) {\n      const max = toInteger(attribute.max);\n\n      if ('max' in schema && max) {\n        return schema.max(max, {\n          ...translatedErrors.max,\n          values: {\n            max,\n          },\n        }) as TSchema;\n      }\n    }\n\n    return schema;\n  };\n\nconst toInteger = (val?: string | number): number | undefined => {\n  if (typeof val === 'number' || val === undefined) {\n    return val;\n  } else {\n    const num = Number(val);\n    return isNaN(num) ? undefined : num;\n  }\n};\n\nconst addRegexValidation: ValidationFn =\n  (attribute) =>\n  <TSchema extends AnySchema>(schema: TSchema): TSchema => {\n    if ('regex' in attribute && attribute.regex && 'matches' in schema) {\n      return schema.matches(new RegExp(attribute.regex), {\n        message: {\n          id: translatedErrors.regex.id,\n          defaultMessage: 'The value does not match the defined pattern.',\n        },\n\n        excludeEmptyString: !attribute.required,\n      }) as TSchema;\n    }\n\n    return schema;\n  };\n\nexport { createYupSchema };\n", "import { contentManagerApi } from './api';\n\nimport type { GetInitData } from '../../../shared/contracts/init';\n\nconst initApi = contentManagerApi.injectEndpoints({\n  endpoints: (builder) => ({\n    getInitialData: builder.query<GetInitData.Response['data'], void>({\n      query: () => '/content-manager/init',\n      transformResponse: (response: GetInitData.Response) => response.data,\n      providesTags: ['InitialData'],\n    }),\n  }),\n});\n\nconst { useGetInitialDataQuery } = initApi;\n\nexport { useGetInitialDataQuery };\n", "import * as React from 'react';\n\nimport { useNotification, useAPIErrorHandler } from '@strapi/admin/strapi-admin';\n\nimport { useGetInitialDataQuery } from '../services/init';\n\nimport type { Component } from '../../../shared/contracts/components';\nimport type { ContentType } from '../../../shared/contracts/content-types';\nimport type { Schema } from '@strapi/types';\n\n/* -------------------------------------------------------------------------------------------------\n * useContentTypeSchema\n * -----------------------------------------------------------------------------------------------*/\ntype ComponentsDictionary = Record<string, Component>;\n\n/**\n * @internal\n * @description Given a model UID, return the schema and the schemas\n * of the associated components within said model's schema. A wrapper\n * implementation around the `useGetInitialDataQuery` with a unique\n * `selectFromResult` function to memoize the calculation.\n *\n * If no model is provided, the hook will return all the schemas.\n */\nconst useContentTypeSchema = (model?: string) => {\n  const { toggleNotification } = useNotification();\n  const { _unstableFormatAPIError: formatAPIError } = useAPIErrorHandler();\n\n  const { data, error, isLoading, isFetching } = useGetInitialDataQuery(undefined);\n\n  const { components, contentType, contentTypes } = React.useMemo(() => {\n    const contentType = data?.contentTypes.find((ct) => ct.uid === model);\n\n    const componentsByKey = data?.components.reduce<ComponentsDictionary>((acc, component) => {\n      acc[component.uid] = component;\n\n      return acc;\n    }, {});\n\n    const components = extractContentTypeComponents(contentType?.attributes, componentsByKey);\n\n    return {\n      components: Object.keys(components).length === 0 ? undefined : components,\n      contentType,\n      contentTypes: data?.contentTypes ?? [],\n    };\n  }, [model, data]);\n\n  React.useEffect(() => {\n    if (error) {\n      toggleNotification({\n        type: 'danger',\n        message: formatAPIError(error),\n      });\n    }\n  }, [toggleNotification, error, formatAPIError]);\n\n  return {\n    // This must be memoized to avoid inifiinite re-renders where the empty object is different everytime.\n    components: React.useMemo(() => components ?? {}, [components]),\n    schema: contentType,\n    schemas: contentTypes,\n    isLoading: isLoading || isFetching,\n  };\n};\n\n/* -------------------------------------------------------------------------------------------------\n * extractContentTypeComponents\n * -----------------------------------------------------------------------------------------------*/\n/**\n * @internal\n * @description Extracts the components used in a content type's attributes recursively.\n */\nconst extractContentTypeComponents = (\n  attributes: ContentType['attributes'] = {},\n  allComponents: ComponentsDictionary = {}\n): ComponentsDictionary => {\n  const getComponents = (attributes: Schema.Attribute.AnyAttribute[]) => {\n    return attributes.reduce<string[]>((acc, attribute) => {\n      /**\n       * If the attribute is a component or dynamiczone, we need to recursively\n       * extract the component UIDs from its attributes.\n       */\n      if (attribute.type === 'component') {\n        const componentAttributes = Object.values(\n          allComponents[attribute.component]?.attributes ?? {}\n        );\n\n        acc.push(attribute.component, ...getComponents(componentAttributes));\n      } else if (attribute.type === 'dynamiczone') {\n        acc.push(\n          ...attribute.components,\n          /**\n           * Dynamic zones have an array of components, so we flatMap over them\n           * performing the same search as above.\n           */\n          ...attribute.components.flatMap((componentUid) => {\n            const componentAttributes = Object.values(\n              allComponents[componentUid]?.attributes ?? {}\n            );\n\n            return getComponents(componentAttributes);\n          })\n        );\n      }\n\n      return acc;\n    }, []);\n  };\n\n  const componentUids = getComponents(Object.values(attributes));\n\n  const uniqueComponentUids = [...new Set(componentUids)];\n\n  const componentsByKey = uniqueComponentUids.reduce<ComponentsDictionary>((acc, uid) => {\n    acc[uid] = allComponents[uid];\n\n    return acc;\n  }, {});\n\n  return componentsByKey;\n};\n\nexport { useContentTypeSchema, extractContentTypeComponents };\nexport type { ComponentsDictionary };\n", "export const HOOKS = {\n  /**\n   * Hook that allows to mutate the displayed headers of the list view table\n   * @constant\n   * @type {string}\n   */\n  INJECT_COLUMN_IN_TABLE: 'Admin/CM/pages/ListView/inject-column-in-table',\n\n  /**\n   * Hook that allows to mutate the CM's collection types links pre-set filters\n   * @constant\n   * @type {string}\n   */\n  MUTATE_COLLECTION_TYPES_LINKS: 'Admin/CM/pages/App/mutate-collection-types-links',\n\n  /**\n   * Hook that allows to mutate the CM's edit view layout\n   * @constant\n   * @type {string}\n   */\n  MUTATE_EDIT_VIEW_LAYOUT: 'Admin/CM/pages/EditView/mutate-edit-view-layout',\n\n  /**\n   * Hook that allows to mutate the CM's single types links pre-set filters\n   * @constant\n   * @type {string}\n   */\n  MUTATE_SINGLE_TYPES_LINKS: 'Admin/CM/pages/App/mutate-single-types-links',\n};\n", "import {\n  FindContentTypeConfiguration,\n  UpdateContentTypeConfiguration,\n  FindContentTypesSettings,\n} from '../../../shared/contracts/content-types';\n\nimport { contentManagerApi } from './api';\n\nconst contentTypesApi = contentManagerApi.injectEndpoints({\n  endpoints: (builder) => ({\n    getContentTypeConfiguration: builder.query<\n      FindContentTypeConfiguration.Response['data'],\n      string\n    >({\n      query: (uid) => ({\n        url: `/content-manager/content-types/${uid}/configuration`,\n        method: 'GET',\n      }),\n      transformResponse: (response: FindContentTypeConfiguration.Response) => response.data,\n      providesTags: (_result, _error, uid) => [\n        { type: 'ContentTypesConfiguration', id: uid },\n        { type: 'ContentTypeSettings', id: 'LIST' },\n      ],\n    }),\n    getAllContentTypeSettings: builder.query<FindContentTypesSettings.Response['data'], void>({\n      query: () => '/content-manager/content-types-settings',\n      transformResponse: (response: FindContentTypesSettings.Response) => response.data,\n      providesTags: [{ type: 'ContentTypeSettings', id: 'LIST' }],\n    }),\n    updateContentTypeConfiguration: builder.mutation<\n      UpdateContentTypeConfiguration.Response['data'],\n      UpdateContentTypeConfiguration.Request['body'] & {\n        uid: string;\n      }\n    >({\n      query: ({ uid, ...body }) => ({\n        url: `/content-manager/content-types/${uid}/configuration`,\n        method: 'PUT',\n        data: body,\n      }),\n      transformResponse: (response: UpdateContentTypeConfiguration.Response) => response.data,\n      invalidatesTags: (_result, _error, { uid }) => [\n        { type: 'ContentTypesConfiguration', id: uid },\n        { type: 'ContentTypeSettings', id: 'LIST' },\n        // Is this necessary?\n        { type: 'InitialData' },\n      ],\n    }),\n  }),\n});\n\nconst {\n  useGetContentTypeConfigurationQuery,\n  useGetAllContentTypeSettingsQuery,\n  useUpdateContentTypeConfigurationMutation,\n} = contentTypesApi;\n\nexport {\n  useGetContentTypeConfigurationQuery,\n  useGetAllContentTypeSettingsQuery,\n  useUpdateContentTypeConfigurationMutation,\n};\n", "import type { ComponentsDictionary, Schema } from '../hooks/useDocument';\nimport type { Schema as SchemaUtils } from '@strapi/types';\n\nconst checkIfAttributeIsDisplayable = (attribute: SchemaUtils.Attribute.AnyAttribute) => {\n  const { type } = attribute;\n\n  if (type === 'relation') {\n    return !attribute.relation.toLowerCase().includes('morph');\n  }\n\n  return !['json', 'dynamiczone', 'richtext', 'password', 'blocks'].includes(type) && !!type;\n};\n\ninterface MainField {\n  name: string;\n  type: SchemaUtils.Attribute.Kind | 'custom';\n}\n\n/**\n * @internal\n * @description given an attribute, content-type schemas & component schemas, find the mainField name & type.\n * If the attribute does not need a `mainField` then we return undefined. If we do not find the type\n * of the field, we assume it's a string #sensible-defaults\n */\nconst getMainField = (\n  attribute: SchemaUtils.Attribute.AnyAttribute,\n  mainFieldName: string | undefined,\n  { schemas, components }: { schemas: Schema[]; components: ComponentsDictionary }\n): MainField | undefined => {\n  if (!mainFieldName) {\n    return undefined;\n  }\n\n  const mainFieldType =\n    attribute.type === 'component'\n      ? components[attribute.component].attributes[mainFieldName].type\n      : // @ts-expect-error – `targetModel` does exist on the attribute for a relation.\n        schemas.find((schema) => schema.uid === attribute.targetModel)?.attributes[mainFieldName]\n          .type;\n\n  return {\n    name: mainFieldName,\n    type: mainFieldType ?? 'string',\n  };\n};\n\nexport { checkIfAttributeIsDisplayable, getMainField };\nexport type { MainField };\n", "import * as React from 'react';\n\nimport { SerializedError } from '@reduxjs/toolkit';\nimport {\n  useNotification,\n  useStrapiApp,\n  useAPIErrorHandler,\n  useQueryParams,\n} from '@strapi/admin/strapi-admin';\n\nimport { HOOKS } from '../constants/hooks';\nimport { useGetContentTypeConfigurationQuery } from '../services/contentTypes';\nimport { BaseQueryError } from '../utils/api';\nimport { getMainField } from '../utils/attributes';\n\nimport { useContentTypeSchema } from './useContentTypeSchema';\nimport {\n  type ComponentsDictionary,\n  type Document,\n  type Schema,\n  useDoc,\n  useDocument,\n} from './useDocument';\n\nimport type { ComponentConfiguration } from '../../../shared/contracts/components';\nimport type {\n  Metadatas,\n  FindContentTypeConfiguration,\n  Settings,\n} from '../../../shared/contracts/content-types';\nimport type { Filters, InputProps, Table } from '@strapi/admin/strapi-admin';\nimport type { Schema as SchemaUtils } from '@strapi/types';\n\ntype LayoutOptions = Schema['options'] & Schema['pluginOptions'] & object;\n\ninterface LayoutSettings extends Settings {\n  displayName?: string;\n  icon?: never;\n}\n\ninterface ListFieldLayout\n  extends Table.Header<Document, ListFieldLayout>,\n    Pick<Filters.Filter, 'mainField'> {\n  attribute: SchemaUtils.Attribute.AnyAttribute | { type: 'custom' };\n}\n\ninterface ListLayout {\n  layout: ListFieldLayout[];\n  components?: never;\n  metadatas: {\n    [K in keyof Metadatas]: Metadatas[K]['list'];\n  };\n  options: LayoutOptions;\n  settings: LayoutSettings;\n}\ninterface EditFieldSharedProps\n  extends Omit<InputProps, 'hint' | 'label' | 'type'>,\n    Pick<Filters.Filter, 'mainField'> {\n  hint?: string;\n  label: string;\n  size: number;\n  unique?: boolean;\n  visible?: boolean;\n}\n\n/**\n * Map over all the types in Attribute Types and use that to create a union of new types where the attribute type\n * is under the property attribute and the type is under the property type.\n */\ntype EditFieldLayout = {\n  [K in SchemaUtils.Attribute.Kind]: EditFieldSharedProps & {\n    attribute: Extract<SchemaUtils.Attribute.AnyAttribute, { type: K }>;\n    type: K;\n  };\n}[SchemaUtils.Attribute.Kind];\n\ninterface EditLayout {\n  layout: Array<Array<EditFieldLayout[]>>;\n  components: {\n    [uid: string]: {\n      layout: Array<EditFieldLayout[]>;\n      settings: ComponentConfiguration['settings'] & {\n        displayName?: string;\n        icon?: string;\n      };\n    };\n  };\n  metadatas: {\n    [K in keyof Metadatas]: Metadatas[K]['edit'];\n  };\n  options: LayoutOptions;\n  settings: LayoutSettings;\n}\n\ntype UseDocumentLayout = (model: string) => {\n  error?: BaseQueryError | SerializedError;\n  isLoading: boolean;\n  /**\n   * This is the layout for the edit view,\n   */\n  edit: EditLayout;\n  list: ListLayout;\n};\n\n/* -------------------------------------------------------------------------------------------------\n * useDocumentLayout\n * -----------------------------------------------------------------------------------------------*/\n\nconst DEFAULT_SETTINGS = {\n  bulkable: false,\n  filterable: false,\n  searchable: false,\n  pagination: false,\n  defaultSortBy: '',\n  defaultSortOrder: 'asc',\n  mainField: 'id',\n  pageSize: 10,\n};\n\n/**\n * @alpha\n * @description This hook is used to get the layouts for either the edit view or list view of a specific content-type\n * including the layouts for the components used in the content-type. It also runs the mutation hook waterfall so the data\n * is consistent wherever it is used. It's a light wrapper around the `useDocument` hook, but provides the `skip` option a document\n * is not fetched, however, it does fetch the schemas & components if they do not already exist in the cache.\n *\n * If the fetch fails, it will display a notification to the user.\n *\n * @example\n * ```tsx\n * const { model } = useParams<{ model: string }>();\n * const { edit: { schema: layout } } = useDocumentLayout(model);\n *\n * return layout.map(panel => panel.map(row => row.map(field => <Field.Root {...field} />)))\n * ```\n *\n */\nconst useDocumentLayout: UseDocumentLayout = (model) => {\n  const { schema, components } = useDocument({ model, collectionType: '' }, { skip: true });\n  const [{ query }] = useQueryParams();\n  const runHookWaterfall = useStrapiApp('useDocumentLayout', (state) => state.runHookWaterfall);\n  const { toggleNotification } = useNotification();\n  const { _unstableFormatAPIError: formatAPIError } = useAPIErrorHandler();\n  const { isLoading: isLoadingSchemas, schemas } = useContentTypeSchema();\n\n  const {\n    data,\n    isLoading: isLoadingConfigs,\n    error,\n    isFetching: isFetchingConfigs,\n  } = useGetContentTypeConfigurationQuery(model);\n\n  const isLoading = isLoadingSchemas || isFetchingConfigs || isLoadingConfigs;\n\n  React.useEffect(() => {\n    if (error) {\n      toggleNotification({\n        type: 'danger',\n        message: formatAPIError(error),\n      });\n    }\n  }, [error, formatAPIError, toggleNotification]);\n\n  const editLayout = React.useMemo(\n    () =>\n      data && !isLoading\n        ? formatEditLayout(data, { schemas, schema, components })\n        : ({\n            layout: [],\n            components: {},\n            metadatas: {},\n            options: {},\n            settings: DEFAULT_SETTINGS,\n          } as EditLayout),\n    [data, isLoading, schemas, schema, components]\n  );\n\n  const listLayout = React.useMemo(() => {\n    return data && !isLoading\n      ? formatListLayout(data, { schemas, schema, components })\n      : ({\n          layout: [],\n          metadatas: {},\n          options: {},\n          settings: DEFAULT_SETTINGS,\n        } as ListLayout);\n  }, [data, isLoading, schemas, schema, components]);\n\n  const { layout: edit } = React.useMemo(\n    () =>\n      runHookWaterfall(HOOKS.MUTATE_EDIT_VIEW_LAYOUT, {\n        layout: editLayout,\n        query,\n      }),\n    [editLayout, query, runHookWaterfall]\n  );\n\n  return {\n    error,\n    isLoading,\n    edit,\n    list: listLayout,\n  } satisfies ReturnType<UseDocumentLayout>;\n};\n\n/* -------------------------------------------------------------------------------------------------\n * useDocLayout\n * -----------------------------------------------------------------------------------------------*/\n\n/**\n * @internal this hook uses the internal useDoc hook, as such it shouldn't be used outside of the\n * content-manager because it won't work as intended.\n */\nconst useDocLayout = () => {\n  const { model } = useDoc();\n  return useDocumentLayout(model);\n};\n\n/* -------------------------------------------------------------------------------------------------\n * formatEditLayout\n * -----------------------------------------------------------------------------------------------*/\ntype LayoutData = FindContentTypeConfiguration.Response['data'];\n\n/**\n * @internal\n * @description takes the configuration data, the schema & the components used in the schema and formats the edit view\n * versions of the schema & components. This is then used to render the edit view of the content-type.\n */\nconst formatEditLayout = (\n  data: LayoutData,\n  {\n    schemas,\n    schema,\n    components,\n  }: { schemas: Schema[]; schema?: Schema; components: ComponentsDictionary }\n): EditLayout => {\n  let currentPanelIndex = 0;\n  /**\n   * The fields arranged by the panels, new panels are made for dynamic zones only.\n   */\n  const panelledEditAttributes = convertEditLayoutToFieldLayouts(\n    data.contentType.layouts.edit,\n    schema?.attributes,\n    data.contentType.metadatas,\n    { configurations: data.components, schemas: components },\n    schemas\n  ).reduce<Array<EditFieldLayout[][]>>((panels, row) => {\n    if (row.some((field) => field.type === 'dynamiczone')) {\n      panels.push([row]);\n      currentPanelIndex += 2;\n    } else {\n      if (!panels[currentPanelIndex]) {\n        panels.push([row]);\n      } else {\n        panels[currentPanelIndex].push(row);\n      }\n    }\n\n    return panels;\n  }, []);\n\n  const componentEditAttributes = Object.entries(data.components).reduce<EditLayout['components']>(\n    (acc, [uid, configuration]) => {\n      acc[uid] = {\n        layout: convertEditLayoutToFieldLayouts(\n          configuration.layouts.edit,\n          components[uid].attributes,\n          configuration.metadatas,\n          { configurations: data.components, schemas: components }\n        ),\n        settings: {\n          ...configuration.settings,\n          icon: components[uid].info.icon,\n          displayName: components[uid].info.displayName,\n        },\n      };\n      return acc;\n    },\n    {}\n  );\n\n  const editMetadatas = Object.entries(data.contentType.metadatas).reduce<EditLayout['metadatas']>(\n    (acc, [attribute, metadata]) => {\n      return {\n        ...acc,\n        [attribute]: metadata.edit,\n      };\n    },\n    {}\n  );\n\n  return {\n    layout: panelledEditAttributes,\n    components: componentEditAttributes,\n    metadatas: editMetadatas,\n    settings: {\n      ...data.contentType.settings,\n      displayName: schema?.info.displayName,\n    },\n    options: {\n      ...schema?.options,\n      ...schema?.pluginOptions,\n      ...data.contentType.options,\n    },\n  };\n};\n\n/* -------------------------------------------------------------------------------------------------\n * convertEditLayoutToFieldLayouts\n * -----------------------------------------------------------------------------------------------*/\n\n/**\n * @internal\n * @description takes the edit layout from either a content-type or a component\n * and formats it into a generic object that can be used to correctly render\n * the form fields.\n */\nconst convertEditLayoutToFieldLayouts = (\n  rows: LayoutData['contentType']['layouts']['edit'],\n  attributes: Schema['attributes'] = {},\n  metadatas: Metadatas,\n  components?: {\n    configurations: Record<string, ComponentConfiguration>;\n    schemas: ComponentsDictionary;\n  },\n  schemas: Schema[] = []\n) => {\n  return rows.map((row) =>\n    row\n      .map((field) => {\n        const attribute = attributes[field.name];\n\n        if (!attribute) {\n          return null;\n        }\n\n        const { edit: metadata } = metadatas[field.name];\n\n        const settings: Partial<Settings> =\n          attribute.type === 'component' && components\n            ? components.configurations[attribute.component].settings\n            : {};\n\n        return {\n          attribute,\n          disabled: !metadata.editable,\n          hint: metadata.description,\n          label: metadata.label ?? '',\n          name: field.name,\n          // @ts-expect-error – mainField does exist on the metadata for a relation.\n          mainField: getMainField(attribute, metadata.mainField || settings.mainField, {\n            schemas,\n            components: components?.schemas ?? {},\n          }),\n          placeholder: metadata.placeholder ?? '',\n          required: attribute.required ?? false,\n          size: field.size,\n          unique: 'unique' in attribute ? attribute.unique : false,\n          visible: metadata.visible ?? true,\n          type: attribute.type,\n        };\n      })\n      .filter((field) => field !== null)\n  ) as EditFieldLayout[][];\n};\n\n/* -------------------------------------------------------------------------------------------------\n * formatListLayout\n * -----------------------------------------------------------------------------------------------*/\n\n/**\n * @internal\n * @description takes the complete configuration data, the schema & the components used in the schema and\n * formats a list view layout for the content-type. This is much simpler than the edit view layout as there\n * are less options to consider.\n */\nconst formatListLayout = (\n  data: LayoutData,\n  {\n    schemas,\n    schema,\n    components,\n  }: { schemas: Schema[]; schema?: Schema; components: ComponentsDictionary }\n): ListLayout => {\n  const listMetadatas = Object.entries(data.contentType.metadatas).reduce<ListLayout['metadatas']>(\n    (acc, [attribute, metadata]) => {\n      return {\n        ...acc,\n        [attribute]: metadata.list,\n      };\n    },\n    {}\n  );\n  /**\n   * The fields arranged by the panels, new panels are made for dynamic zones only.\n   */\n  const listAttributes = convertListLayoutToFieldLayouts(\n    data.contentType.layouts.list,\n    schema?.attributes,\n    listMetadatas,\n    { configurations: data.components, schemas: components },\n    schemas\n  );\n\n  return {\n    layout: listAttributes,\n    settings: { ...data.contentType.settings, displayName: schema?.info.displayName },\n    metadatas: listMetadatas,\n    options: {\n      ...schema?.options,\n      ...schema?.pluginOptions,\n      ...data.contentType.options,\n    },\n  };\n};\n\n/* -------------------------------------------------------------------------------------------------\n * convertListLayoutToFieldLayouts\n * -----------------------------------------------------------------------------------------------*/\n\n/**\n * @internal\n * @description takes the columns from the list view configuration and formats them into a generic object\n * combinining metadata and attribute data.\n *\n * @note We do use this to reformat the list of strings when updating the displayed headers for the list view.\n */\nconst convertListLayoutToFieldLayouts = (\n  columns: LayoutData['contentType']['layouts']['list'],\n  attributes: Schema['attributes'] = {},\n  metadatas: ListLayout['metadatas'],\n  components?: {\n    configurations: Record<string, ComponentConfiguration>;\n    schemas: ComponentsDictionary;\n  },\n  schemas: Schema[] = []\n) => {\n  return columns\n    .map((name) => {\n      const attribute = attributes[name];\n\n      if (!attribute) {\n        return null;\n      }\n\n      const metadata = metadatas[name];\n\n      const settings: Partial<Settings> =\n        attribute.type === 'component' && components\n          ? components.configurations[attribute.component].settings\n          : {};\n\n      return {\n        attribute,\n        label: metadata.label ?? '',\n        mainField: getMainField(attribute, metadata.mainField || settings.mainField, {\n          schemas,\n          components: components?.schemas ?? {},\n        }),\n        name: name,\n        searchable: metadata.searchable ?? true,\n        sortable: metadata.sortable ?? true,\n      } satisfies ListFieldLayout;\n    })\n    .filter((field) => field !== null) as ListFieldLayout[];\n};\n\nexport {\n  useDocLayout,\n  useDocumentLayout,\n  convertListLayoutToFieldLayouts,\n  convertEditLayoutToFieldLayouts,\n  DEFAULT_SETTINGS,\n};\nexport type { EditLayout, EditFieldLayout, ListLayout, ListFieldLayout, UseDocumentLayout };\n", "/**\n * This hook doesn't use a context provider because we fetch directly from the server,\n * this sounds expensive but actually, it's really not. Because we have redux-toolkit-query\n * being a cache layer so if nothing invalidates the cache, we don't fetch again.\n */\n\nimport * as React from 'react';\n\nimport {\n  useNotification,\n  useAPIErrorHandler,\n  useQueryParams,\n  FormErrors,\n  getYupValidationErrors,\n  useForm,\n} from '@strapi/admin/strapi-admin';\nimport { Modules } from '@strapi/types';\nimport { useParams } from 'react-router-dom';\nimport { ValidationError } from 'yup';\n\nimport { SINGLE_TYPES } from '../constants/collections';\nimport { useGetDocumentQuery } from '../services/documents';\nimport { buildValidParams } from '../utils/api';\nimport { createYupSchema } from '../utils/validation';\n\nimport { useContentTypeSchema, ComponentsDictionary } from './useContentTypeSchema';\nimport { useDocumentLayout } from './useDocumentLayout';\n\nimport type { FindOne } from '../../../shared/contracts/collection-types';\nimport type { ContentType } from '../../../shared/contracts/content-types';\n\ninterface UseDocumentArgs {\n  collectionType: string;\n  model: string;\n  documentId?: string;\n  params?: object;\n}\n\ntype UseDocumentOpts = Parameters<typeof useGetDocumentQuery>[1];\n\ntype Document = FindOne.Response['data'];\n\ntype Schema = ContentType;\n\ntype UseDocument = (\n  args: UseDocumentArgs,\n  opts?: UseDocumentOpts\n) => {\n  /**\n   * These are the schemas of the components used in the content type, organised\n   * by their uid.\n   */\n  components: ComponentsDictionary;\n  document?: Document;\n  meta?: FindOne.Response['meta'];\n  isLoading: boolean;\n  /**\n   * This is the schema of the content type, it is not the same as the layout.\n   */\n  schema?: Schema;\n  schemas?: Schema[];\n  validate: (document: Document) => null | FormErrors;\n  hasError?: boolean;\n};\n\n/* -------------------------------------------------------------------------------------------------\n * useDocument\n * -----------------------------------------------------------------------------------------------*/\n\n/**\n * @alpha\n * @public\n * @description Returns a document based on the model, collection type & id passed as arguments.\n * Also extracts its schema from the redux cache to be used for creating a validation schema.\n * @example\n * ```tsx\n * const { id, model, collectionType } = useParams<{ id: string; model: string; collectionType: string }>();\n *\n * if(!model || !collectionType) return null;\n *\n * const { document, isLoading, validate } = useDocument({ documentId: id, model, collectionType, params: { locale: 'en-GB' } })\n * const { update } = useDocumentActions()\n *\n * const onSubmit = async (document: Document) => {\n *  const errors = validate(document);\n *\n *  if(errors) {\n *      // handle errors\n *  }\n *\n *  await update({ collectionType, model, id }, document)\n * }\n * ```\n *\n * @see {@link https://contributor.strapi.io/docs/core/content-manager/hooks/use-document} for more information\n */\nconst useDocument: UseDocument = (args, opts) => {\n  const { toggleNotification } = useNotification();\n  const { _unstableFormatAPIError: formatAPIError } = useAPIErrorHandler();\n\n  const {\n    currentData: data,\n    isLoading: isLoadingDocument,\n    isFetching: isFetchingDocument,\n    error,\n  } = useGetDocumentQuery(args, {\n    ...opts,\n    skip: (!args.documentId && args.collectionType !== SINGLE_TYPES) || opts?.skip,\n  });\n\n  const {\n    components,\n    schema,\n    schemas,\n    isLoading: isLoadingSchema,\n  } = useContentTypeSchema(args.model);\n\n  React.useEffect(() => {\n    if (error) {\n      toggleNotification({\n        type: 'danger',\n        message: formatAPIError(error),\n      });\n    }\n  }, [toggleNotification, error, formatAPIError, args.collectionType]);\n\n  const validationSchema = React.useMemo(() => {\n    if (!schema) {\n      return null;\n    }\n\n    return createYupSchema(schema.attributes, components);\n  }, [schema, components]);\n\n  const validate = React.useCallback(\n    (document: Modules.Documents.AnyDocument): FormErrors | null => {\n      if (!validationSchema) {\n        throw new Error(\n          'There is no validation schema generated, this is likely due to the schema not being loaded yet.'\n        );\n      }\n\n      try {\n        validationSchema.validateSync(document, { abortEarly: false, strict: true });\n        return null;\n      } catch (error) {\n        if (error instanceof ValidationError) {\n          return getYupValidationErrors(error);\n        }\n\n        throw error;\n      }\n    },\n    [validationSchema]\n  );\n\n  const isLoading = isLoadingDocument || isFetchingDocument || isLoadingSchema;\n  const hasError = !!error;\n\n  return {\n    components,\n    document: data?.data,\n    meta: data?.meta,\n    isLoading,\n    hasError,\n    schema,\n    schemas,\n    validate,\n  } satisfies ReturnType<UseDocument>;\n};\n\n/* -------------------------------------------------------------------------------------------------\n * useDoc\n * -----------------------------------------------------------------------------------------------*/\n\n/**\n * @internal this hook uses the router to extract the model, collection type & id from the url.\n * therefore, it shouldn't be used outside of the content-manager because it won't work as intended.\n */\nconst useDoc = () => {\n  const { id, slug, collectionType, origin } = useParams<{\n    id: string;\n    origin: string;\n    slug: string;\n    collectionType: string;\n  }>();\n  const [{ query }] = useQueryParams();\n  const params = React.useMemo(() => buildValidParams(query), [query]);\n\n  if (!collectionType) {\n    throw new Error('Could not find collectionType in url params');\n  }\n\n  if (!slug) {\n    throw new Error('Could not find model in url params');\n  }\n\n  const document = useDocument(\n    { documentId: origin || id, model: slug, collectionType, params },\n    {\n      skip: id === 'create' || (!origin && !id && collectionType !== SINGLE_TYPES),\n    }\n  );\n\n  const returnId = origin || id === 'create' ? undefined : id;\n\n  return {\n    collectionType,\n    model: slug,\n    id: returnId,\n    ...document,\n  };\n};\n\n/**\n * @public\n * @experimental\n * Content manager context hooks for plugin development.\n * Make sure to use this hook inside the content manager.\n */\nconst useContentManagerContext = () => {\n  const {\n    collectionType,\n    model,\n    id,\n    components,\n    isLoading: isLoadingDoc,\n    schema,\n    schemas,\n  } = useDoc();\n\n  const layout = useDocumentLayout(model);\n\n  const form = useForm('useContentManagerContext', (state) => state);\n\n  const isSingleType = collectionType === SINGLE_TYPES;\n  const slug = model;\n  const isCreatingEntry = id === 'create';\n\n  const {} = useContentTypeSchema();\n\n  const isLoading = isLoadingDoc || layout.isLoading;\n  const error = layout.error;\n\n  return {\n    error,\n    isLoading,\n\n    // Base metadata\n    model,\n    collectionType,\n    id,\n    slug,\n    isCreatingEntry,\n    isSingleType,\n    hasDraftAndPublish: schema?.options?.draftAndPublish ?? false,\n\n    // All schema infos\n    components,\n    contentType: schema,\n    contentTypes: schemas,\n\n    // Form state\n    form,\n\n    // layout infos\n    layout,\n  };\n};\n\nexport { useDocument, useDoc, useContentManagerContext };\nexport type { UseDocument, UseDocumentArgs, Document, Schema, ComponentsDictionary };\n", "type TradOptions = Record<string, string>;\n\nconst prefixPluginTranslations = (trad: TradOptions, pluginId: string): TradOptions => {\n  if (!pluginId) {\n    throw new TypeError(\"pluginId can't be empty\");\n  }\n  return Object.keys(trad).reduce((acc, current) => {\n    acc[`${pluginId}.${current}`] = trad[current];\n    return acc;\n  }, {} as TradOptions);\n};\n\nconst getTranslation = (id: string) => `content-manager.${id}`;\n\nexport { getTranslation, prefixPluginTranslations };\n", "import * as React from 'react';\n\nimport { SerializedError } from '@reduxjs/toolkit';\nimport {\n  useNotification,\n  useTracking,\n  type TrackingEvent,\n  useAPIErrorHandler,\n  useGuidedTour,\n} from '@strapi/admin/strapi-admin';\nimport { useIntl, type MessageDescriptor } from 'react-intl';\nimport { useNavigate } from 'react-router-dom';\n\nimport {\n  useAutoCloneDocumentMutation,\n  useCloneDocumentMutation,\n  useCreateDocumentMutation,\n  useDeleteDocumentMutation,\n  useDeleteManyDocumentsMutation,\n  useDiscardDocumentMutation,\n  useLazyGetDocumentQuery,\n  usePublishDocumentMutation,\n  usePublishManyDocumentsMutation,\n  useUnpublishDocumentMutation,\n  useUnpublishManyDocumentsMutation,\n  useUpdateDocumentMutation,\n} from '../services/documents';\nimport { BaseQueryError } from '../utils/api';\nimport { getTranslation } from '../utils/translations';\n\nimport type { Document } from './useDocument';\nimport type {\n  AutoClone,\n  Clone,\n  Create,\n  Delete,\n  BulkDelete,\n  Discard,\n  FindOne,\n  Publish,\n  BulkPublish,\n  Update,\n  Unpublish,\n  BulkUnpublish,\n} from '../../../shared/contracts/collection-types';\n\nconst DEFAULT_UNEXPECTED_ERROR_MSG = {\n  id: 'notification.error',\n  defaultMessage: 'An error occurred, please try again',\n} satisfies MessageDescriptor;\n\ntype OperationResponse<TResponse extends { data: any; meta?: any; error?: any }> =\n  | Pick<TResponse, 'data'>\n  | Pick<TResponse, 'data' | 'meta'>\n  | { error: BaseQueryError | SerializedError };\n\ntype BulkOperationResponse<TResponse extends { data: any; error?: any }> =\n  | Pick<TResponse, 'data'>\n  | { error: BaseQueryError | SerializedError };\n\ntype UseDocumentActions = () => {\n  /**\n   * @description Attempts to clone a document based on the provided sourceId.\n   * This will return a list of the fields as an error if it's unable to clone.\n   * You most likely want to use the `clone` action instead.\n   */\n  autoClone: (args: {\n    model: string;\n    sourceId: string;\n  }) => Promise<OperationResponse<AutoClone.Response>>;\n  clone: (\n    args: {\n      model: string;\n      documentId: string;\n      params?: object;\n    },\n    document: Omit<Document, 'id'>,\n    trackerProperty?: Extract<\n      TrackingEvent,\n      { name: 'willCreateEntry' | 'didCreateEntry' | 'didNotCreateEntry' }\n    >['properties']\n  ) => Promise<OperationResponse<Clone.Response>>;\n  create: (\n    args: {\n      model: string;\n      params?: object;\n    },\n    document: Omit<Document, 'id'>,\n    trackerProperty?: Extract<\n      TrackingEvent,\n      { name: 'willCreateEntry' | 'didCreateEntry' | 'didNotCreateEntry' }\n    >['properties']\n  ) => Promise<OperationResponse<Create.Response>>;\n  delete: (\n    args: {\n      collectionType: string;\n      model: string;\n      documentId?: string;\n      params?: object;\n    },\n    trackerProperty?: Extract<\n      TrackingEvent,\n      { name: 'willDeleteEntry' | 'didDeleteEntry' | 'didNotDeleteEntry' }\n    >['properties']\n  ) => Promise<OperationResponse<Delete.Response>>;\n  deleteMany: (args: {\n    model: string;\n    documentIds: string[];\n    params?: object;\n  }) => Promise<BulkOperationResponse<BulkDelete.Response>>;\n  discard: (args: {\n    collectionType: string;\n    model: string;\n    documentId?: string;\n    params?: object;\n  }) => Promise<OperationResponse<Discard.Response>>;\n  getDocument: (args: {\n    collectionType: string;\n    model: string;\n    documentId?: string;\n    params?: object;\n  }) => Promise<FindOne.Response | undefined>;\n  publish: (\n    args: {\n      collectionType: string;\n      model: string;\n      documentId?: string;\n      params?: object;\n    },\n    document: Partial<Document>\n  ) => Promise<OperationResponse<Publish.Response>>;\n  publishMany: (args: {\n    model: string;\n    documentIds: string[];\n    params?: object;\n  }) => Promise<BulkOperationResponse<BulkPublish.Response>>;\n  update: (\n    args: {\n      collectionType: string;\n      model: string;\n      documentId?: string;\n      params?: object;\n    },\n    document: Partial<Document>,\n    trackerProperty?: Extract<\n      TrackingEvent,\n      { name: 'willEditEntry' | 'didEditEntry' | 'didNotEditEntry' }\n    >['properties']\n  ) => Promise<OperationResponse<Update.Response>>;\n  unpublish: (\n    args: {\n      collectionType: string;\n      model: string;\n      documentId?: string;\n      params?: object;\n    },\n    discardDraft?: boolean\n  ) => Promise<OperationResponse<Unpublish.Response>>;\n  unpublishMany: (args: {\n    model: string;\n    documentIds: string[];\n    params?: object;\n  }) => Promise<BulkOperationResponse<BulkUnpublish.Response>>;\n};\n\ntype IUseDocumentActs = ReturnType<UseDocumentActions>;\n\n/**\n * @alpha\n * @public\n * @description Contains all the operations that can be performed on a single document.\n * Designed to be able to be used anywhere within a Strapi app. The hooks will handle\n * notifications should the operation fail, however the response is always returned incase\n * the user needs to handle side-effects.\n * @example\n * ```tsx\n * import { Form } from '@strapi/admin/admin';\n *\n * const { id, model, collectionType } = useParams<{ id: string; model: string; collectionType: string }>();\n * const { update } = useDocumentActions();\n *\n * const handleSubmit = async (data) => {\n *  await update({ collectionType, model, documentId: id }, data);\n * }\n *\n * return <Form method=\"PUT\" onSubmit={handleSubmit} />\n * ```\n *\n * @see {@link https://contributor.strapi.io/docs/core/content-manager/hooks/use-document-operations} for more information\n */\nconst useDocumentActions: UseDocumentActions = () => {\n  const { toggleNotification } = useNotification();\n  const { formatMessage } = useIntl();\n  const { trackUsage } = useTracking();\n  const { _unstableFormatAPIError: formatAPIError } = useAPIErrorHandler();\n  const navigate = useNavigate();\n  const setCurrentStep = useGuidedTour('useDocumentActions', (state) => state.setCurrentStep);\n\n  const [deleteDocument] = useDeleteDocumentMutation();\n  const _delete: IUseDocumentActs['delete'] = React.useCallback(\n    async ({ collectionType, model, documentId, params }, trackerProperty) => {\n      try {\n        trackUsage('willDeleteEntry', trackerProperty);\n\n        const res = await deleteDocument({\n          collectionType,\n          model,\n          documentId,\n          params,\n        });\n\n        if ('error' in res) {\n          toggleNotification({\n            type: 'danger',\n            message: formatAPIError(res.error),\n          });\n\n          return { error: res.error };\n        }\n\n        toggleNotification({\n          type: 'success',\n          message: formatMessage({\n            id: getTranslation('success.record.delete'),\n            defaultMessage: 'Deleted document',\n          }),\n        });\n\n        trackUsage('didDeleteEntry', trackerProperty);\n\n        return res.data;\n      } catch (err) {\n        toggleNotification({\n          type: 'danger',\n          message: formatMessage(DEFAULT_UNEXPECTED_ERROR_MSG),\n        });\n\n        trackUsage('didNotDeleteEntry', { error: err, ...trackerProperty });\n\n        throw err;\n      }\n    },\n    [trackUsage, deleteDocument, toggleNotification, formatMessage, formatAPIError]\n  );\n\n  const [deleteManyDocuments] = useDeleteManyDocumentsMutation();\n\n  const deleteMany: IUseDocumentActs['deleteMany'] = React.useCallback(\n    async ({ model, documentIds, params }) => {\n      try {\n        trackUsage('willBulkDeleteEntries');\n\n        const res = await deleteManyDocuments({\n          model,\n          documentIds,\n          params,\n        });\n\n        if ('error' in res) {\n          toggleNotification({\n            type: 'danger',\n            message: formatAPIError(res.error),\n          });\n\n          return { error: res.error };\n        }\n\n        toggleNotification({\n          type: 'success',\n          title: formatMessage({\n            id: getTranslation('success.records.delete'),\n            defaultMessage: 'Successfully deleted.',\n          }),\n          message: '',\n        });\n\n        trackUsage('didBulkDeleteEntries');\n\n        return res.data;\n      } catch (err) {\n        toggleNotification({\n          type: 'danger',\n          message: formatMessage(DEFAULT_UNEXPECTED_ERROR_MSG),\n        });\n\n        trackUsage('didNotBulkDeleteEntries');\n\n        throw err;\n      }\n    },\n    [trackUsage, deleteManyDocuments, toggleNotification, formatMessage, formatAPIError]\n  );\n\n  const [discardDocument] = useDiscardDocumentMutation();\n  const discard: IUseDocumentActs['discard'] = React.useCallback(\n    async ({ collectionType, model, documentId, params }) => {\n      try {\n        const res = await discardDocument({\n          collectionType,\n          model,\n          documentId,\n          params,\n        });\n\n        if ('error' in res) {\n          toggleNotification({\n            type: 'danger',\n            message: formatAPIError(res.error),\n          });\n\n          return { error: res.error };\n        }\n\n        toggleNotification({\n          type: 'success',\n          message: formatMessage({\n            id: 'content-manager.success.record.discard',\n            defaultMessage: 'Changes discarded',\n          }),\n        });\n\n        return res.data;\n      } catch (err) {\n        toggleNotification({\n          type: 'danger',\n          message: formatMessage(DEFAULT_UNEXPECTED_ERROR_MSG),\n        });\n\n        throw err;\n      }\n    },\n    [discardDocument, formatAPIError, formatMessage, toggleNotification]\n  );\n\n  const [publishDocument] = usePublishDocumentMutation();\n  const publish: IUseDocumentActs['publish'] = React.useCallback(\n    async ({ collectionType, model, documentId, params }, data) => {\n      try {\n        trackUsage('willPublishEntry');\n\n        const res = await publishDocument({\n          collectionType,\n          model,\n          documentId,\n          data,\n          params,\n        });\n\n        if ('error' in res) {\n          toggleNotification({ type: 'danger', message: formatAPIError(res.error) });\n          return { error: res.error };\n        }\n\n        trackUsage('didPublishEntry');\n\n        toggleNotification({\n          type: 'success',\n          message: formatMessage({\n            id: getTranslation('success.record.publish'),\n            defaultMessage: 'Published document',\n          }),\n        });\n\n        return res.data;\n      } catch (err) {\n        toggleNotification({\n          type: 'danger',\n          message: formatMessage(DEFAULT_UNEXPECTED_ERROR_MSG),\n        });\n\n        throw err;\n      }\n    },\n    [trackUsage, publishDocument, toggleNotification, formatMessage, formatAPIError]\n  );\n\n  const [publishManyDocuments] = usePublishManyDocumentsMutation();\n  const publishMany: IUseDocumentActs['publishMany'] = React.useCallback(\n    async ({ model, documentIds, params }) => {\n      try {\n        // TODO Confirm tracking events for bulk publish?\n\n        const res = await publishManyDocuments({\n          model,\n          documentIds,\n          params,\n        });\n        if ('error' in res) {\n          toggleNotification({ type: 'danger', message: formatAPIError(res.error) });\n          return { error: res.error };\n        }\n\n        toggleNotification({\n          type: 'success',\n          message: formatMessage({\n            id: getTranslation('success.record.publish'),\n            defaultMessage: 'Published document',\n          }),\n        });\n\n        return res.data;\n      } catch (err) {\n        toggleNotification({\n          type: 'danger',\n          message: formatMessage(DEFAULT_UNEXPECTED_ERROR_MSG),\n        });\n        throw err;\n      }\n    },\n    [\n      // trackUsage,\n      publishManyDocuments,\n      toggleNotification,\n      formatMessage,\n      formatAPIError,\n    ]\n  );\n\n  const [updateDocument] = useUpdateDocumentMutation();\n  const update: IUseDocumentActs['update'] = React.useCallback(\n    async ({ collectionType, model, documentId, params }, data, trackerProperty) => {\n      try {\n        trackUsage('willEditEntry', trackerProperty);\n\n        const res = await updateDocument({\n          collectionType,\n          model,\n          documentId,\n          data,\n          params,\n        });\n\n        if ('error' in res) {\n          toggleNotification({ type: 'danger', message: formatAPIError(res.error) });\n\n          trackUsage('didNotEditEntry', { error: res.error, ...trackerProperty });\n\n          return { error: res.error };\n        }\n\n        trackUsage('didEditEntry', trackerProperty);\n        toggleNotification({\n          type: 'success',\n          message: formatMessage({\n            id: getTranslation('success.record.save'),\n            defaultMessage: 'Saved document',\n          }),\n        });\n\n        return res.data;\n      } catch (err) {\n        trackUsage('didNotEditEntry', { error: err, ...trackerProperty });\n\n        toggleNotification({\n          type: 'danger',\n          message: formatMessage(DEFAULT_UNEXPECTED_ERROR_MSG),\n        });\n\n        throw err;\n      }\n    },\n    [trackUsage, updateDocument, toggleNotification, formatMessage, formatAPIError]\n  );\n\n  const [unpublishDocument] = useUnpublishDocumentMutation();\n  const unpublish: IUseDocumentActs['unpublish'] = React.useCallback(\n    async ({ collectionType, model, documentId, params }, discardDraft = false) => {\n      try {\n        trackUsage('willUnpublishEntry');\n\n        const res = await unpublishDocument({\n          collectionType,\n          model,\n          documentId,\n          params,\n          data: {\n            discardDraft,\n          },\n        });\n\n        if ('error' in res) {\n          toggleNotification({ type: 'danger', message: formatAPIError(res.error) });\n\n          return { error: res.error };\n        }\n\n        trackUsage('didUnpublishEntry');\n\n        toggleNotification({\n          type: 'success',\n          message: formatMessage({\n            id: getTranslation('success.record.unpublish'),\n            defaultMessage: 'Unpublished document',\n          }),\n        });\n\n        return res.data;\n      } catch (err) {\n        toggleNotification({\n          type: 'danger',\n          message: formatMessage(DEFAULT_UNEXPECTED_ERROR_MSG),\n        });\n\n        throw err;\n      }\n    },\n    [trackUsage, unpublishDocument, toggleNotification, formatMessage, formatAPIError]\n  );\n\n  const [unpublishManyDocuments] = useUnpublishManyDocumentsMutation();\n  const unpublishMany: IUseDocumentActs['unpublishMany'] = React.useCallback(\n    async ({ model, documentIds, params }) => {\n      try {\n        trackUsage('willBulkUnpublishEntries');\n\n        const res = await unpublishManyDocuments({\n          model,\n          documentIds,\n          params,\n        });\n\n        if ('error' in res) {\n          toggleNotification({ type: 'danger', message: formatAPIError(res.error) });\n\n          return { error: res.error };\n        }\n\n        trackUsage('didBulkUnpublishEntries');\n\n        toggleNotification({\n          type: 'success',\n          title: formatMessage({\n            id: getTranslation('success.records.unpublish'),\n            defaultMessage: 'Successfully unpublished.',\n          }),\n          message: '',\n        });\n\n        return res.data;\n      } catch (err) {\n        toggleNotification({\n          type: 'danger',\n          message: formatMessage(DEFAULT_UNEXPECTED_ERROR_MSG),\n        });\n\n        trackUsage('didNotBulkUnpublishEntries');\n\n        throw err;\n      }\n    },\n    [trackUsage, unpublishManyDocuments, toggleNotification, formatMessage, formatAPIError]\n  );\n\n  const [createDocument] = useCreateDocumentMutation();\n  const create: IUseDocumentActs['create'] = React.useCallback(\n    async ({ model, params }, data, trackerProperty) => {\n      try {\n        const res = await createDocument({\n          model,\n          data,\n          params,\n        });\n\n        if ('error' in res) {\n          toggleNotification({ type: 'danger', message: formatAPIError(res.error) });\n\n          trackUsage('didNotCreateEntry', { error: res.error, ...trackerProperty });\n\n          return { error: res.error };\n        }\n\n        trackUsage('didCreateEntry', trackerProperty);\n\n        toggleNotification({\n          type: 'success',\n          message: formatMessage({\n            id: getTranslation('success.record.save'),\n            defaultMessage: 'Saved document',\n          }),\n        });\n\n        setCurrentStep('contentManager.success');\n\n        return res.data;\n      } catch (err) {\n        toggleNotification({\n          type: 'danger',\n          message: formatMessage(DEFAULT_UNEXPECTED_ERROR_MSG),\n        });\n\n        trackUsage('didNotCreateEntry', { error: err, ...trackerProperty });\n\n        throw err;\n      }\n    },\n    [createDocument, formatAPIError, formatMessage, toggleNotification, trackUsage]\n  );\n\n  const [autoCloneDocument] = useAutoCloneDocumentMutation();\n  const autoClone: IUseDocumentActs['autoClone'] = React.useCallback(\n    async ({ model, sourceId }) => {\n      try {\n        const res = await autoCloneDocument({\n          model,\n          sourceId,\n        });\n\n        if ('error' in res) {\n          return { error: res.error };\n        }\n\n        toggleNotification({\n          type: 'success',\n          message: formatMessage({\n            id: getTranslation('success.record.clone'),\n            defaultMessage: 'Cloned document',\n          }),\n        });\n\n        return res.data;\n      } catch (err) {\n        toggleNotification({\n          type: 'danger',\n          message: formatMessage(DEFAULT_UNEXPECTED_ERROR_MSG),\n        });\n\n        throw err;\n      }\n    },\n    [autoCloneDocument, formatMessage, toggleNotification]\n  );\n\n  const [cloneDocument] = useCloneDocumentMutation();\n  const clone: IUseDocumentActs['clone'] = React.useCallback(\n    async ({ model, documentId, params }, body, trackerProperty) => {\n      try {\n        const { id: _id, ...restBody } = body;\n\n        /**\n         * If we're cloning we want to post directly to this endpoint\n         * so that the relations even if they're not listed in the EditView\n         * are correctly attached to the entry.\n         */\n        const res = await cloneDocument({\n          model,\n          sourceId: documentId,\n          data: restBody,\n          params,\n        });\n\n        if ('error' in res) {\n          toggleNotification({ type: 'danger', message: formatAPIError(res.error) });\n\n          trackUsage('didNotCreateEntry', { error: res.error, ...trackerProperty });\n\n          return { error: res.error };\n        }\n\n        trackUsage('didCreateEntry', trackerProperty);\n        toggleNotification({\n          type: 'success',\n          message: formatMessage({\n            id: getTranslation('success.record.clone'),\n            defaultMessage: 'Cloned document',\n          }),\n        });\n\n        // Redirect to normal edit view\n        navigate(`../../${res.data.data.documentId}`, { relative: 'path' });\n\n        return res.data;\n      } catch (err) {\n        toggleNotification({\n          type: 'danger',\n          message: formatMessage(DEFAULT_UNEXPECTED_ERROR_MSG),\n        });\n\n        trackUsage('didNotCreateEntry', { error: err, ...trackerProperty });\n\n        throw err;\n      }\n    },\n    [cloneDocument, trackUsage, toggleNotification, formatMessage, formatAPIError, navigate]\n  );\n\n  const [getDoc] = useLazyGetDocumentQuery();\n  const getDocument: IUseDocumentActs['getDocument'] = React.useCallback(\n    async (args) => {\n      const { data } = await getDoc(args);\n\n      return data;\n    },\n    [getDoc]\n  );\n\n  return {\n    autoClone,\n    clone,\n    create,\n    delete: _delete,\n    deleteMany,\n    discard,\n    getDocument,\n    publish,\n    publishMany,\n    unpublish,\n    unpublishMany,\n    update,\n  } satisfies IUseDocumentActs;\n};\n\nexport { useDocumentActions };\nexport type { UseDocumentActions, OperationResponse };\n", "/* eslint-disable check-file/filename-naming-convention */\nimport * as React from 'react';\n\nimport { type PathRouteProps } from 'react-router-dom';\n\nconst ProtectedHistoryPage = React.lazy(() =>\n  import('./pages/History').then((mod) => ({ default: mod.ProtectedHistoryPage }))\n);\n\n/**\n * These routes will be merged with the rest of the Content Manager routes\n */\nconst routes: PathRouteProps[] = [\n  {\n    path: ':collectionType/:slug/:id/history',\n    Component: ProtectedHistoryPage,\n  },\n  {\n    path: ':collectionType/:slug/history',\n    Component: ProtectedHistoryPage,\n  },\n];\n\nexport { routes };\n", "/* eslint-disable check-file/filename-naming-convention */\nimport * as React from 'react';\n\nimport type { PathRouteProps } from 'react-router-dom';\n\nconst ProtectedPreviewPage = React.lazy(() =>\n  import('./pages/Preview').then((mod) => ({ default: mod.ProtectedPreviewPage }))\n);\n\nconst routes: PathRouteProps[] = [\n  {\n    path: ':collectionType/:slug/:id/preview',\n    Component: ProtectedPreviewPage,\n  },\n  {\n    path: ':collectionType/:slug/preview',\n    Component: ProtectedPreviewPage,\n  },\n];\n\nexport { routes };\n", "/* eslint-disable check-file/filename-naming-convention */\nimport { lazy } from 'react';\n\nimport { Navigate, PathRouteProps, useParams } from 'react-router-dom';\n\nimport { COLLECTION_TYPES, SINGLE_TYPES } from './constants/collections';\nimport { routes as historyRoutes } from './history/routes';\nimport { routes as previewRoutes } from './preview/routes';\n\nconst ProtectedEditViewPage = lazy(() =>\n  import('./pages/EditView/EditViewPage').then((mod) => ({ default: mod.ProtectedEditViewPage }))\n);\nconst ProtectedListViewPage = lazy(() =>\n  import('./pages/ListView/ListViewPage').then((mod) => ({ default: mod.ProtectedListViewPage }))\n);\nconst ProtectedListConfiguration = lazy(() =>\n  import('./pages/ListConfiguration/ListConfigurationPage').then((mod) => ({\n    default: mod.ProtectedListConfiguration,\n  }))\n);\nconst ProtectedEditConfigurationPage = lazy(() =>\n  import('./pages/EditConfigurationPage').then((mod) => ({\n    default: mod.ProtectedEditConfigurationPage,\n  }))\n);\nconst ProtectedComponentConfigurationPage = lazy(() =>\n  import('./pages/ComponentConfigurationPage').then((mod) => ({\n    default: mod.ProtectedComponentConfigurationPage,\n  }))\n);\nconst NoPermissions = lazy(() =>\n  import('./pages/NoPermissionsPage').then((mod) => ({ default: mod.NoPermissions }))\n);\nconst NoContentType = lazy(() =>\n  import('./pages/NoContentTypePage').then((mod) => ({ default: mod.NoContentType }))\n);\n\nconst CollectionTypePages = () => {\n  const { collectionType } = useParams<{ collectionType: string }>();\n\n  /**\n   * We only support two types of collections.\n   */\n  if (collectionType !== COLLECTION_TYPES && collectionType !== SINGLE_TYPES) {\n    return <Navigate to=\"/404\" />;\n  }\n\n  return collectionType === COLLECTION_TYPES ? (\n    <ProtectedListViewPage />\n  ) : (\n    <ProtectedEditViewPage />\n  );\n};\n\nconst CLONE_RELATIVE_PATH = ':collectionType/:slug/clone/:origin';\nconst CLONE_PATH = `/content-manager/${CLONE_RELATIVE_PATH}`;\nconst LIST_RELATIVE_PATH = ':collectionType/:slug';\nconst LIST_PATH = `/content-manager/collection-types/:slug`;\n\nconst routes: PathRouteProps[] = [\n  {\n    path: LIST_RELATIVE_PATH,\n    element: <CollectionTypePages />,\n  },\n  {\n    path: ':collectionType/:slug/:id',\n    Component: ProtectedEditViewPage,\n  },\n  {\n    path: CLONE_RELATIVE_PATH,\n    Component: ProtectedEditViewPage,\n  },\n  {\n    path: ':collectionType/:slug/configurations/list',\n    Component: ProtectedListConfiguration,\n  },\n  {\n    path: 'components/:slug/configurations/edit',\n    Component: ProtectedComponentConfigurationPage,\n  },\n  {\n    path: ':collectionType/:slug/configurations/edit',\n    Component: ProtectedEditConfigurationPage,\n  },\n  {\n    path: '403',\n    Component: NoPermissions,\n  },\n  {\n    path: 'no-content-types',\n    Component: NoContentType,\n  },\n  ...historyRoutes,\n  ...previewRoutes,\n];\n\nexport { routes, CLONE_PATH, LIST_PATH };\n", "import * as React from 'react';\n\nimport {\n  useForm,\n  useNotification,\n  NotificationConfig,\n  useAPIErrorHandler,\n  useQueryParams,\n} from '@strapi/admin/strapi-admin';\nimport {\n  Button,\n  Dialog,\n  Flex,\n  Modal,\n  Radio,\n  Typography,\n  VisuallyHidden,\n  Menu,\n  ButtonProps,\n} from '@strapi/design-system';\nimport { Cross, More, WarningCircle } from '@strapi/icons';\nimport mapValues from 'lodash/fp/mapValues';\nimport { useIntl } from 'react-intl';\nimport { useMatch, useNavigate, useParams } from 'react-router-dom';\nimport { DefaultTheme, styled } from 'styled-components';\n\nimport { PUBLISHED_AT_ATTRIBUTE_NAME } from '../../../constants/attributes';\nimport { SINGLE_TYPES } from '../../../constants/collections';\nimport { useDocumentRBAC } from '../../../features/DocumentRBAC';\nimport { useDoc } from '../../../hooks/useDocument';\nimport { useDocumentActions } from '../../../hooks/useDocumentActions';\nimport { CLONE_PATH, LIST_PATH } from '../../../router';\nimport { useGetDraftRelationCountQuery } from '../../../services/documents';\nimport { isBaseQueryError, buildValidParams } from '../../../utils/api';\nimport { getTranslation } from '../../../utils/translations';\n\nimport type { RelationsFormValue } from './FormInputs/Relations';\nimport type { DocumentActionComponent } from '../../../content-manager';\n\n/* -------------------------------------------------------------------------------------------------\n * Types\n * -----------------------------------------------------------------------------------------------*/\ntype DocumentActionPosition = 'panel' | 'header' | 'table-row';\n\ninterface DocumentActionDescription {\n  label: string;\n  onClick?: (event: React.SyntheticEvent) => Promise<boolean | void> | boolean | void;\n  icon?: React.ReactNode;\n  /**\n   * @default false\n   */\n  disabled?: boolean;\n  /**\n   * @default 'panel'\n   * @description Where the action should be rendered.\n   */\n  position?: DocumentActionPosition | DocumentActionPosition[];\n  dialog?: DialogOptions | NotificationOptions | ModalOptions;\n  /**\n   * @default 'secondary'\n   */\n  variant?: ButtonProps['variant'];\n}\n\ninterface DialogOptions {\n  type: 'dialog';\n  title: string;\n  content?: React.ReactNode;\n  variant?: ButtonProps['variant'];\n  onConfirm?: () => void | Promise<void>;\n  onCancel?: () => void | Promise<void>;\n}\n\ninterface NotificationOptions {\n  type: 'notification';\n  title: string;\n  link?: {\n    label: string;\n    url: string;\n    target?: string;\n  };\n  content?: string;\n  onClose?: () => void;\n  status?: NotificationConfig['type'];\n  timeout?: number;\n}\n\ninterface ModalOptions {\n  type: 'modal';\n  title: string;\n  content: React.ComponentType<{ onClose: () => void }> | React.ReactNode;\n  footer?: React.ComponentType<{ onClose: () => void }> | React.ReactNode;\n  onClose?: () => void;\n}\n\n/* -------------------------------------------------------------------------------------------------\n * DocumentActions\n * -----------------------------------------------------------------------------------------------*/\n\ninterface Action extends DocumentActionDescription {\n  id: string;\n}\n\ninterface DocumentActionsProps {\n  actions: Action[];\n}\n\nconst DocumentActions = ({ actions }: DocumentActionsProps) => {\n  const { formatMessage } = useIntl();\n  const [primaryAction, secondaryAction, ...restActions] = actions.filter((action) => {\n    if (action.position === undefined) {\n      return true;\n    }\n\n    const positions = Array.isArray(action.position) ? action.position : [action.position];\n    return positions.includes('panel');\n  });\n\n  if (!primaryAction) {\n    return null;\n  }\n\n  return (\n    <Flex direction=\"column\" gap={2} alignItems=\"stretch\" width=\"100%\">\n      <Flex gap={2}>\n        <DocumentActionButton {...primaryAction} variant={primaryAction.variant || 'default'} />\n        {restActions.length > 0 ? (\n          <DocumentActionsMenu\n            actions={restActions}\n            label={formatMessage({\n              id: 'content-manager.containers.edit.panels.default.more-actions',\n              defaultMessage: 'More document actions',\n            })}\n          />\n        ) : null}\n      </Flex>\n      {secondaryAction ? (\n        <DocumentActionButton\n          {...secondaryAction}\n          variant={secondaryAction.variant || 'secondary'}\n        />\n      ) : null}\n    </Flex>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * DocumentActionButton\n * -----------------------------------------------------------------------------------------------*/\n\ninterface DocumentActionButtonProps extends Action {}\n\nconst DocumentActionButton = (action: DocumentActionButtonProps) => {\n  const [dialogId, setDialogId] = React.useState<string | null>(null);\n  const { toggleNotification } = useNotification();\n\n  const handleClick = (action: Action) => async (e: React.MouseEvent) => {\n    const { onClick = () => false, dialog, id } = action;\n\n    const muteDialog = await onClick(e);\n\n    if (dialog && !muteDialog) {\n      switch (dialog.type) {\n        case 'notification':\n          toggleNotification({\n            title: dialog.title,\n            message: dialog.content,\n            type: dialog.status,\n            timeout: dialog.timeout,\n            onClose: dialog.onClose,\n          });\n          break;\n        case 'dialog':\n        case 'modal':\n          e.preventDefault();\n          setDialogId(id);\n      }\n    }\n  };\n\n  const handleClose = () => {\n    setDialogId(null);\n  };\n\n  return (\n    <>\n      <Button\n        flex=\"auto\"\n        startIcon={action.icon}\n        disabled={action.disabled}\n        onClick={handleClick(action)}\n        justifyContent=\"center\"\n        variant={action.variant || 'default'}\n        paddingTop=\"7px\"\n        paddingBottom=\"7px\"\n      >\n        {action.label}\n      </Button>\n      {action.dialog?.type === 'dialog' ? (\n        <DocumentActionConfirmDialog\n          {...action.dialog}\n          variant={action.dialog?.variant ?? action.variant}\n          isOpen={dialogId === action.id}\n          onClose={handleClose}\n        />\n      ) : null}\n      {action.dialog?.type === 'modal' ? (\n        <DocumentActionModal\n          {...action.dialog}\n          onModalClose={handleClose}\n          isOpen={dialogId === action.id}\n        />\n      ) : null}\n    </>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * DocumentActionMenu\n * -----------------------------------------------------------------------------------------------*/\ninterface DocumentActionsMenuProps {\n  actions: Action[];\n  children?: React.ReactNode;\n  label?: string;\n  variant?: 'ghost' | 'tertiary';\n}\n\nconst MenuItem = styled(Menu.Item)<{ isVariantDanger?: boolean; isDisabled?: boolean }>`\n  &:hover {\n    background: ${({ theme, isVariantDanger, isDisabled }) =>\n      isVariantDanger && !isDisabled ? theme.colors.danger100 : 'neutral'};\n  }\n`;\n\nconst DocumentActionsMenu = ({\n  actions,\n  children,\n  label,\n  variant = 'tertiary',\n}: DocumentActionsMenuProps) => {\n  const [isOpen, setIsOpen] = React.useState(false);\n  const [dialogId, setDialogId] = React.useState<string | null>(null);\n  const { formatMessage } = useIntl();\n  const { toggleNotification } = useNotification();\n  const isDisabled = actions.every((action) => action.disabled) || actions.length === 0;\n\n  const handleClick = (action: Action) => async (e: React.SyntheticEvent) => {\n    const { onClick = () => false, dialog, id } = action;\n\n    const muteDialog = await onClick(e);\n\n    if (dialog && !muteDialog) {\n      switch (dialog.type) {\n        case 'notification':\n          toggleNotification({\n            title: dialog.title,\n            message: dialog.content,\n            type: dialog.status,\n            timeout: dialog.timeout,\n            onClose: dialog.onClose,\n          });\n          break;\n        case 'dialog':\n        case 'modal':\n          setDialogId(id);\n      }\n    }\n  };\n\n  const handleClose = () => {\n    setDialogId(null);\n    setIsOpen(false);\n  };\n\n  return (\n    <Menu.Root open={isOpen} onOpenChange={setIsOpen}>\n      <Menu.Trigger\n        disabled={isDisabled}\n        size=\"S\"\n        endIcon={null}\n        paddingTop=\"4px\"\n        paddingLeft=\"7px\"\n        paddingRight=\"7px\"\n        variant={variant}\n      >\n        <More aria-hidden focusable={false} />\n        <VisuallyHidden tag=\"span\">\n          {label ||\n            formatMessage({\n              id: 'content-manager.containers.edit.panels.default.more-actions',\n              defaultMessage: 'More document actions',\n            })}\n        </VisuallyHidden>\n      </Menu.Trigger>\n      <Menu.Content maxHeight={undefined} popoverPlacement=\"bottom-end\">\n        {actions.map((action) => {\n          return (\n            <MenuItem\n              disabled={action.disabled}\n              /* @ts-expect-error – TODO: this is an error in the DS where it is most likely a synthetic event, not regular. */\n              onSelect={handleClick(action)}\n              display=\"block\"\n              key={action.id}\n              isVariantDanger={action.variant === 'danger'}\n              isDisabled={action.disabled}\n            >\n              <Flex justifyContent=\"space-between\" gap={4}>\n                <Flex\n                  color={!action.disabled ? convertActionVariantToColor(action.variant) : 'inherit'}\n                  gap={2}\n                  tag=\"span\"\n                >\n                  <Flex\n                    tag=\"span\"\n                    color={\n                      !action.disabled ? convertActionVariantToIconColor(action.variant) : 'inherit'\n                    }\n                  >\n                    {action.icon}\n                  </Flex>\n                  {action.label}\n                </Flex>\n              </Flex>\n            </MenuItem>\n          );\n        })}\n        {children}\n      </Menu.Content>\n      {actions.map((action) => {\n        return (\n          <React.Fragment key={action.id}>\n            {action.dialog?.type === 'dialog' ? (\n              <DocumentActionConfirmDialog\n                {...action.dialog}\n                variant={action.variant}\n                isOpen={dialogId === action.id}\n                onClose={handleClose}\n              />\n            ) : null}\n            {action.dialog?.type === 'modal' ? (\n              <DocumentActionModal\n                {...action.dialog}\n                onModalClose={handleClose}\n                isOpen={dialogId === action.id}\n              />\n            ) : null}\n          </React.Fragment>\n        );\n      })}\n    </Menu.Root>\n  );\n};\n\nconst convertActionVariantToColor = (\n  variant: DocumentActionDescription['variant'] = 'secondary'\n): keyof DefaultTheme['colors'] | undefined => {\n  switch (variant) {\n    case 'danger':\n      return 'danger600';\n    case 'secondary':\n      return undefined;\n    case 'success':\n      return 'success600';\n    default:\n      return 'primary600';\n  }\n};\n\nconst convertActionVariantToIconColor = (\n  variant: DocumentActionDescription['variant'] = 'secondary'\n): keyof DefaultTheme['colors'] | undefined => {\n  switch (variant) {\n    case 'danger':\n      return 'danger600';\n    case 'secondary':\n      return 'neutral500';\n    case 'success':\n      return 'success600';\n    default:\n      return 'primary600';\n  }\n};\n\n/* -------------------------------------------------------------------------------------------------\n * DocumentActionConfirmDialog\n * -----------------------------------------------------------------------------------------------*/\n\ninterface DocumentActionConfirmDialogProps extends DialogOptions, Pick<Action, 'variant'> {\n  onClose: () => void;\n  isOpen: Dialog.Props['open'];\n}\n\nconst DocumentActionConfirmDialog = ({\n  onClose,\n  onCancel,\n  onConfirm,\n  title,\n  content,\n  isOpen,\n  variant = 'secondary',\n}: DocumentActionConfirmDialogProps) => {\n  const { formatMessage } = useIntl();\n\n  const handleClose = async () => {\n    if (onCancel) {\n      await onCancel();\n    }\n\n    onClose();\n  };\n\n  const handleConfirm = async () => {\n    if (onConfirm) {\n      await onConfirm();\n    }\n\n    onClose();\n  };\n\n  return (\n    <Dialog.Root open={isOpen} onOpenChange={handleClose}>\n      <Dialog.Content>\n        <Dialog.Header>{title}</Dialog.Header>\n        <Dialog.Body>{content}</Dialog.Body>\n        <Dialog.Footer>\n          <Dialog.Cancel>\n            <Button variant=\"tertiary\" fullWidth>\n              {formatMessage({\n                id: 'app.components.Button.cancel',\n                defaultMessage: 'Cancel',\n              })}\n            </Button>\n          </Dialog.Cancel>\n          <Button onClick={handleConfirm} variant={variant} fullWidth>\n            {formatMessage({\n              id: 'app.components.Button.confirm',\n              defaultMessage: 'Confirm',\n            })}\n          </Button>\n        </Dialog.Footer>\n      </Dialog.Content>\n    </Dialog.Root>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * DocumentActionModal\n * -----------------------------------------------------------------------------------------------*/\n\ninterface DocumentActionModalProps extends ModalOptions {\n  onModalClose: () => void;\n  isOpen?: boolean;\n}\n\nconst DocumentActionModal = ({\n  isOpen,\n  title,\n  onClose,\n  footer: Footer,\n  content: Content,\n  onModalClose,\n}: DocumentActionModalProps) => {\n  const handleClose = () => {\n    if (onClose) {\n      onClose();\n    }\n\n    onModalClose();\n  };\n\n  return (\n    <Modal.Root open={isOpen} onOpenChange={handleClose}>\n      <Modal.Content>\n        <Modal.Header>\n          <Modal.Title>{title}</Modal.Title>\n        </Modal.Header>\n        {typeof Content === 'function' ? (\n          <Content onClose={handleClose} />\n        ) : (\n          <Modal.Body>{Content}</Modal.Body>\n        )}\n        {typeof Footer === 'function' ? <Footer onClose={handleClose} /> : Footer}\n      </Modal.Content>\n    </Modal.Root>\n  );\n};\n\nconst transformData = (data: Record<string, any>): any => {\n  if (Array.isArray(data)) {\n    return data.map(transformData);\n  }\n\n  if (typeof data === 'object' && data !== null) {\n    if ('apiData' in data) {\n      return data.apiData;\n    }\n\n    return mapValues(transformData)(data);\n  }\n\n  return data;\n};\n\n/* -------------------------------------------------------------------------------------------------\n * DocumentActionComponents\n * -----------------------------------------------------------------------------------------------*/\n\nconst PublishAction: DocumentActionComponent = ({\n  activeTab,\n  documentId,\n  model,\n  collectionType,\n  meta,\n  document,\n}) => {\n  const { schema } = useDoc();\n  const navigate = useNavigate();\n  const { toggleNotification } = useNotification();\n  const { _unstableFormatValidationErrors: formatValidationErrors } = useAPIErrorHandler();\n  const isListView = useMatch(LIST_PATH) !== null;\n  const isCloning = useMatch(CLONE_PATH) !== null;\n  const { id } = useParams();\n  const { formatMessage } = useIntl();\n  const canPublish = useDocumentRBAC('PublishAction', ({ canPublish }) => canPublish);\n  const { publish } = useDocumentActions();\n  const [\n    countDraftRelations,\n    { isLoading: isLoadingDraftRelations, isError: isErrorDraftRelations },\n  ] = useGetDraftRelationCountQuery();\n  const [localCountOfDraftRelations, setLocalCountOfDraftRelations] = React.useState(0);\n  const [serverCountOfDraftRelations, setServerCountOfDraftRelations] = React.useState(0);\n\n  const [{ query, rawQuery }] = useQueryParams();\n  const params = React.useMemo(() => buildValidParams(query), [query]);\n\n  const modified = useForm('PublishAction', ({ modified }) => modified);\n  const setSubmitting = useForm('PublishAction', ({ setSubmitting }) => setSubmitting);\n  const isSubmitting = useForm('PublishAction', ({ isSubmitting }) => isSubmitting);\n  const validate = useForm('PublishAction', (state) => state.validate);\n  const setErrors = useForm('PublishAction', (state) => state.setErrors);\n  const formValues = useForm('PublishAction', ({ values }) => values);\n\n  React.useEffect(() => {\n    if (isErrorDraftRelations) {\n      toggleNotification({\n        type: 'danger',\n        message: formatMessage({\n          id: getTranslation('error.records.fetch-draft-relatons'),\n          defaultMessage: 'An error occurred while fetching draft relations on this document.',\n        }),\n      });\n    }\n  }, [isErrorDraftRelations, toggleNotification, formatMessage]);\n\n  React.useEffect(() => {\n    const localDraftRelations = new Set();\n\n    /**\n     * Extracts draft relations from the provided data object.\n     * It checks for a connect array of relations.\n     * If a relation has a status of 'draft', its id is added to the localDraftRelations set.\n     */\n    const extractDraftRelations = (data: Omit<RelationsFormValue, 'disconnect'>) => {\n      const relations = data.connect || [];\n      relations.forEach((relation) => {\n        if (relation.status === 'draft') {\n          localDraftRelations.add(relation.id);\n        }\n      });\n    };\n\n    /**\n     * Recursively traverses the provided data object to extract draft relations from arrays within 'connect' keys.\n     * If the data is an object, it looks for 'connect' keys to pass their array values to extractDraftRelations.\n     * It recursively calls itself for any non-null objects it contains.\n     */\n    const traverseAndExtract = (data: { [field: string]: any }) => {\n      Object.entries(data).forEach(([key, value]) => {\n        if (key === 'connect' && Array.isArray(value)) {\n          extractDraftRelations({ connect: value });\n        } else if (typeof value === 'object' && value !== null) {\n          traverseAndExtract(value);\n        }\n      });\n    };\n\n    if (!documentId || modified) {\n      traverseAndExtract(formValues);\n      setLocalCountOfDraftRelations(localDraftRelations.size);\n    }\n  }, [documentId, modified, formValues, setLocalCountOfDraftRelations]);\n\n  React.useEffect(() => {\n    if (!document || !document.documentId || isListView) {\n      return;\n    }\n\n    const fetchDraftRelationsCount = async () => {\n      const { data, error } = await countDraftRelations({\n        collectionType,\n        model,\n        documentId,\n        params,\n      });\n\n      if (error) {\n        throw error;\n      }\n\n      if (data) {\n        setServerCountOfDraftRelations(data.data);\n      }\n    };\n\n    fetchDraftRelationsCount();\n  }, [isListView, document, documentId, countDraftRelations, collectionType, model, params]);\n\n  const isDocumentPublished =\n    (document?.[PUBLISHED_AT_ATTRIBUTE_NAME] ||\n      meta?.availableStatus.some((doc) => doc[PUBLISHED_AT_ATTRIBUTE_NAME] !== null)) &&\n    document?.status !== 'modified';\n\n  if (!schema?.options?.draftAndPublish) {\n    return null;\n  }\n\n  const performPublish = async () => {\n    setSubmitting(true);\n\n    try {\n      const { errors } = await validate(true, {\n        status: 'published',\n      });\n\n      if (errors) {\n        toggleNotification({\n          type: 'danger',\n          message: formatMessage({\n            id: 'content-manager.validation.error',\n            defaultMessage:\n              'There are validation errors in your document. Please fix them before saving.',\n          }),\n        });\n\n        return;\n      }\n\n      const res = await publish(\n        {\n          collectionType,\n          model,\n          documentId,\n          params,\n        },\n        transformData(formValues)\n      );\n\n      if ('data' in res && collectionType !== SINGLE_TYPES) {\n        /**\n         * TODO: refactor the router so we can just do `../${res.data.documentId}` instead of this.\n         */\n        if (id === 'create') {\n          navigate({\n            pathname: `../${collectionType}/${model}/${res.data.documentId}`,\n            search: rawQuery,\n          });\n        }\n      } else if (\n        'error' in res &&\n        isBaseQueryError(res.error) &&\n        res.error.name === 'ValidationError'\n      ) {\n        setErrors(formatValidationErrors(res.error));\n      }\n    } finally {\n      setSubmitting(false);\n    }\n  };\n\n  const totalDraftRelations = localCountOfDraftRelations + serverCountOfDraftRelations;\n  // TODO skipping this for now as there is a bug with the draft relation count that will be worked on separately\n  // see RFC \"Count draft relations\" in Notion\n  const enableDraftRelationsCount = false;\n  const hasDraftRelations = enableDraftRelationsCount && totalDraftRelations > 0;\n\n  return {\n    /**\n     * Disabled when:\n     *  - currently if you're cloning a document we don't support publish & clone at the same time.\n     *  - the form is submitting\n     *  - the active tab is the published tab\n     *  - the document is already published & not modified\n     *  - the document is being created & not modified\n     *  - the user doesn't have the permission to publish\n     */\n    disabled:\n      isCloning ||\n      isSubmitting ||\n      isLoadingDraftRelations ||\n      activeTab === 'published' ||\n      (!modified && isDocumentPublished) ||\n      (!modified && !document?.documentId) ||\n      !canPublish,\n    label: formatMessage({\n      id: 'app.utils.publish',\n      defaultMessage: 'Publish',\n    }),\n    onClick: async () => {\n      if (hasDraftRelations) {\n        // In this case we need to show the user a confirmation dialog.\n        // Return from the onClick and let the dialog handle the process.\n        return;\n      }\n\n      await performPublish();\n    },\n    dialog: hasDraftRelations\n      ? {\n          type: 'dialog',\n          variant: 'danger',\n          footer: null,\n          title: formatMessage({\n            id: getTranslation(`popUpwarning.warning.bulk-has-draft-relations.title`),\n            defaultMessage: 'Confirmation',\n          }),\n          content: formatMessage(\n            {\n              id: getTranslation(`popUpwarning.warning.bulk-has-draft-relations.message`),\n              defaultMessage:\n                'This entry is related to {count, plural, one {# draft entry} other {# draft entries}}. Publishing it could leave broken links in your app.',\n            },\n            {\n              count: totalDraftRelations,\n            }\n          ),\n          onConfirm: async () => {\n            await performPublish();\n          },\n        }\n      : undefined,\n  };\n};\n\nPublishAction.type = 'publish';\nPublishAction.position = 'panel';\n\nconst UpdateAction: DocumentActionComponent = ({\n  activeTab,\n  documentId,\n  model,\n  collectionType,\n}) => {\n  const navigate = useNavigate();\n  const { toggleNotification } = useNotification();\n  const { _unstableFormatValidationErrors: formatValidationErrors } = useAPIErrorHandler();\n  const cloneMatch = useMatch(CLONE_PATH);\n  const isCloning = cloneMatch !== null;\n  const { formatMessage } = useIntl();\n  const { create, update, clone } = useDocumentActions();\n  const [{ query, rawQuery }] = useQueryParams();\n  const params = React.useMemo(() => buildValidParams(query), [query]);\n\n  const isSubmitting = useForm('UpdateAction', ({ isSubmitting }) => isSubmitting);\n  const modified = useForm('UpdateAction', ({ modified }) => modified);\n  const setSubmitting = useForm('UpdateAction', ({ setSubmitting }) => setSubmitting);\n  const document = useForm('UpdateAction', ({ values }) => values);\n  const validate = useForm('UpdateAction', (state) => state.validate);\n  const setErrors = useForm('UpdateAction', (state) => state.setErrors);\n  const resetForm = useForm('PublishAction', ({ resetForm }) => resetForm);\n\n  const handleUpdate = React.useCallback(async () => {\n    setSubmitting(true);\n\n    try {\n      if (!modified) {\n        return;\n      }\n\n      const { errors } = await validate(true, {\n        status: 'draft',\n      });\n\n      if (errors) {\n        toggleNotification({\n          type: 'danger',\n          message: formatMessage({\n            id: 'content-manager.validation.error',\n            defaultMessage:\n              'There are validation errors in your document. Please fix them before saving.',\n          }),\n        });\n\n        return;\n      }\n\n      if (isCloning) {\n        const res = await clone(\n          {\n            model,\n            documentId: cloneMatch.params.origin!,\n            params,\n          },\n          transformData(document)\n        );\n\n        if ('data' in res) {\n          navigate(\n            {\n              pathname: `../${res.data.documentId}`,\n              search: rawQuery,\n            },\n            { relative: 'path' }\n          );\n        } else if (\n          'error' in res &&\n          isBaseQueryError(res.error) &&\n          res.error.name === 'ValidationError'\n        ) {\n          setErrors(formatValidationErrors(res.error));\n        }\n      } else if (documentId || collectionType === SINGLE_TYPES) {\n        const res = await update(\n          {\n            collectionType,\n            model,\n            documentId,\n            params,\n          },\n          transformData(document)\n        );\n\n        if ('error' in res && isBaseQueryError(res.error) && res.error.name === 'ValidationError') {\n          setErrors(formatValidationErrors(res.error));\n        } else {\n          resetForm();\n        }\n      } else {\n        const res = await create(\n          {\n            model,\n            params,\n          },\n          transformData(document)\n        );\n\n        if ('data' in res && collectionType !== SINGLE_TYPES) {\n          navigate(\n            {\n              pathname: `../${res.data.documentId}`,\n              search: rawQuery,\n            },\n            { replace: true, relative: 'path' }\n          );\n        } else if (\n          'error' in res &&\n          isBaseQueryError(res.error) &&\n          res.error.name === 'ValidationError'\n        ) {\n          setErrors(formatValidationErrors(res.error));\n        }\n      }\n    } finally {\n      setSubmitting(false);\n    }\n  }, [\n    clone,\n    cloneMatch?.params.origin,\n    collectionType,\n    create,\n    document,\n    documentId,\n    formatMessage,\n    formatValidationErrors,\n    isCloning,\n    model,\n    modified,\n    navigate,\n    params,\n    rawQuery,\n    resetForm,\n    setErrors,\n    setSubmitting,\n    toggleNotification,\n    update,\n    validate,\n  ]);\n\n  // Auto-save on CMD+S or CMD+Enter on macOS, and CTRL+S or CTRL+Enter on Windows/Linux\n  React.useEffect(() => {\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (e.key === 'Enter' && (e.metaKey || e.ctrlKey)) {\n        e.preventDefault();\n        handleUpdate();\n      }\n    };\n\n    window.addEventListener('keydown', handleKeyDown);\n\n    return () => {\n      window.removeEventListener('keydown', handleKeyDown);\n    };\n  }, [handleUpdate]);\n\n  return {\n    /**\n     * Disabled when:\n     * - the form is submitting\n     * - the document is not modified & we're not cloning (you can save a clone entity straight away)\n     * - the active tab is the published tab\n     */\n    disabled: isSubmitting || (!modified && !isCloning) || activeTab === 'published',\n    label: formatMessage({\n      id: 'global.save',\n      defaultMessage: 'Save',\n    }),\n    onClick: handleUpdate,\n  };\n};\n\nUpdateAction.type = 'update';\nUpdateAction.position = 'panel';\n\nconst UNPUBLISH_DRAFT_OPTIONS = {\n  KEEP: 'keep',\n  DISCARD: 'discard',\n};\n\nconst UnpublishAction: DocumentActionComponent = ({\n  activeTab,\n  documentId,\n  model,\n  collectionType,\n  document,\n}) => {\n  const { formatMessage } = useIntl();\n  const { schema } = useDoc();\n  const canPublish = useDocumentRBAC('UnpublishAction', ({ canPublish }) => canPublish);\n  const { unpublish } = useDocumentActions();\n  const [{ query }] = useQueryParams();\n  const params = React.useMemo(() => buildValidParams(query), [query]);\n  const { toggleNotification } = useNotification();\n  const [shouldKeepDraft, setShouldKeepDraft] = React.useState(true);\n\n  const isDocumentModified = document?.status === 'modified';\n\n  const handleChange = (value: string) => {\n    setShouldKeepDraft(value === UNPUBLISH_DRAFT_OPTIONS.KEEP);\n  };\n\n  if (!schema?.options?.draftAndPublish) {\n    return null;\n  }\n\n  return {\n    disabled:\n      !canPublish ||\n      activeTab === 'published' ||\n      (document?.status !== 'published' && document?.status !== 'modified'),\n    label: formatMessage({\n      id: 'app.utils.unpublish',\n      defaultMessage: 'Unpublish',\n    }),\n    icon: <Cross />,\n    onClick: async () => {\n      /**\n       * return if there's no id & we're in a collection type, or the status modified\n       * for either collection type because we use a dialog to handle the process in\n       * the latter case.\n       */\n      if ((!documentId && collectionType !== SINGLE_TYPES) || isDocumentModified) {\n        if (!documentId) {\n          // This should never, ever, happen.\n          console.error(\n            \"You're trying to unpublish a document without an id, this is likely a bug with Strapi. Please open an issue.\"\n          );\n\n          toggleNotification({\n            message: formatMessage({\n              id: 'content-manager.actions.unpublish.error',\n              defaultMessage: 'An error occurred while trying to unpublish the document.',\n            }),\n            type: 'danger',\n          });\n        }\n\n        return;\n      }\n\n      await unpublish({\n        collectionType,\n        model,\n        documentId,\n        params,\n      });\n    },\n    dialog: isDocumentModified\n      ? {\n          type: 'dialog',\n          title: formatMessage({\n            id: 'app.components.ConfirmDialog.title',\n            defaultMessage: 'Confirmation',\n          }),\n          content: (\n            <Flex alignItems=\"flex-start\" direction=\"column\" gap={6}>\n              <Flex width=\"100%\" direction=\"column\" gap={2}>\n                <WarningCircle width=\"24px\" height=\"24px\" fill=\"danger600\" />\n                <Typography tag=\"p\" variant=\"omega\" textAlign=\"center\">\n                  {formatMessage({\n                    id: 'content-manager.actions.unpublish.dialog.body',\n                    defaultMessage: 'Are you sure?',\n                  })}\n                </Typography>\n              </Flex>\n              <Radio.Group\n                defaultValue={UNPUBLISH_DRAFT_OPTIONS.KEEP}\n                name=\"discard-options\"\n                aria-label={formatMessage({\n                  id: 'content-manager.actions.unpublish.dialog.radio-label',\n                  defaultMessage: 'Choose an option to unpublish the document.',\n                })}\n                onValueChange={handleChange}\n              >\n                <Radio.Item checked={shouldKeepDraft} value={UNPUBLISH_DRAFT_OPTIONS.KEEP}>\n                  {formatMessage({\n                    id: 'content-manager.actions.unpublish.dialog.option.keep-draft',\n                    defaultMessage: 'Keep draft',\n                  })}\n                </Radio.Item>\n                <Radio.Item checked={!shouldKeepDraft} value={UNPUBLISH_DRAFT_OPTIONS.DISCARD}>\n                  {formatMessage({\n                    id: 'content-manager.actions.unpublish.dialog.option.replace-draft',\n                    defaultMessage: 'Replace draft',\n                  })}\n                </Radio.Item>\n              </Radio.Group>\n            </Flex>\n          ),\n          onConfirm: async () => {\n            if (!documentId && collectionType !== SINGLE_TYPES) {\n              // This should never, ever, happen.\n              console.error(\n                \"You're trying to unpublish a document without an id, this is likely a bug with Strapi. Please open an issue.\"\n              );\n\n              toggleNotification({\n                message: formatMessage({\n                  id: 'content-manager.actions.unpublish.error',\n                  defaultMessage: 'An error occurred while trying to unpublish the document.',\n                }),\n                type: 'danger',\n              });\n            }\n\n            await unpublish(\n              {\n                collectionType,\n                model,\n                documentId,\n                params,\n              },\n              !shouldKeepDraft\n            );\n          },\n        }\n      : undefined,\n    variant: 'danger',\n    position: ['panel', 'table-row'],\n  };\n};\n\nUnpublishAction.type = 'unpublish';\nUnpublishAction.position = 'panel';\n\nconst DiscardAction: DocumentActionComponent = ({\n  activeTab,\n  documentId,\n  model,\n  collectionType,\n  document,\n}) => {\n  const { formatMessage } = useIntl();\n  const { schema } = useDoc();\n  const canUpdate = useDocumentRBAC('DiscardAction', ({ canUpdate }) => canUpdate);\n  const { discard } = useDocumentActions();\n  const [{ query }] = useQueryParams();\n  const params = React.useMemo(() => buildValidParams(query), [query]);\n\n  if (!schema?.options?.draftAndPublish) {\n    return null;\n  }\n\n  return {\n    disabled: !canUpdate || activeTab === 'published' || document?.status !== 'modified',\n    label: formatMessage({\n      id: 'content-manager.actions.discard.label',\n      defaultMessage: 'Discard changes',\n    }),\n    icon: <Cross />,\n    position: ['panel', 'table-row'],\n    variant: 'danger',\n    dialog: {\n      type: 'dialog',\n      title: formatMessage({\n        id: 'app.components.ConfirmDialog.title',\n        defaultMessage: 'Confirmation',\n      }),\n      content: (\n        <Flex direction=\"column\" gap={2}>\n          <WarningCircle width=\"24px\" height=\"24px\" fill=\"danger600\" />\n          <Typography tag=\"p\" variant=\"omega\" textAlign=\"center\">\n            {formatMessage({\n              id: 'content-manager.actions.discard.dialog.body',\n              defaultMessage: 'Are you sure?',\n            })}\n          </Typography>\n        </Flex>\n      ),\n      onConfirm: async () => {\n        await discard({\n          collectionType,\n          model,\n          documentId,\n          params,\n        });\n      },\n    },\n  };\n};\n\nDiscardAction.type = 'discard';\nDiscardAction.position = 'panel';\n\nconst DEFAULT_ACTIONS = [PublishAction, UpdateAction, UnpublishAction, DiscardAction];\n\nexport { DocumentActions, DocumentActionsMenu, DocumentActionButton, DEFAULT_ACTIONS };\nexport type {\n  DocumentActionDescription,\n  DocumentActionPosition,\n  DialogOptions,\n  NotificationOptions,\n  ModalOptions,\n};\n", "import * as React from 'react';\n\nimport { Duration, intervalToDuration, isPast } from 'date-fns';\nimport { useIntl } from 'react-intl';\n\nconst intervals: Array<keyof Duration> = ['years', 'months', 'days', 'hours', 'minutes', 'seconds'];\n\ninterface CustomInterval {\n  unit: keyof Duration;\n  text: string;\n  threshold: number;\n}\n\ninterface RelativeTimeProps extends React.ComponentPropsWithoutRef<'time'> {\n  timestamp: Date;\n  customIntervals?: CustomInterval[];\n}\n\n/**\n * Displays the relative time between a given timestamp and the current time.\n * You can display a custom message for given time intervals by passing an array of custom intervals.\n *\n * @example\n * ```jsx\n * <caption>Display \"last hour\" if the timestamp is less than an hour ago</caption>\n * <RelativeTime\n *  timestamp={new Date('2021-01-01')}\n *  customIntervals={[\n *   { unit: 'hours', threshold: 1, text: 'last hour' },\n *  ]}\n * ```\n */\nconst RelativeTime = React.forwardRef<HTMLTimeElement, RelativeTimeProps>(\n  ({ timestamp, customIntervals = [], ...restProps }, forwardedRef) => {\n    const { formatRelativeTime, formatDate, formatTime } = useIntl();\n\n    /**\n     * TODO: make this auto-update, like a clock.\n     */\n    const interval = intervalToDuration({\n      start: timestamp,\n      end: Date.now(),\n      // see https://github.com/date-fns/date-fns/issues/2891 – No idea why it's all partial it returns it every time.\n    }) as Required<Duration>;\n\n    const unit =\n      intervals.find((intervalUnit) => {\n        return interval[intervalUnit] > 0 && Object.keys(interval).includes(intervalUnit);\n      }) ?? 'seconds';\n\n    const relativeTime = isPast(timestamp) ? -interval[unit] : interval[unit];\n\n    // Display custom text if interval is less than the threshold\n    const customInterval = customIntervals.find(\n      (custom) => interval[custom.unit] < custom.threshold\n    );\n\n    const displayText = customInterval\n      ? customInterval.text\n      : formatRelativeTime(relativeTime, unit, { numeric: 'auto' });\n\n    return (\n      <time\n        ref={forwardedRef}\n        dateTime={timestamp.toISOString()}\n        role=\"time\"\n        title={`${formatDate(timestamp)} ${formatTime(timestamp)}`}\n        {...restProps}\n      >\n        {displayText}\n      </time>\n    );\n  }\n);\n\nexport { RelativeTime };\nexport type { CustomInterval, RelativeTimeProps };\n", "import type { SanitizedAdminUser } from '@strapi/admin/strapi-admin';\n\n/**\n * Retrieves the display name of an admin panel user\n */\nconst getDisplayName = ({\n  firstname,\n  lastname,\n  username,\n  email,\n}: Partial<\n  Pick<SanitizedAdminUser, 'firstname' | 'lastname' | 'username' | 'email'>\n> = {}): string => {\n  if (username) {\n    return username;\n  }\n\n  // firstname is not required if the user is created with a username\n  if (firstname) {\n    return `${firstname} ${lastname ?? ''}`.trim();\n  }\n\n  return email ?? '';\n};\n\nexport { getDisplayName };\n", "const capitalise = (str: string): string => str.charAt(0).toUpperCase() + str.slice(1);\n\nexport { capitalise };\n", "import { Status, StatusProps, Typography } from '@strapi/design-system';\nimport { useIntl } from 'react-intl';\n\nimport { capitalise } from '../../../utils/strings';\n\ninterface DocumentStatusProps extends Omit<StatusProps, 'children' | 'variant'> {\n  /**\n   * The status of the document (draft, published, etc.)\n   * @default 'draft'\n   */\n  status?: string;\n}\n\n/**\n * @public\n * @description Displays the status of a document (draft, published, etc.)\n * and automatically calculates the appropriate variant for the status.\n */\nconst DocumentStatus = ({ status = 'draft', size = 'S', ...restProps }: DocumentStatusProps) => {\n  const statusVariant =\n    status === 'draft' ? 'secondary' : status === 'published' ? 'success' : 'alternative';\n\n  const { formatMessage } = useIntl();\n\n  return (\n    <Status {...restProps} size={size} variant={statusVariant}>\n      <Typography tag=\"span\" variant=\"omega\" fontWeight=\"bold\">\n        {formatMessage({\n          id: `content-manager.containers.List.${status}`,\n          defaultMessage: capitalise(status),\n        })}\n      </Typography>\n    </Status>\n  );\n};\n\nexport { DocumentStatus };\nexport type { DocumentStatusProps };\n", "import * as React from 'react';\n\nimport {\n  DescriptionComponentRenderer,\n  useForm,\n  BackButton,\n  useNotification,\n  useStrapiApp,\n  useQueryParams,\n} from '@strapi/admin/strapi-admin';\nimport {\n  Box,\n  Flex,\n  SingleSelect,\n  SingleSelectOption,\n  Typography,\n  IconButton,\n  Dialog,\n} from '@strapi/design-system';\nimport { ListPlus, Pencil, Trash, WarningCircle } from '@strapi/icons';\nimport { useIntl } from 'react-intl';\nimport { useMatch, useNavigate, useParams } from 'react-router-dom';\n\nimport { RelativeTime } from '../../../components/RelativeTime';\nimport {\n  CREATED_AT_ATTRIBUTE_NAME,\n  CREATED_BY_ATTRIBUTE_NAME,\n  PUBLISHED_AT_ATTRIBUTE_NAME,\n  PUBLISHED_BY_ATTRIBUTE_NAME,\n  UPDATED_AT_ATTRIBUTE_NAME,\n  UPDATED_BY_ATTRIBUTE_NAME,\n} from '../../../constants/attributes';\nimport { COLLECTION_TYPES, SINGLE_TYPES } from '../../../constants/collections';\nimport { useDocumentRBAC } from '../../../features/DocumentRBAC';\nimport { useDoc } from '../../../hooks/useDocument';\nimport { useDocumentActions } from '../../../hooks/useDocumentActions';\nimport { CLONE_PATH, LIST_PATH } from '../../../router';\nimport { getDisplayName } from '../../../utils/users';\n\nimport { DocumentActionsMenu } from './DocumentActions';\nimport { DocumentStatus } from './DocumentStatus';\n\nimport type { ContentManagerPlugin, DocumentActionComponent } from '../../../content-manager';\n\n/* -------------------------------------------------------------------------------------------------\n * Header\n * -----------------------------------------------------------------------------------------------*/\n\ninterface HeaderProps {\n  isCreating?: boolean;\n  status?: 'draft' | 'published' | 'modified';\n  title?: string;\n}\n\nconst Header = ({ isCreating, status, title: documentTitle = 'Untitled' }: HeaderProps) => {\n  const { formatMessage } = useIntl();\n  const isCloning = useMatch(CLONE_PATH) !== null;\n  const params = useParams<{ collectionType: string; slug: string }>();\n\n  const title = isCreating\n    ? formatMessage({\n        id: 'content-manager.containers.edit.title.new',\n        defaultMessage: 'Create an entry',\n      })\n    : documentTitle;\n\n  return (\n    <Flex direction=\"column\" alignItems=\"flex-start\" paddingTop={6} paddingBottom={4} gap={2}>\n      <BackButton\n        fallback={\n          params.collectionType === SINGLE_TYPES\n            ? undefined\n            : `../${COLLECTION_TYPES}/${params.slug}`\n        }\n      />\n      <Flex width=\"100%\" justifyContent=\"space-between\" gap=\"80px\" alignItems=\"flex-start\">\n        <Typography variant=\"alpha\" tag=\"h1\">\n          {title}\n        </Typography>\n        <HeaderToolbar />\n      </Flex>\n      {status ? (\n        <Box marginTop={1}>\n          <DocumentStatus status={isCloning ? 'draft' : status} />\n        </Box>\n      ) : null}\n    </Flex>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * HeaderToolbar\n * -----------------------------------------------------------------------------------------------*/\n\ninterface DialogOptions {\n  type: 'dialog';\n  title: string;\n  content?: React.ReactNode;\n  footer?: React.ReactNode;\n}\n\ninterface HeaderActionDescription {\n  disabled?: boolean;\n  label: string;\n  icon?: React.ReactNode;\n  type?: 'icon' | 'default';\n  onClick?: (event: React.SyntheticEvent) => Promise<boolean | void> | boolean | void;\n  dialog?: DialogOptions;\n  options?: Array<{\n    disabled?: boolean;\n    label: string;\n    startIcon?: React.ReactNode;\n    textValue?: string;\n    value: string;\n  }>;\n  onSelect?: (value: string) => void;\n  value?: string;\n  customizeContent?: (value: string) => React.ReactNode;\n}\n\n/**\n * @description Contains the document actions that have `position: header`, if there are\n * none we still render the menu because we render the information about the document there.\n */\nconst HeaderToolbar = () => {\n  const { formatMessage } = useIntl();\n  const isCloning = useMatch(CLONE_PATH) !== null;\n  const [\n    {\n      query: { status = 'draft' },\n    },\n  ] = useQueryParams<{ status: 'draft' | 'published' }>();\n  const { model, id, document, meta, collectionType } = useDoc();\n  const plugins = useStrapiApp('HeaderToolbar', (state) => state.plugins);\n\n  return (\n    <Flex gap={2}>\n      <DescriptionComponentRenderer\n        props={{\n          activeTab: status,\n          model,\n          documentId: id,\n          document: isCloning ? undefined : document,\n          meta: isCloning ? undefined : meta,\n          collectionType,\n        }}\n        descriptions={(\n          plugins['content-manager'].apis as ContentManagerPlugin['config']['apis']\n        ).getHeaderActions()}\n      >\n        {(actions) => {\n          if (actions.length > 0) {\n            return <HeaderActions actions={actions} />;\n          } else {\n            return null;\n          }\n        }}\n      </DescriptionComponentRenderer>\n      <DescriptionComponentRenderer\n        props={{\n          activeTab: status,\n          model,\n          documentId: id,\n          document: isCloning ? undefined : document,\n          meta: isCloning ? undefined : meta,\n          collectionType,\n        }}\n        descriptions={(\n          plugins['content-manager'].apis as ContentManagerPlugin['config']['apis']\n        ).getDocumentActions('header')}\n      >\n        {(actions) => {\n          const headerActions = actions.filter((action) => {\n            const positions = Array.isArray(action.position) ? action.position : [action.position];\n            return positions.includes('header');\n          });\n\n          return (\n            <DocumentActionsMenu\n              actions={headerActions}\n              label={formatMessage({\n                id: 'content-manager.containers.edit.header.more-actions',\n                defaultMessage: 'More actions',\n              })}\n            >\n              <Information activeTab={status} />\n            </DocumentActionsMenu>\n          );\n        }}\n      </DescriptionComponentRenderer>\n    </Flex>\n  );\n};\n\ninterface InformationProps {\n  activeTab: 'draft' | 'published';\n}\n\nconst Information = ({ activeTab }: InformationProps) => {\n  const { formatMessage } = useIntl();\n  const { document, meta } = useDoc();\n\n  if (!document || !document.id) {\n    return null;\n  }\n\n  /**\n   * Because in the backend separate entries are made for draft and published\n   * documents, the creator fields are different for each of them. For example,\n   * you could make your draft in January and then publish it for the first time\n   * in Feb. This would make the createdAt value for the published entry in Feb\n   * but really we want to show the document as a whole. The draft entry will also\n   * never have the publishedAt values.\n   *\n   * So, we decipher which document to show the creator for based on the activeTab.\n   */\n\n  const createAndUpdateDocument =\n    activeTab === 'draft'\n      ? document\n      : meta?.availableStatus.find((status) => status.publishedAt === null);\n\n  const publishDocument =\n    activeTab === 'published'\n      ? document\n      : meta?.availableStatus.find((status) => status.publishedAt !== null);\n\n  const creator = createAndUpdateDocument?.[CREATED_BY_ATTRIBUTE_NAME]\n    ? getDisplayName(createAndUpdateDocument[CREATED_BY_ATTRIBUTE_NAME])\n    : null;\n\n  const updator = createAndUpdateDocument?.[UPDATED_BY_ATTRIBUTE_NAME]\n    ? getDisplayName(createAndUpdateDocument[UPDATED_BY_ATTRIBUTE_NAME])\n    : null;\n\n  const information: Array<{ isDisplayed?: boolean; label: string; value: React.ReactNode }> = [\n    {\n      isDisplayed: !!publishDocument?.[PUBLISHED_AT_ATTRIBUTE_NAME],\n      label: formatMessage({\n        id: 'content-manager.containers.edit.information.last-published.label',\n        defaultMessage: 'Published',\n      }),\n      value: formatMessage(\n        {\n          id: 'content-manager.containers.edit.information.last-published.value',\n          defaultMessage: `{time}{isAnonymous, select, true {} other { by {author}}}`,\n        },\n        {\n          time: (\n            <RelativeTime timestamp={new Date(publishDocument?.[PUBLISHED_AT_ATTRIBUTE_NAME])} />\n          ),\n          isAnonymous: !publishDocument?.[PUBLISHED_BY_ATTRIBUTE_NAME],\n          author: publishDocument?.[PUBLISHED_BY_ATTRIBUTE_NAME]\n            ? getDisplayName(publishDocument?.[PUBLISHED_BY_ATTRIBUTE_NAME])\n            : null,\n        }\n      ),\n    },\n    {\n      isDisplayed: !!createAndUpdateDocument?.[UPDATED_AT_ATTRIBUTE_NAME],\n      label: formatMessage({\n        id: 'content-manager.containers.edit.information.last-draft.label',\n        defaultMessage: 'Updated',\n      }),\n      value: formatMessage(\n        {\n          id: 'content-manager.containers.edit.information.last-draft.value',\n          defaultMessage: `{time}{isAnonymous, select, true {} other { by {author}}}`,\n        },\n        {\n          time: (\n            <RelativeTime\n              timestamp={new Date(createAndUpdateDocument?.[UPDATED_AT_ATTRIBUTE_NAME])}\n            />\n          ),\n          isAnonymous: !updator,\n          author: updator,\n        }\n      ),\n    },\n    {\n      isDisplayed: !!createAndUpdateDocument?.[CREATED_AT_ATTRIBUTE_NAME],\n      label: formatMessage({\n        id: 'content-manager.containers.edit.information.document.label',\n        defaultMessage: 'Created',\n      }),\n      value: formatMessage(\n        {\n          id: 'content-manager.containers.edit.information.document.value',\n          defaultMessage: `{time}{isAnonymous, select, true {} other { by {author}}}`,\n        },\n        {\n          time: (\n            <RelativeTime\n              timestamp={new Date(createAndUpdateDocument?.[CREATED_AT_ATTRIBUTE_NAME])}\n            />\n          ),\n          isAnonymous: !creator,\n          author: creator,\n        }\n      ),\n    },\n  ].filter((info) => info.isDisplayed);\n\n  return (\n    <Flex\n      borderWidth=\"1px 0 0 0\"\n      borderStyle=\"solid\"\n      borderColor=\"neutral150\"\n      direction=\"column\"\n      marginTop={2}\n      tag=\"dl\"\n      padding={5}\n      gap={3}\n      alignItems=\"flex-start\"\n      /**\n       * The menu content has a padding of 4px, but we want our divider (the border top applied) to\n       * be flush with the menu content. So we need to adjust the margin & width to account for the padding.\n       */\n      marginLeft=\"-0.4rem\"\n      marginRight=\"-0.4rem\"\n      width=\"calc(100% + 8px)\"\n    >\n      {information.map((info) => (\n        <Flex gap={1} direction=\"column\" alignItems=\"flex-start\" key={info.label}>\n          <Typography tag=\"dt\" variant=\"pi\" fontWeight=\"bold\">\n            {info.label}\n          </Typography>\n          <Typography tag=\"dd\" variant=\"pi\" textColor=\"neutral600\">\n            {info.value}\n          </Typography>\n        </Flex>\n      ))}\n    </Flex>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * HeaderActions\n * -----------------------------------------------------------------------------------------------*/\n\ninterface HeaderActionsProps {\n  actions: Array<HeaderActionDescription & { id: string }>;\n}\n\nconst HeaderActions = ({ actions }: HeaderActionsProps) => {\n  const [dialogId, setDialogId] = React.useState<string | null>(null);\n\n  const handleClick =\n    (action: HeaderActionDescription & { id: string }) => async (e: React.MouseEvent) => {\n      if (!('options' in action)) {\n        const { onClick = () => false, dialog, id } = action;\n\n        const muteDialog = await onClick(e);\n\n        if (dialog && !muteDialog) {\n          e.preventDefault();\n          setDialogId(id);\n        }\n      }\n    };\n\n  const handleClose = () => {\n    setDialogId(null);\n  };\n\n  return (\n    <Flex gap={1}>\n      {actions.map((action) => {\n        if (action.options) {\n          return (\n            <SingleSelect\n              key={action.id}\n              size=\"S\"\n              // @ts-expect-error – the DS will handle numbers, but we're not allowing the API.\n              onChange={action.onSelect}\n              aria-label={action.label}\n              {...action}\n            >\n              {action.options.map(({ label, ...option }) => (\n                <SingleSelectOption key={option.value} {...option}>\n                  {label}\n                </SingleSelectOption>\n              ))}\n            </SingleSelect>\n          );\n        } else {\n          if (action.type === 'icon') {\n            return (\n              <React.Fragment key={action.id}>\n                <IconButton\n                  disabled={action.disabled}\n                  label={action.label}\n                  size=\"S\"\n                  onClick={handleClick(action)}\n                >\n                  {action.icon}\n                </IconButton>\n                {action.dialog ? (\n                  <HeaderActionDialog\n                    {...action.dialog}\n                    isOpen={dialogId === action.id}\n                    onClose={handleClose}\n                  />\n                ) : null}\n              </React.Fragment>\n            );\n          }\n        }\n      })}\n    </Flex>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * HeaderActionDialog\n * -----------------------------------------------------------------------------------------------*/\ninterface HeaderActionDialogProps {\n  onClose: () => void;\n  onCancel?: () => Promise<void>;\n  title: string;\n  content?: React.ReactNode | ((props: { onClose: () => void }) => React.ReactNode);\n  isOpen: boolean;\n}\n\nconst HeaderActionDialog = ({\n  onClose,\n  onCancel,\n  title,\n  content: Content,\n  isOpen,\n}: HeaderActionDialogProps) => {\n  const handleClose = async () => {\n    if (onCancel) {\n      await onCancel();\n    }\n\n    onClose();\n  };\n\n  return (\n    <Dialog.Root open={isOpen} onOpenChange={handleClose}>\n      <Dialog.Content>\n        <Dialog.Header>{title}</Dialog.Header>\n        {typeof Content === 'function' ? <Content onClose={handleClose} /> : Content}\n      </Dialog.Content>\n    </Dialog.Root>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * DocumentActionComponents\n * -----------------------------------------------------------------------------------------------*/\n\nconst ConfigureTheViewAction: DocumentActionComponent = ({ collectionType, model }) => {\n  const navigate = useNavigate();\n  const { formatMessage } = useIntl();\n\n  return {\n    label: formatMessage({\n      id: 'app.links.configure-view',\n      defaultMessage: 'Configure the view',\n    }),\n    icon: <ListPlus />,\n    onClick: () => {\n      navigate(`../${collectionType}/${model}/configurations/edit`);\n    },\n    position: 'header',\n  };\n};\n\nConfigureTheViewAction.type = 'configure-the-view';\nConfigureTheViewAction.position = 'header';\n\nconst EditTheModelAction: DocumentActionComponent = ({ model }) => {\n  const navigate = useNavigate();\n  const { formatMessage } = useIntl();\n\n  return {\n    label: formatMessage({\n      id: 'content-manager.link-to-ctb',\n      defaultMessage: 'Edit the model',\n    }),\n    icon: <Pencil />,\n    onClick: () => {\n      navigate(`/plugins/content-type-builder/content-types/${model}`);\n    },\n    position: 'header',\n  };\n};\n\nEditTheModelAction.type = 'edit-the-model';\nEditTheModelAction.position = 'header';\n\nconst DeleteAction: DocumentActionComponent = ({ documentId, model, collectionType, document }) => {\n  const navigate = useNavigate();\n  const { formatMessage } = useIntl();\n  const listViewPathMatch = useMatch(LIST_PATH);\n  const canDelete = useDocumentRBAC('DeleteAction', (state) => state.canDelete);\n  const { delete: deleteAction } = useDocumentActions();\n  const { toggleNotification } = useNotification();\n  const setSubmitting = useForm('DeleteAction', (state) => state.setSubmitting);\n  const isLocalized = document?.locale != null;\n\n  return {\n    disabled: !canDelete || !document,\n    label: formatMessage(\n      {\n        id: 'content-manager.actions.delete.label',\n        defaultMessage: 'Delete entry{isLocalized, select, true { (all locales)} other {}}',\n      },\n      { isLocalized }\n    ),\n    icon: <Trash />,\n    dialog: {\n      type: 'dialog',\n      title: formatMessage({\n        id: 'app.components.ConfirmDialog.title',\n        defaultMessage: 'Confirmation',\n      }),\n      content: (\n        <Flex direction=\"column\" gap={2}>\n          <WarningCircle width=\"24px\" height=\"24px\" fill=\"danger600\" />\n          <Typography tag=\"p\" variant=\"omega\" textAlign=\"center\">\n            {formatMessage({\n              id: 'content-manager.actions.delete.dialog.body',\n              defaultMessage: 'Are you sure?',\n            })}\n          </Typography>\n        </Flex>\n      ),\n      onConfirm: async () => {\n        /**\n         * If we have a match, we're in the list view\n         * and therefore not in a form and shouldn't be\n         * trying to set the submitting value.\n         */\n        if (!listViewPathMatch) {\n          setSubmitting(true);\n        }\n        try {\n          if (!documentId && collectionType !== SINGLE_TYPES) {\n            console.error(\n              \"You're trying to delete a document without an id, this is likely a bug with Strapi. Please open an issue.\"\n            );\n\n            toggleNotification({\n              message: formatMessage({\n                id: 'content-manager.actions.delete.error',\n                defaultMessage: 'An error occurred while trying to delete the document.',\n              }),\n              type: 'danger',\n            });\n\n            return;\n          }\n\n          const res = await deleteAction({\n            documentId,\n            model,\n            collectionType,\n            params: {\n              locale: '*',\n            },\n          });\n\n          if (!('error' in res)) {\n            navigate({ pathname: `../${collectionType}/${model}` }, { replace: true });\n          }\n        } finally {\n          if (!listViewPathMatch) {\n            setSubmitting(false);\n          }\n        }\n      },\n    },\n    variant: 'danger',\n    position: ['header', 'table-row'],\n  };\n};\n\nDeleteAction.type = 'delete';\nDeleteAction.position = ['header', 'table-row'];\n\nconst DEFAULT_HEADER_ACTIONS = [EditTheModelAction, ConfigureTheViewAction, DeleteAction];\n\nexport { Header, DEFAULT_HEADER_ACTIONS };\nexport type { HeaderProps, HeaderActionDescription };\n", "import * as React from 'react';\n\nimport {\n  useQueryParams,\n  useStrapiApp,\n  DescriptionComponentRenderer,\n} from '@strapi/admin/strapi-admin';\nimport { Flex, Typography } from '@strapi/design-system';\nimport { useIntl } from 'react-intl';\nimport { useMatch } from 'react-router-dom';\n\nimport { InjectionZone } from '../../../components/InjectionZone';\nimport { useDoc } from '../../../hooks/useDocument';\nimport { CLONE_PATH } from '../../../router';\n\nimport { DocumentActions } from './DocumentActions';\n\nimport type {\n  ContentManagerPlugin,\n  DocumentActionProps,\n  PanelComponent,\n  PanelComponentProps,\n} from '../../../content-manager';\n\ninterface PanelDescription {\n  title: string;\n  content: React.ReactNode;\n}\n\n/* -------------------------------------------------------------------------------------------------\n * Panels\n * -----------------------------------------------------------------------------------------------*/\n\nconst Panels = () => {\n  const isCloning = useMatch(CLONE_PATH) !== null;\n  const [\n    {\n      query: { status },\n    },\n  ] = useQueryParams<{ status: 'draft' | 'published' }>({\n    status: 'draft',\n  });\n  const { model, id, document, meta, collectionType } = useDoc();\n  const plugins = useStrapiApp('Panels', (state) => state.plugins);\n\n  const props = {\n    activeTab: status,\n    model,\n    documentId: id,\n    document: isCloning ? undefined : document,\n    meta: isCloning ? undefined : meta,\n    collectionType,\n  } satisfies PanelComponentProps;\n\n  return (\n    <Flex direction=\"column\" alignItems=\"stretch\" gap={2}>\n      <DescriptionComponentRenderer\n        props={props}\n        descriptions={(\n          plugins['content-manager'].apis as ContentManagerPlugin['config']['apis']\n        ).getEditViewSidePanels()}\n      >\n        {(panels) =>\n          panels.map(({ content, id, ...description }) => (\n            <Panel key={id} {...description}>\n              {content}\n            </Panel>\n          ))\n        }\n      </DescriptionComponentRenderer>\n    </Flex>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * Default Action Panels (CE)\n * -----------------------------------------------------------------------------------------------*/\n\nconst ActionsPanel: PanelComponent = () => {\n  const { formatMessage } = useIntl();\n\n  return {\n    title: formatMessage({\n      id: 'content-manager.containers.edit.panels.default.title',\n      defaultMessage: 'Entry',\n    }),\n    content: <ActionsPanelContent />,\n  };\n};\n\nActionsPanel.type = 'actions';\n\nconst ActionsPanelContent = () => {\n  const isCloning = useMatch(CLONE_PATH) !== null;\n  const [\n    {\n      query: { status = 'draft' },\n    },\n  ] = useQueryParams<{ status: 'draft' | 'published' }>();\n  const { model, id, document, meta, collectionType } = useDoc();\n  const plugins = useStrapiApp('ActionsPanel', (state) => state.plugins);\n\n  const props = {\n    activeTab: status,\n    model,\n    documentId: id,\n    document: isCloning ? undefined : document,\n    meta: isCloning ? undefined : meta,\n    collectionType,\n  } satisfies DocumentActionProps;\n\n  return (\n    <Flex direction=\"column\" gap={2} width=\"100%\">\n      <DescriptionComponentRenderer\n        props={props}\n        descriptions={(\n          plugins['content-manager'].apis as ContentManagerPlugin['config']['apis']\n        ).getDocumentActions('panel')}\n      >\n        {(actions) => <DocumentActions actions={actions} />}\n      </DescriptionComponentRenderer>\n      <InjectionZone area=\"editView.right-links\" slug={model} />\n    </Flex>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * Panel\n * -----------------------------------------------------------------------------------------------*/\n\ninterface PanelProps extends Pick<PanelDescription, 'title'> {\n  children: React.ReactNode;\n}\n\nconst Panel = React.forwardRef<any, PanelProps>(({ children, title }, ref) => {\n  return (\n    <Flex\n      ref={ref}\n      tag=\"aside\"\n      aria-labelledby=\"additional-information\"\n      background=\"neutral0\"\n      borderColor=\"neutral150\"\n      hasRadius\n      paddingBottom={4}\n      paddingLeft={4}\n      paddingRight={4}\n      paddingTop={4}\n      shadow=\"tableShadow\"\n      gap={3}\n      direction=\"column\"\n      justifyContent=\"stretch\"\n      alignItems=\"flex-start\"\n    >\n      <Typography tag=\"h2\" variant=\"sigma\" textTransform=\"uppercase\" textColor=\"neutral600\">\n        {title}\n      </Typography>\n      {children}\n    </Flex>\n  );\n});\n\nexport { Panels, ActionsPanel };\nexport type { PanelDescription };\n", "import * as React from 'react';\n\nimport {\n  useTable,\n  useNotification,\n  useAPIErrorHandler,\n  useQueryParams,\n} from '@strapi/admin/strapi-admin';\nimport { Button, Flex, Dialog, Typography } from '@strapi/design-system';\nimport { Check, WarningCircle } from '@strapi/icons';\nimport { useIntl } from 'react-intl';\n\nimport { useDoc } from '../../../../hooks/useDocument';\nimport { useGetManyDraftRelationCountQuery } from '../../../../services/documents';\nimport { getTranslation } from '../../../../utils/translations';\n\nimport { Emphasis } from './Actions';\n\ninterface ConfirmBulkActionDialogProps {\n  endAction: React.ReactNode;\n  onToggleDialog: () => void;\n  isOpen?: boolean;\n  dialogBody: React.ReactNode;\n}\n\nconst ConfirmBulkActionDialog = ({\n  onToggleDialog,\n  isOpen = false,\n  dialogBody,\n  endAction,\n}: ConfirmBulkActionDialogProps) => {\n  const { formatMessage } = useIntl();\n\n  return (\n    <Dialog.Root open={isOpen}>\n      <Dialog.Content>\n        <Dialog.Header>\n          {formatMessage({\n            id: 'app.components.ConfirmDialog.title',\n            defaultMessage: 'Confirmation',\n          })}\n        </Dialog.Header>\n        <Dialog.Body>\n          <Flex direction=\"column\" alignItems=\"stretch\" gap={2}>\n            <Flex justifyContent=\"center\">\n              <WarningCircle width=\"24px\" height=\"24px\" fill=\"danger600\" />\n            </Flex>\n            {dialogBody}\n          </Flex>\n        </Dialog.Body>\n        <Dialog.Footer>\n          <Dialog.Cancel>\n            <Button fullWidth onClick={onToggleDialog} variant=\"tertiary\">\n              {formatMessage({\n                id: 'app.components.Button.cancel',\n                defaultMessage: 'Cancel',\n              })}\n            </Button>\n          </Dialog.Cancel>\n          {endAction}\n        </Dialog.Footer>\n      </Dialog.Content>\n    </Dialog.Root>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * BoldChunk\n * -----------------------------------------------------------------------------------------------*/\n\nconst BoldChunk = (chunks: React.ReactNode) => <Typography fontWeight=\"bold\">{chunks}</Typography>;\n\n/* -------------------------------------------------------------------------------------------------\n * ConfirmDialogPublishAll\n * -----------------------------------------------------------------------------------------------*/\n\ninterface ConfirmDialogPublishAllProps\n  extends Pick<ConfirmBulkActionDialogProps, 'isOpen' | 'onToggleDialog'> {\n  isConfirmButtonLoading?: boolean;\n  onConfirm: () => void;\n}\n\nconst ConfirmDialogPublishAll = ({\n  isOpen,\n  onToggleDialog,\n  isConfirmButtonLoading = false,\n  onConfirm,\n}: ConfirmDialogPublishAllProps) => {\n  const { formatMessage } = useIntl();\n  const selectedEntries = useTable('ConfirmDialogPublishAll', (state) => state.selectedRows);\n  const { toggleNotification } = useNotification();\n  const { _unstableFormatAPIError: formatAPIError } = useAPIErrorHandler(getTranslation);\n  const { model, schema } = useDoc();\n  const [{ query }] = useQueryParams<{\n    plugins?: {\n      i18n?: {\n        locale?: string;\n      };\n    };\n  }>();\n\n  // TODO skipping this for now as there is a bug with the draft relation count that will be worked on separately\n  // see RFC \"Count draft relations\" in Notion\n  const enableDraftRelationsCount = false;\n\n  const {\n    data: countDraftRelations = 0,\n    isLoading,\n    error,\n  } = useGetManyDraftRelationCountQuery(\n    {\n      model,\n      documentIds: selectedEntries.map((entry) => entry.documentId),\n      locale: query?.plugins?.i18n?.locale,\n    },\n    {\n      skip: !enableDraftRelationsCount || selectedEntries.length === 0,\n    }\n  );\n\n  React.useEffect(() => {\n    if (error) {\n      toggleNotification({ type: 'danger', message: formatAPIError(error) });\n    }\n  }, [error, formatAPIError, toggleNotification]);\n\n  if (error) {\n    return null;\n  }\n\n  return (\n    <ConfirmBulkActionDialog\n      isOpen={isOpen && !isLoading}\n      onToggleDialog={onToggleDialog}\n      dialogBody={\n        <>\n          <Typography id=\"confirm-description\" textAlign=\"center\">\n            {countDraftRelations > 0 &&\n              formatMessage(\n                {\n                  id: getTranslation(`popUpwarning.warning.bulk-has-draft-relations.message`),\n                  defaultMessage:\n                    '<b>{count} {count, plural, one { relation } other { relations } } out of {entities} { entities, plural, one { entry } other { entries } } {count, plural, one { is } other { are } }</b> not published yet and might lead to unexpected behavior. ',\n                },\n                {\n                  b: BoldChunk,\n                  count: countDraftRelations,\n                  entities: selectedEntries.length,\n                }\n              )}\n            {formatMessage({\n              id: getTranslation('popUpWarning.bodyMessage.contentType.publish.all'),\n              defaultMessage: 'Are you sure you want to publish these entries?',\n            })}\n          </Typography>\n          {schema?.pluginOptions &&\n            'i18n' in schema.pluginOptions &&\n            schema?.pluginOptions.i18n && (\n              <Typography textColor=\"danger500\" textAlign=\"center\">\n                {formatMessage(\n                  {\n                    id: getTranslation('Settings.list.actions.publishAdditionalInfos'),\n                    defaultMessage:\n                      'This will publish the active locale versions <em>(from Internationalization)</em>',\n                  },\n                  {\n                    em: Emphasis,\n                  }\n                )}\n              </Typography>\n            )}\n        </>\n      }\n      endAction={\n        <Button\n          onClick={onConfirm}\n          variant=\"secondary\"\n          startIcon={<Check />}\n          loading={isConfirmButtonLoading}\n        >\n          {formatMessage({\n            id: 'app.utils.publish',\n            defaultMessage: 'Publish',\n          })}\n        </Button>\n      }\n    />\n  );\n};\n\nexport { ConfirmDialogPublishAll, ConfirmBulkActionDialog };\nexport type { ConfirmDialogPublishAllProps, ConfirmBulkActionDialogProps };\n", "import * as React from 'react';\n\nimport {\n  useQueryParams,\n  Table,\n  useTable,\n  getYupValidationErrors,\n  FormErrors,\n} from '@strapi/admin/strapi-admin';\nimport {\n  Box,\n  Button,\n  Typography,\n  Modal,\n  IconButton,\n  Flex,\n  Tooltip,\n  Loader,\n  TypographyComponent,\n} from '@strapi/design-system';\nimport { Pencil, CrossCircle, CheckCircle, ArrowsCounterClockwise } from '@strapi/icons';\nimport { useIntl } from 'react-intl';\nimport { Link, useLocation } from 'react-router-dom';\nimport { styled } from 'styled-components';\nimport { ValidationError } from 'yup';\n\nimport { useDocumentRBAC } from '../../../../features/DocumentRBAC';\nimport { useContentTypeSchema } from '../../../../hooks/useContentTypeSchema';\nimport { useDocumentActions } from '../../../../hooks/useDocumentActions';\nimport { useDocLayout } from '../../../../hooks/useDocumentLayout';\nimport { contentManagerApi } from '../../../../services/api';\nimport {\n  useGetAllDocumentsQuery,\n  usePublishManyDocumentsMutation,\n} from '../../../../services/documents';\nimport { buildValidParams } from '../../../../utils/api';\nimport { getTranslation } from '../../../../utils/translations';\nimport { createYupSchema } from '../../../../utils/validation';\nimport { DocumentStatus } from '../../../EditView/components/DocumentStatus';\n\nimport { ConfirmDialogPublishAll, ConfirmDialogPublishAllProps } from './ConfirmBulkActionDialog';\n\nimport type { BulkActionComponent } from '../../../../content-manager';\nimport type { Document } from '../../../../hooks/useDocument';\n\nconst TypographyMaxWidth = styled<TypographyComponent>(Typography)`\n  max-width: 300px;\n`;\n\n/* -------------------------------------------------------------------------------------------------\n * EntryValidationText\n * -----------------------------------------------------------------------------------------------*/\n\nconst formatErrorMessages = (errors: FormErrors, parentKey: string, formatMessage: any) => {\n  const messages: string[] = [];\n\n  Object.entries(errors).forEach(([key, value]) => {\n    const currentKey = parentKey ? `${parentKey}.${key}` : key;\n\n    if (typeof value === 'object' && value !== null && !Array.isArray(value)) {\n      if ('id' in value && 'defaultMessage' in value) {\n        messages.push(\n          formatMessage(\n            {\n              id: `${value.id}.withField`,\n              defaultMessage: value.defaultMessage,\n            },\n            { field: currentKey }\n          )\n        );\n      } else {\n        messages.push(\n          ...formatErrorMessages(\n            // @ts-expect-error TODO: check why value is not compatible with FormErrors\n            value,\n            currentKey,\n            formatMessage\n          )\n        );\n      }\n    } else {\n      messages.push(\n        formatMessage(\n          {\n            id: `${value}.withField`,\n            defaultMessage: value,\n          },\n          { field: currentKey }\n        )\n      );\n    }\n  });\n\n  return messages;\n};\n\ninterface EntryValidationTextProps {\n  validationErrors?: FormErrors;\n  status: string;\n}\n\nconst EntryValidationText = ({ validationErrors, status }: EntryValidationTextProps) => {\n  const { formatMessage } = useIntl();\n\n  if (validationErrors) {\n    const validationErrorsMessages = formatErrorMessages(validationErrors, '', formatMessage).join(\n      ' '\n    );\n\n    return (\n      <Flex gap={2}>\n        <CrossCircle fill=\"danger600\" />\n        <Tooltip description={validationErrorsMessages}>\n          <TypographyMaxWidth textColor=\"danger600\" variant=\"omega\" fontWeight=\"semiBold\" ellipsis>\n            {validationErrorsMessages}\n          </TypographyMaxWidth>\n        </Tooltip>\n      </Flex>\n    );\n  }\n\n  if (status === 'published') {\n    return (\n      <Flex gap={2}>\n        <CheckCircle fill=\"success600\" />\n        <Typography textColor=\"success600\" fontWeight=\"bold\">\n          {formatMessage({\n            id: 'content-manager.bulk-publish.already-published',\n            defaultMessage: 'Already Published',\n          })}\n        </Typography>\n      </Flex>\n    );\n  }\n\n  if (status === 'modified') {\n    return (\n      <Flex gap={2}>\n        <ArrowsCounterClockwise fill=\"alternative600\" />\n        <Typography>\n          {formatMessage({\n            id: 'content-manager.bulk-publish.modified',\n            defaultMessage: 'Ready to publish changes',\n          })}\n        </Typography>\n      </Flex>\n    );\n  }\n\n  return (\n    <Flex gap={2}>\n      <CheckCircle fill=\"success600\" />\n      <Typography>\n        {formatMessage({\n          id: 'app.utils.ready-to-publish',\n          defaultMessage: 'Ready to publish',\n        })}\n      </Typography>\n    </Flex>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * SelectedEntriesTableContent\n * -----------------------------------------------------------------------------------------------*/\n\ninterface SelectedEntriesTableContentProps {\n  isPublishing?: boolean;\n  rowsToDisplay?: TableRow[];\n  entriesToPublish?: TableRow['documentId'][];\n  validationErrors: Record<string, EntryValidationTextProps['validationErrors']>;\n}\n\nconst TABLE_HEADERS = [\n  { name: 'id', label: 'id' },\n  { name: 'name', label: 'name' },\n  { name: 'status', label: 'status' },\n  { name: 'publicationStatus', label: 'Publication status' },\n];\n\nconst SelectedEntriesTableContent = ({\n  isPublishing,\n  rowsToDisplay = [],\n  entriesToPublish = [],\n  validationErrors = {},\n}: SelectedEntriesTableContentProps) => {\n  const { pathname } = useLocation();\n  const { formatMessage } = useIntl();\n\n  const {\n    list: {\n      settings: { mainField },\n    },\n  } = useDocLayout();\n\n  const shouldDisplayMainField = mainField != null && mainField !== 'id';\n\n  return (\n    <Table.Content>\n      <Table.Head>\n        <Table.HeaderCheckboxCell />\n        {TABLE_HEADERS.filter((head) => head.name !== 'name' || shouldDisplayMainField).map(\n          (head) => (\n            <Table.HeaderCell key={head.name} {...head} />\n          )\n        )}\n      </Table.Head>\n      <Table.Loading />\n      <Table.Body>\n        {rowsToDisplay.map((row, index) => (\n          <Table.Row key={row.id}>\n            <Table.CheckboxCell id={row.id} />\n            <Table.Cell>\n              <Typography>{row.id}</Typography>\n            </Table.Cell>\n            {shouldDisplayMainField && (\n              <Table.Cell>\n                <Typography>{row[mainField as keyof TableRow]}</Typography>\n              </Table.Cell>\n            )}\n            <Table.Cell>\n              <DocumentStatus status={row.status} maxWidth={'min-content'} />\n            </Table.Cell>\n            <Table.Cell>\n              {isPublishing && entriesToPublish.includes(row.documentId) ? (\n                <Flex gap={2}>\n                  <Typography>\n                    {formatMessage({\n                      id: 'content-manager.success.record.publishing',\n                      defaultMessage: 'Publishing...',\n                    })}\n                  </Typography>\n                  <Loader small />\n                </Flex>\n              ) : (\n                <EntryValidationText\n                  validationErrors={validationErrors[row.documentId]}\n                  status={row.status}\n                />\n              )}\n            </Table.Cell>\n            <Table.Cell>\n              <Flex>\n                <IconButton\n                  tag={Link}\n                  to={{\n                    pathname: `${pathname}/${row.documentId}`,\n                    search: row.locale && `?plugins[i18n][locale]=${row.locale}`,\n                  }}\n                  state={{ from: pathname }}\n                  label={formatMessage({\n                    id: 'content-manager.bulk-publish.edit',\n                    defaultMessage: 'Edit',\n                  })}\n                  target=\"_blank\"\n                  marginLeft=\"auto\"\n                  variant=\"ghost\"\n                >\n                  <Pencil width={'1.6rem'} height={'1.6rem'} />\n                </IconButton>\n              </Flex>\n            </Table.Cell>\n          </Table.Row>\n        ))}\n      </Table.Body>\n    </Table.Content>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * BoldChunk\n * -----------------------------------------------------------------------------------------------*/\n\nconst BoldChunk = (chunks: React.ReactNode) => <Typography fontWeight=\"bold\">{chunks}</Typography>;\n\n/* -------------------------------------------------------------------------------------------------\n * SelectedEntriesModalContent\n * -----------------------------------------------------------------------------------------------*/\n\ninterface TableRow extends Document {}\n\ninterface SelectedEntriesModalContentProps {\n  listViewSelectedEntries: TableRow[];\n  toggleModal: ConfirmDialogPublishAllProps['onToggleDialog'];\n  setListViewSelectedDocuments: (documents: TableRow[]) => void;\n  model: string;\n}\n\nconst SelectedEntriesModalContent = ({\n  listViewSelectedEntries,\n  toggleModal,\n  setListViewSelectedDocuments,\n  model,\n}: SelectedEntriesModalContentProps) => {\n  const { formatMessage } = useIntl();\n  const { schema, components } = useContentTypeSchema(model);\n  const documentIds = listViewSelectedEntries.map(({ documentId }) => documentId);\n\n  // We want to keep the selected entries order same as the list view\n  const [{ query }] = useQueryParams<{ sort?: string; plugins?: Record<string, any> }>();\n  const params = React.useMemo(() => buildValidParams(query), [query]);\n\n  // Fetch the documents based on the selected entries and update the modal table\n  const { data, isLoading, isFetching, refetch } = useGetAllDocumentsQuery(\n    {\n      model,\n      params: {\n        page: '1',\n        pageSize: documentIds.length.toString(),\n        sort: query.sort,\n        filters: {\n          documentId: {\n            $in: documentIds,\n          },\n        },\n        locale: query.plugins?.i18n?.locale,\n      },\n    },\n    {\n      selectFromResult: ({ data, ...restRes }) => ({ data: data?.results ?? [], ...restRes }),\n    }\n  );\n\n  // Validate the entries based on the schema to show errors if any\n  const { rows, validationErrors } = React.useMemo(() => {\n    if (data.length > 0 && schema) {\n      const validate = createYupSchema(\n        schema.attributes,\n        components,\n        // Since this is the \"Publish\" action, the validation\n        // schema must enforce the rules for published entities\n        { status: 'published' }\n      );\n      const validationErrors: Record<TableRow['documentId'], FormErrors> = {};\n      const rows = data.map((entry: Document) => {\n        try {\n          validate.validateSync(entry, { abortEarly: false });\n\n          return entry;\n        } catch (e) {\n          if (e instanceof ValidationError) {\n            validationErrors[entry.documentId] = getYupValidationErrors(e);\n          }\n\n          return entry;\n        }\n      });\n\n      return { rows, validationErrors };\n    }\n\n    return {\n      rows: [],\n      validationErrors: {},\n    };\n  }, [components, data, schema]);\n\n  const [publishedCount, setPublishedCount] = React.useState(0);\n  const [isDialogOpen, setIsDialogOpen] = React.useState(false);\n\n  const { publishMany: bulkPublishAction } = useDocumentActions();\n  const [, { isLoading: isSubmittingForm }] = usePublishManyDocumentsMutation();\n\n  const selectedRows = useTable('publishAction', (state) => state.selectedRows);\n\n  // Filter selected entries from the updated modal table rows\n  const selectedEntries = rows.filter((entry) =>\n    selectedRows.some((selectedEntry) => selectedEntry.documentId === entry.documentId)\n  );\n\n  const entriesToPublish = selectedEntries\n    .filter((entry) => !validationErrors[entry.documentId])\n    .map((entry) => entry.documentId);\n\n  const selectedEntriesWithErrorsCount = selectedEntries.filter(\n    ({ documentId }) => validationErrors[documentId]\n  ).length;\n  const selectedEntriesPublished = selectedEntries.filter(\n    ({ status }) => status === 'published'\n  ).length;\n  const selectedEntriesWithNoErrorsCount =\n    selectedEntries.length - selectedEntriesWithErrorsCount - selectedEntriesPublished;\n\n  const toggleDialog = () => setIsDialogOpen((prev) => !prev);\n\n  const handleConfirmBulkPublish = async () => {\n    toggleDialog();\n\n    const res = await bulkPublishAction({ model: model, documentIds: entriesToPublish, params });\n    if (!('error' in res)) {\n      // @ts-expect-error TODO: check with BE why response is not consistent with other actions\n      setPublishedCount(res.count);\n\n      const unpublishedEntries = rows.filter((row) => {\n        return !entriesToPublish.includes(row.documentId);\n      });\n      // Keep selection of the entries in list view that were not published\n      setListViewSelectedDocuments(unpublishedEntries);\n    }\n  };\n\n  const getFormattedCountMessage = () => {\n    if (publishedCount) {\n      return formatMessage(\n        {\n          id: getTranslation('containers.list.selectedEntriesModal.publishedCount'),\n          defaultMessage:\n            '<b>{publishedCount}</b> {publishedCount, plural, =0 {entries} one {entry} other {entries}} published. <b>{withErrorsCount}</b> {withErrorsCount, plural, =0 {entries} one {entry} other {entries}} waiting for action.',\n        },\n        {\n          publishedCount,\n          withErrorsCount: selectedEntriesWithErrorsCount,\n          b: BoldChunk,\n        }\n      );\n    }\n\n    return formatMessage(\n      {\n        id: getTranslation('containers.list.selectedEntriesModal.selectedCount'),\n        defaultMessage:\n          '<b>{alreadyPublishedCount}</b> {alreadyPublishedCount, plural, =0 {entries} one {entry} other {entries}} already published. <b>{readyToPublishCount}</b> {readyToPublishCount, plural, =0 {entries} one {entry} other {entries}} ready to publish. <b>{withErrorsCount}</b> {withErrorsCount, plural, =0 {entries} one {entry} other {entries}} waiting for action.',\n      },\n      {\n        readyToPublishCount: selectedEntriesWithNoErrorsCount,\n        withErrorsCount: selectedEntriesWithErrorsCount,\n        alreadyPublishedCount: selectedEntriesPublished,\n        b: BoldChunk,\n      }\n    );\n  };\n\n  return (\n    <>\n      <Modal.Body>\n        <Typography>{getFormattedCountMessage()}</Typography>\n        <Box marginTop={5}>\n          <SelectedEntriesTableContent\n            isPublishing={isSubmittingForm}\n            rowsToDisplay={rows}\n            entriesToPublish={entriesToPublish}\n            validationErrors={validationErrors}\n          />\n        </Box>\n      </Modal.Body>\n      <Modal.Footer>\n        <Button onClick={toggleModal} variant=\"tertiary\">\n          {formatMessage({\n            id: 'app.components.Button.cancel',\n            defaultMessage: 'Cancel',\n          })}\n        </Button>\n        <Flex gap={2}>\n          <Button onClick={refetch} variant=\"tertiary\" loading={isFetching}>\n            {formatMessage({ id: 'app.utils.refresh', defaultMessage: 'Refresh' })}\n          </Button>\n          <Button\n            onClick={toggleDialog}\n            disabled={\n              selectedEntries.length === 0 ||\n              selectedEntries.length === selectedEntriesWithErrorsCount ||\n              selectedEntriesPublished === selectedEntries.length ||\n              isLoading\n            }\n            loading={isSubmittingForm}\n          >\n            {formatMessage({ id: 'app.utils.publish', defaultMessage: 'Publish' })}\n          </Button>\n        </Flex>\n      </Modal.Footer>\n      <ConfirmDialogPublishAll\n        isOpen={isDialogOpen}\n        onToggleDialog={toggleDialog}\n        isConfirmButtonLoading={isSubmittingForm}\n        onConfirm={handleConfirmBulkPublish}\n      />\n    </>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * PublishAction\n * -----------------------------------------------------------------------------------------------*/\n\nconst PublishAction: BulkActionComponent = ({ documents, model }) => {\n  const { formatMessage } = useIntl();\n  // Publish button visibility\n  const hasPublishPermission = useDocumentRBAC('unpublishAction', (state) => state.canPublish);\n  const showPublishButton =\n    hasPublishPermission && documents.some(({ status }) => status !== 'published');\n\n  const setListViewSelectedDocuments = useTable('publishAction', (state) => state.selectRow);\n\n  const refetchList = () => {\n    contentManagerApi.util.invalidateTags([{ type: 'Document', id: `${model}_LIST` }]);\n  };\n\n  if (!showPublishButton) return null;\n\n  return {\n    actionType: 'publish',\n    variant: 'tertiary',\n    label: formatMessage({ id: 'app.utils.publish', defaultMessage: 'Publish' }),\n    dialog: {\n      type: 'modal',\n      title: formatMessage({\n        id: getTranslation('containers.ListPage.selectedEntriesModal.title'),\n        defaultMessage: 'Publish entries',\n      }),\n      content: ({ onClose }) => {\n        return (\n          <Table.Root rows={documents} defaultSelectedRows={documents} headers={TABLE_HEADERS}>\n            <SelectedEntriesModalContent\n              listViewSelectedEntries={documents}\n              toggleModal={() => {\n                onClose();\n                refetchList();\n              }}\n              setListViewSelectedDocuments={setListViewSelectedDocuments}\n              model={model}\n            />\n          </Table.Root>\n        );\n      },\n      onClose: () => {\n        refetchList();\n      },\n    },\n  };\n};\n\nexport { PublishAction, SelectedEntriesModalContent };\n", "import * as React from 'react';\n\nimport {\n  useStrapiApp,\n  DescriptionComponentRenderer,\n  useTable,\n  useQueryParams,\n} from '@strapi/admin/strapi-admin';\nimport { Box, ButtonProps, Flex, Typography } from '@strapi/design-system';\nimport { WarningCircle } from '@strapi/icons';\nimport { useIntl } from 'react-intl';\n\nimport { useDocumentRBAC } from '../../../../features/DocumentRBAC';\nimport { useDoc } from '../../../../hooks/useDocument';\nimport { useDocumentActions } from '../../../../hooks/useDocumentActions';\nimport { buildValidParams } from '../../../../utils/api';\nimport { getTranslation } from '../../../../utils/translations';\nimport {\n  DialogOptions,\n  DocumentActionButton,\n  ModalOptions,\n  NotificationOptions,\n} from '../../../EditView/components/DocumentActions';\n\nimport { PublishAction } from './PublishAction';\n\nimport type { BulkActionComponent, ContentManagerPlugin } from '../../../../content-manager';\n\ninterface BulkActionDescription {\n  dialog?: DialogOptions | NotificationOptions | ModalOptions;\n  disabled?: boolean;\n  icon?: React.ReactNode;\n  label: string;\n  onClick?: (event: React.SyntheticEvent) => void;\n  /**\n   * @default 'default'\n   */\n  type?: 'icon' | 'default';\n  /**\n   * @default 'secondary'\n   */\n  variant?: ButtonProps['variant'];\n}\n\n/* -------------------------------------------------------------------------------------------------\n * BulkActionsRenderer\n * -----------------------------------------------------------------------------------------------*/\n\nconst BulkActionsRenderer = () => {\n  const plugins = useStrapiApp('BulkActionsRenderer', (state) => state.plugins);\n\n  const { model, collectionType } = useDoc();\n  const { selectedRows } = useTable('BulkActionsRenderer', (state) => state);\n\n  return (\n    <Flex gap={2}>\n      <DescriptionComponentRenderer\n        props={{\n          model,\n          collectionType,\n          documents: selectedRows,\n        }}\n        descriptions={(\n          plugins['content-manager'].apis as ContentManagerPlugin['config']['apis']\n        ).getBulkActions()}\n      >\n        {(actions) => actions.map((action) => <DocumentActionButton key={action.id} {...action} />)}\n      </DescriptionComponentRenderer>\n    </Flex>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * DefaultBulkActions\n * -----------------------------------------------------------------------------------------------*/\n\nconst DeleteAction: BulkActionComponent = ({ documents, model }) => {\n  const { formatMessage } = useIntl();\n  const { schema: contentType } = useDoc();\n  const selectRow = useTable('DeleteAction', (state) => state.selectRow);\n  const hasI18nEnabled = Boolean(contentType?.pluginOptions?.i18n);\n  const [{ query }] = useQueryParams<{ plugins?: { i18n?: { locale?: string } } }>();\n  const params = React.useMemo(() => buildValidParams(query), [query]);\n  const hasDeletePermission = useDocumentRBAC('deleteAction', (state) => state.canDelete);\n  const { deleteMany: bulkDeleteAction } = useDocumentActions();\n  const documentIds = documents.map(({ documentId }) => documentId);\n\n  const handleConfirmBulkDelete = async () => {\n    const res = await bulkDeleteAction({\n      documentIds,\n      model,\n      params,\n    });\n    if (!('error' in res)) {\n      selectRow([]);\n    }\n  };\n\n  if (!hasDeletePermission) return null;\n\n  return {\n    variant: 'danger-light',\n    label: formatMessage({ id: 'global.delete', defaultMessage: 'Delete' }),\n    dialog: {\n      type: 'dialog',\n      title: formatMessage({\n        id: 'app.components.ConfirmDialog.title',\n        defaultMessage: 'Confirmation',\n      }),\n      content: (\n        <Flex direction=\"column\" alignItems=\"stretch\" gap={2}>\n          <Flex justifyContent=\"center\">\n            <WarningCircle width=\"24px\" height=\"24px\" fill=\"danger600\" />\n          </Flex>\n          <Typography id=\"confirm-description\" textAlign=\"center\">\n            {formatMessage({\n              id: 'popUpWarning.bodyMessage.contentType.delete.all',\n              defaultMessage: 'Are you sure you want to delete these entries?',\n            })}\n          </Typography>\n          {hasI18nEnabled && (\n            <Box textAlign=\"center\" padding={3}>\n              <Typography textColor=\"danger500\">\n                {formatMessage(\n                  {\n                    id: getTranslation('Settings.list.actions.deleteAdditionalInfos'),\n                    defaultMessage:\n                      'This will delete the active locale versions <em>(from Internationalization)</em>',\n                  },\n                  {\n                    em: Emphasis,\n                  }\n                )}\n              </Typography>\n            </Box>\n          )}\n        </Flex>\n      ),\n      onConfirm: handleConfirmBulkDelete,\n    },\n  };\n};\n\nDeleteAction.type = 'delete';\n\nconst UnpublishAction: BulkActionComponent = ({ documents, model }) => {\n  const { formatMessage } = useIntl();\n  const { schema } = useDoc();\n  const selectRow = useTable('UnpublishAction', (state) => state.selectRow);\n  const hasPublishPermission = useDocumentRBAC('unpublishAction', (state) => state.canPublish);\n  const hasI18nEnabled = Boolean(schema?.pluginOptions?.i18n);\n  const hasDraftAndPublishEnabled = Boolean(schema?.options?.draftAndPublish);\n  const { unpublishMany: bulkUnpublishAction } = useDocumentActions();\n  const documentIds = documents.map(({ documentId }) => documentId);\n  const [{ query }] = useQueryParams();\n  const params = React.useMemo(() => buildValidParams(query), [query]);\n\n  const handleConfirmBulkUnpublish = async () => {\n    const data = await bulkUnpublishAction({ documentIds, model, params });\n    if (!('error' in data)) {\n      selectRow([]);\n    }\n  };\n\n  const showUnpublishButton =\n    hasDraftAndPublishEnabled &&\n    hasPublishPermission &&\n    documents.some((entry) => entry.status === 'published' || entry.status === 'modified');\n\n  if (!showUnpublishButton) return null;\n\n  return {\n    variant: 'tertiary',\n    label: formatMessage({ id: 'app.utils.unpublish', defaultMessage: 'Unpublish' }),\n    dialog: {\n      type: 'dialog',\n      title: formatMessage({\n        id: 'app.components.ConfirmDialog.title',\n        defaultMessage: 'Confirmation',\n      }),\n      content: (\n        <Flex direction=\"column\" alignItems=\"stretch\" gap={2}>\n          <Flex justifyContent=\"center\">\n            <WarningCircle width=\"24px\" height=\"24px\" fill=\"danger600\" />\n          </Flex>\n          <Typography id=\"confirm-description\" textAlign=\"center\">\n            {formatMessage({\n              id: 'popUpWarning.bodyMessage.contentType.unpublish.all',\n              defaultMessage: 'Are you sure you want to unpublish these entries?',\n            })}\n          </Typography>\n          {hasI18nEnabled && (\n            <Box textAlign=\"center\" padding={3}>\n              <Typography textColor=\"danger500\">\n                {formatMessage(\n                  {\n                    id: getTranslation('Settings.list.actions.unpublishAdditionalInfos'),\n                    defaultMessage:\n                      'This will unpublish the active locale versions <em>(from Internationalization)</em>',\n                  },\n                  {\n                    em: Emphasis,\n                  }\n                )}\n              </Typography>\n            </Box>\n          )}\n        </Flex>\n      ),\n      confirmButton: formatMessage({\n        id: 'app.utils.unpublish',\n        defaultMessage: 'Unpublish',\n      }),\n      onConfirm: handleConfirmBulkUnpublish,\n    },\n  };\n};\n\nUnpublishAction.type = 'unpublish';\n\nconst Emphasis = (chunks: React.ReactNode) => (\n  <Typography fontWeight=\"semiBold\" textColor=\"danger500\">\n    {chunks}\n  </Typography>\n);\n\nconst DEFAULT_BULK_ACTIONS: BulkActionComponent[] = [PublishAction, UnpublishAction, DeleteAction];\n\nexport { DEFAULT_BULK_ACTIONS, BulkActionsRenderer, Emphasis };\nexport type { BulkActionDescription };\n", "import { Box, Flex, Typography } from '@strapi/design-system';\nimport { ChevronRight } from '@strapi/icons';\nimport { useIntl } from 'react-intl';\n\nimport { getTranslation } from '../../../utils/translations';\n\nimport type { ProhibitedCloningField } from '../../../../../shared/contracts/collection-types';\n\ntype Reason = ProhibitedCloningField[1];\n\ninterface AutoCloneFailureModalBodyProps {\n  prohibitedFields: ProhibitedCloningField[];\n}\n\nconst AutoCloneFailureModalBody = ({ prohibitedFields }: AutoCloneFailureModalBodyProps) => {\n  const { formatMessage } = useIntl();\n\n  const getDefaultErrorMessage = (reason: Reason) => {\n    switch (reason) {\n      case 'relation':\n        return 'Duplicating the relation could remove it from the original entry.';\n      case 'unique':\n        return 'Identical values in a unique field are not allowed';\n      default:\n        return reason;\n    }\n  };\n\n  return (\n    <>\n      <Typography variant=\"beta\">\n        {formatMessage({\n          id: getTranslation('containers.list.autoCloneModal.title'),\n          defaultMessage: \"This entry can't be duplicated directly.\",\n        })}\n      </Typography>\n      <Box marginTop={2}>\n        <Typography textColor=\"neutral600\">\n          {formatMessage({\n            id: getTranslation('containers.list.autoCloneModal.description'),\n            defaultMessage:\n              \"A new entry will be created with the same content, but you'll have to change the following fields to save it.\",\n          })}\n        </Typography>\n      </Box>\n      <Flex marginTop={6} gap={2} direction=\"column\" alignItems=\"stretch\">\n        {prohibitedFields.map(([fieldPath, reason]) => (\n          <Flex\n            direction=\"column\"\n            gap={2}\n            alignItems=\"flex-start\"\n            borderColor=\"neutral200\"\n            hasRadius\n            padding={6}\n            key={fieldPath.join()}\n          >\n            <Flex direction=\"row\" tag=\"ol\">\n              {fieldPath.map((pathSegment, index) => (\n                <Typography fontWeight=\"semiBold\" tag=\"li\" key={index}>\n                  {pathSegment}\n                  {index !== fieldPath.length - 1 && (\n                    <ChevronRight\n                      fill=\"neutral500\"\n                      height=\"0.8rem\"\n                      width=\"0.8rem\"\n                      style={{ margin: '0 0.8rem' }}\n                    />\n                  )}\n                </Typography>\n              ))}\n            </Flex>\n            <Typography tag=\"p\" textColor=\"neutral600\">\n              {formatMessage({\n                id: getTranslation(`containers.list.autoCloneModal.error.${reason}`),\n                defaultMessage: getDefaultErrorMessage(reason),\n              })}\n            </Typography>\n          </Flex>\n        ))}\n      </Flex>\n    </>\n  );\n};\n\nexport { AutoCloneFailureModalBody };\nexport type { AutoCloneFailureModalBodyProps };\n", "import * as React from 'react';\n\nimport {\n  DescriptionComponentRenderer,\n  useNotification,\n  useStrapiApp,\n  useQueryParams,\n} from '@strapi/admin/strapi-admin';\nimport { Button, LinkButton, Modal } from '@strapi/design-system';\nimport { Duplicate, Pencil } from '@strapi/icons';\nimport { stringify } from 'qs';\nimport { useIntl } from 'react-intl';\nimport { NavLink, useNavigate } from 'react-router-dom';\nimport { styled } from 'styled-components';\n\nimport { useDocumentRBAC } from '../../../features/DocumentRBAC';\nimport { Document, useDoc } from '../../../hooks/useDocument';\nimport { useDocumentActions } from '../../../hooks/useDocumentActions';\nimport { isBaseQueryError } from '../../../utils/api';\nimport { DocumentActionsMenu } from '../../EditView/components/DocumentActions';\n\nimport { AutoCloneFailureModalBody } from './AutoCloneFailureModal';\n\nimport type { ProhibitedCloningField } from '../../../../../shared/contracts/collection-types';\nimport type {\n  ContentManagerPlugin,\n  DocumentActionComponent,\n  DocumentActionProps,\n} from '../../../content-manager';\n\n/* -------------------------------------------------------------------------------------------------\n * TableActions\n * -----------------------------------------------------------------------------------------------*/\n\ninterface TableActionsProps {\n  document: Document;\n}\n\nconst TableActions = ({ document }: TableActionsProps) => {\n  const { formatMessage } = useIntl();\n  const { model, collectionType } = useDoc();\n  const plugins = useStrapiApp('TableActions', (state) => state.plugins);\n\n  const props: DocumentActionProps = {\n    activeTab: null,\n    model,\n    documentId: document.documentId,\n    collectionType,\n    document,\n  };\n\n  return (\n    <DescriptionComponentRenderer\n      props={props}\n      descriptions={(plugins['content-manager'].apis as ContentManagerPlugin['config']['apis'])\n        .getDocumentActions('table-row')\n        // We explicitly remove the PublishAction from description so we never render it and we don't make unnecessary requests.\n        .filter((action) => action.name !== 'PublishAction')}\n    >\n      {(actions) => {\n        const tableRowActions = actions.filter((action) => {\n          const positions = Array.isArray(action.position) ? action.position : [action.position];\n          return positions.includes('table-row');\n        });\n\n        return (\n          <DocumentActionsMenu\n            actions={tableRowActions}\n            label={formatMessage({\n              id: 'content-manager.containers.list.table.row-actions',\n              defaultMessage: 'Row action',\n            })}\n            variant=\"ghost\"\n          />\n        );\n      }}\n    </DescriptionComponentRenderer>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * TableActionComponents\n * -----------------------------------------------------------------------------------------------*/\n\nconst EditAction: DocumentActionComponent = ({ documentId }) => {\n  const navigate = useNavigate();\n  const { formatMessage } = useIntl();\n  const { canRead } = useDocumentRBAC('EditAction', ({ canRead }) => ({ canRead }));\n  const { toggleNotification } = useNotification();\n  const [{ query }] = useQueryParams<{ plugins?: object }>();\n\n  return {\n    disabled: !canRead,\n    icon: <StyledPencil />,\n    label: formatMessage({\n      id: 'content-manager.actions.edit.label',\n      defaultMessage: 'Edit',\n    }),\n    position: 'table-row',\n    onClick: async () => {\n      if (!documentId) {\n        console.error(\n          \"You're trying to edit a document without an id, this is likely a bug with Strapi. Please open an issue.\"\n        );\n\n        toggleNotification({\n          message: formatMessage({\n            id: 'content-manager.actions.edit.error',\n            defaultMessage: 'An error occurred while trying to edit the document.',\n          }),\n          type: 'danger',\n        });\n\n        return;\n      }\n\n      navigate({\n        pathname: documentId,\n        search: stringify({\n          plugins: query.plugins,\n        }),\n      });\n    },\n  };\n};\n\nEditAction.type = 'edit';\nEditAction.position = 'table-row';\n\n/**\n * Because the icon system is completely broken, we have to do\n * this to remove the fill from the cog.\n */\nconst StyledPencil = styled(Pencil)`\n  path {\n    fill: currentColor;\n  }\n`;\n\nconst CloneAction: DocumentActionComponent = ({ model, documentId }) => {\n  const navigate = useNavigate();\n  const { formatMessage } = useIntl();\n  const { canCreate } = useDocumentRBAC('CloneAction', ({ canCreate }) => ({ canCreate }));\n  const { toggleNotification } = useNotification();\n  const { autoClone } = useDocumentActions();\n  const [prohibitedFields, setProhibitedFields] = React.useState<ProhibitedCloningField[]>([]);\n\n  return {\n    disabled: !canCreate,\n    icon: <StyledDuplicate />,\n    label: formatMessage({\n      id: 'content-manager.actions.clone.label',\n      defaultMessage: 'Duplicate',\n    }),\n    position: 'table-row',\n    onClick: async () => {\n      if (!documentId) {\n        console.error(\n          \"You're trying to clone a document in the table without an id, this is likely a bug with Strapi. Please open an issue.\"\n        );\n\n        toggleNotification({\n          message: formatMessage({\n            id: 'content-manager.actions.clone.error',\n            defaultMessage: 'An error occurred while trying to clone the document.',\n          }),\n          type: 'danger',\n        });\n\n        return;\n      }\n\n      const res = await autoClone({ model, sourceId: documentId });\n\n      if ('data' in res) {\n        navigate(res.data.documentId);\n\n        /**\n         * We return true because we don't need to show a modal anymore.\n         */\n        return true;\n      }\n\n      if (\n        isBaseQueryError(res.error) &&\n        res.error.details &&\n        typeof res.error.details === 'object' &&\n        'prohibitedFields' in res.error.details &&\n        Array.isArray(res.error.details.prohibitedFields)\n      ) {\n        const prohibitedFields = res.error.details.prohibitedFields as ProhibitedCloningField[];\n\n        setProhibitedFields(prohibitedFields);\n      }\n    },\n    dialog: {\n      type: 'modal',\n      title: formatMessage({\n        id: 'content-manager.containers.list.autoCloneModal.header',\n        defaultMessage: 'Duplicate',\n      }),\n      content: <AutoCloneFailureModalBody prohibitedFields={prohibitedFields} />,\n      footer: ({ onClose }) => {\n        return (\n          <Modal.Footer>\n            <Button onClick={onClose} variant=\"tertiary\">\n              {formatMessage({\n                id: 'cancel',\n                defaultMessage: 'Cancel',\n              })}\n            </Button>\n            <LinkButton\n              tag={NavLink}\n              to={{\n                pathname: `clone/${documentId}`,\n              }}\n            >\n              {formatMessage({\n                id: 'content-manager.containers.list.autoCloneModal.create',\n                defaultMessage: 'Create',\n              })}\n            </LinkButton>\n          </Modal.Footer>\n        );\n      },\n    },\n  };\n};\n\nCloneAction.type = 'clone';\nCloneAction.position = 'table-row';\n\n/**\n * Because the icon system is completely broken, we have to do\n * this to remove the fill from the cog.\n */\nconst StyledDuplicate = styled(Duplicate)`\n  path {\n    fill: currentColor;\n  }\n`;\n\nconst DEFAULT_TABLE_ROW_ACTIONS = [EditAction, CloneAction];\n\nexport { TableActions, DEFAULT_TABLE_ROW_ACTIONS };\n", "/* eslint-disable check-file/filename-naming-convention */\nimport { INJECTION_ZONES } from './components/InjectionZone';\nimport { PLUGIN_ID } from './constants/plugin';\nimport {\n  DEFAULT_ACTIONS,\n  type DocumentActionPosition,\n  type DocumentActionDescription,\n} from './pages/EditView/components/DocumentActions';\nimport {\n  DEFAULT_HEADER_ACTIONS,\n  type HeaderActionDescription,\n} from './pages/EditView/components/Header';\nimport { ActionsPanel, type PanelDescription } from './pages/EditView/components/Panels';\nimport {\n  DEFAULT_BULK_ACTIONS,\n  type BulkActionDescription,\n} from './pages/ListView/components/BulkActions/Actions';\nimport { DEFAULT_TABLE_ROW_ACTIONS } from './pages/ListView/components/TableActions';\n\nimport type { Document } from './hooks/useDocument';\nimport type { DocumentMetadata } from '../../shared/contracts/collection-types';\nimport type { DescriptionComponent, PluginConfig } from '@strapi/admin/strapi-admin';\n\n/* -------------------------------------------------------------------------------------------------\n * Configuration Types\n * -----------------------------------------------------------------------------------------------*/\n\ntype DescriptionReducer<Config extends object> = (prev: Config[]) => Config[];\n\ninterface EditViewContext {\n  /**\n   * This will ONLY be null, if the content-type\n   * does not have draft & published enabled.\n   */\n  activeTab: 'draft' | 'published' | null;\n  /**\n   * Will be either 'single-types' | 'collection-types'\n   */\n  collectionType: string;\n  /**\n   * this will be undefined if someone is creating an entry.\n   */\n  document?: Document;\n  /**\n   * this will be undefined if someone is creating an entry.\n   */\n  documentId?: string;\n  /**\n   * this will be undefined if someone is creating an entry.\n   */\n  meta?: DocumentMetadata;\n  /**\n   * The current content-type's model.\n   */\n  model: string;\n}\n\ninterface ListViewContext {\n  /**\n   * Will be either 'single-types' | 'collection-types'\n   */\n  collectionType: string;\n  /**\n   * The current selected documents in the table\n   */\n  documents: Document[];\n  /**\n   * The current content-type's model.\n   */\n  model: string;\n}\n\ninterface PanelComponentProps extends EditViewContext {}\n\ninterface PanelComponent extends DescriptionComponent<PanelComponentProps, PanelDescription> {\n  /**\n   * The defaults are added by Strapi only, if you're providing your own component,\n   * you do not need to provide this.\n   */\n  type?: 'actions' | 'releases';\n}\n\ninterface DocumentActionProps extends EditViewContext {}\n\ninterface DocumentActionComponent\n  extends DescriptionComponent<DocumentActionProps, DocumentActionDescription> {\n  type?:\n    | 'clone'\n    | 'configure-the-view'\n    | 'delete'\n    | 'discard'\n    | 'edit'\n    | 'edit-the-model'\n    | 'history'\n    | 'publish'\n    | 'unpublish'\n    | 'update';\n  position?: DocumentActionDescription['position'];\n}\n\ninterface HeaderActionProps extends EditViewContext {}\n\ninterface HeaderActionComponent\n  extends DescriptionComponent<HeaderActionProps, HeaderActionDescription> {}\n\ninterface BulkActionComponentProps extends ListViewContext {}\n\ninterface BulkActionComponent\n  extends DescriptionComponent<BulkActionComponentProps, BulkActionDescription> {\n  type?: 'delete' | 'publish' | 'unpublish';\n}\n\n/* -------------------------------------------------------------------------------------------------\n * ContentManager plugin\n * -----------------------------------------------------------------------------------------------*/\n\nclass ContentManagerPlugin {\n  /**\n   * The following properties are the stored ones provided by any plugins registering with\n   * the content-manager. The function calls however, need to be called at runtime in the\n   * application, so instead we collate them and run them later with the complete list incl.\n   * ones already registered & the context of the view.\n   */\n  bulkActions: BulkActionComponent[] = [...DEFAULT_BULK_ACTIONS];\n  documentActions: DocumentActionComponent[] = [\n    ...DEFAULT_ACTIONS,\n    ...DEFAULT_TABLE_ROW_ACTIONS,\n    ...DEFAULT_HEADER_ACTIONS,\n  ];\n  editViewSidePanels: PanelComponent[] = [ActionsPanel];\n  headerActions: HeaderActionComponent[] = [];\n\n  constructor() {}\n\n  addEditViewSidePanel(panels: DescriptionReducer<PanelComponent>): void;\n  addEditViewSidePanel(panels: PanelComponent[]): void;\n  addEditViewSidePanel(panels: DescriptionReducer<PanelComponent> | PanelComponent[]) {\n    if (Array.isArray(panels)) {\n      this.editViewSidePanels = [...this.editViewSidePanels, ...panels];\n    } else if (typeof panels === 'function') {\n      this.editViewSidePanels = panels(this.editViewSidePanels);\n    } else {\n      throw new Error(\n        `Expected the \\`panels\\` passed to \\`addEditViewSidePanel\\` to be an array or a function, but received ${getPrintableType(\n          panels\n        )}`\n      );\n    }\n  }\n\n  addDocumentAction(actions: DescriptionReducer<DocumentActionComponent>): void;\n  addDocumentAction(actions: DocumentActionComponent[]): void;\n  addDocumentAction(\n    actions: DescriptionReducer<DocumentActionComponent> | DocumentActionComponent[]\n  ) {\n    if (Array.isArray(actions)) {\n      this.documentActions = [...this.documentActions, ...actions];\n    } else if (typeof actions === 'function') {\n      this.documentActions = actions(this.documentActions);\n    } else {\n      throw new Error(\n        `Expected the \\`actions\\` passed to \\`addDocumentAction\\` to be an array or a function, but received ${getPrintableType(\n          actions\n        )}`\n      );\n    }\n  }\n\n  addDocumentHeaderAction(actions: DescriptionReducer<HeaderActionComponent>): void;\n  addDocumentHeaderAction(actions: HeaderActionComponent[]): void;\n  addDocumentHeaderAction(\n    actions: DescriptionReducer<HeaderActionComponent> | HeaderActionComponent[]\n  ) {\n    if (Array.isArray(actions)) {\n      this.headerActions = [...this.headerActions, ...actions];\n    } else if (typeof actions === 'function') {\n      this.headerActions = actions(this.headerActions);\n    } else {\n      throw new Error(\n        `Expected the \\`actions\\` passed to \\`addDocumentHeaderAction\\` to be an array or a function, but received ${getPrintableType(\n          actions\n        )}`\n      );\n    }\n  }\n\n  addBulkAction(actions: DescriptionReducer<BulkActionComponent>): void;\n  addBulkAction(actions: BulkActionComponent[]): void;\n  addBulkAction(actions: DescriptionReducer<BulkActionComponent> | BulkActionComponent[]) {\n    if (Array.isArray(actions)) {\n      this.bulkActions = [...this.bulkActions, ...actions];\n    } else if (typeof actions === 'function') {\n      this.bulkActions = actions(this.bulkActions);\n    } else {\n      throw new Error(\n        `Expected the \\`actions\\` passed to \\`addBulkAction\\` to be an array or a function, but received ${getPrintableType(\n          actions\n        )}`\n      );\n    }\n  }\n\n  get config() {\n    return {\n      id: PLUGIN_ID,\n      name: 'Content Manager',\n      injectionZones: INJECTION_ZONES,\n      apis: {\n        addBulkAction: this.addBulkAction.bind(this),\n        addDocumentAction: this.addDocumentAction.bind(this),\n        addDocumentHeaderAction: this.addDocumentHeaderAction.bind(this),\n        addEditViewSidePanel: this.addEditViewSidePanel.bind(this),\n        getBulkActions: () => this.bulkActions,\n        getDocumentActions: (position?: DocumentActionPosition) => {\n          /**\n           * When possible, pre-filter the actions by the components static position property.\n           * This avoids rendering the actions in multiple places where they weren't displayed,\n           * which wasn't visible but created issues with useEffect for instance.\n           * The response should still be filtered by the position, as the static property is new\n           * and not mandatory to avoid a breaking change.\n           */\n          if (position) {\n            return this.documentActions.filter(\n              (action) =>\n                action.position == undefined || [action.position].flat().includes(position)\n            );\n          }\n\n          return this.documentActions;\n        },\n        getEditViewSidePanels: () => this.editViewSidePanels,\n        getHeaderActions: () => this.headerActions,\n      },\n    } satisfies PluginConfig;\n  }\n}\n\n/* -------------------------------------------------------------------------------------------------\n * getPrintableType\n * -----------------------------------------------------------------------------------------------*/\n\n/**\n * @internal\n * @description Gets the human-friendly printable type name for the given value, for instance it will yield\n * `array` instead of `object`, as the native `typeof` operator would do.\n */\nconst getPrintableType = (value: unknown): string => {\n  const nativeType = typeof value;\n\n  if (nativeType === 'object') {\n    if (value === null) return 'null';\n    if (Array.isArray(value)) return 'array';\n    if (value instanceof Object && value.constructor.name !== 'Object') {\n      return value.constructor.name;\n    }\n  }\n\n  return nativeType;\n};\n\nexport { ContentManagerPlugin };\nexport type {\n  EditViewContext,\n  ListViewContext,\n  BulkActionComponent,\n  BulkActionComponentProps,\n  BulkActionDescription,\n  DescriptionComponent,\n  DescriptionReducer,\n  PanelComponentProps,\n  PanelComponent,\n  PanelDescription,\n  DocumentActionComponent,\n  DocumentActionDescription,\n  DocumentActionProps,\n  HeaderActionComponent,\n  HeaderActionDescription,\n  HeaderActionProps,\n};\n", "import { useQueryParams, useTracking } from '@strapi/admin/strapi-admin';\nimport { ClockCounterClockwise } from '@strapi/icons';\nimport { stringify } from 'qs';\nimport { useIntl } from 'react-intl';\nimport { useNavigate, useLocation } from 'react-router-dom';\n\nimport type { DocumentActionComponent } from '../../content-manager';\n\nconst HistoryAction: DocumentActionComponent = ({ model, document }) => {\n  const { formatMessage } = useIntl();\n  const [{ query }] = useQueryParams<{ plugins?: Record<string, unknown> }>();\n  const navigate = useNavigate();\n  const { trackUsage } = useTracking();\n  const { pathname } = useLocation();\n  const pluginsQueryParams = stringify({ plugins: query.plugins }, { encode: false });\n\n  if (!window.strapi.features.isEnabled('cms-content-history')) {\n    return null;\n  }\n\n  const handleOnClick = () => {\n    const destination = { pathname: 'history', search: pluginsQueryParams };\n    trackUsage('willNavigate', {\n      from: pathname,\n      to: `${pathname}/${destination.pathname}`,\n    });\n    navigate(destination);\n  };\n\n  return {\n    icon: <ClockCounterClockwise />,\n    label: formatMessage({\n      id: 'content-manager.history.document-action',\n      defaultMessage: 'Content History',\n    }),\n    onClick: handleOnClick,\n    disabled:\n      /**\n       * The user is creating a new document.\n       * It hasn't been saved yet, so there's no history to go to\n       */\n      !document ||\n      /**\n       * The document has been created but the current dimension has never been saved.\n       * For example, the user is creating a new locale in an existing document,\n       * so there's no history for the document in that locale\n       */\n      !document.id ||\n      /**\n       * History is only available for content types created by the user.\n       * These have the `api::` prefix, as opposed to the ones created by Strapi or plugins,\n       * which start with `admin::` or `plugin::`\n       */\n      !model.startsWith('api::'),\n    position: 'header',\n  };\n};\n\nHistoryAction.type = 'history';\nHistoryAction.position = 'header';\n\nexport { HistoryAction };\n", "/* eslint-disable check-file/no-index */\n\nimport { type ContentManagerPlugin } from '../content-manager';\n\nimport { HistoryAction } from './components/HistoryAction';\n\nimport type { StrapiApp } from '@strapi/admin/strapi-admin';\nimport type { Plugin } from '@strapi/types';\n\nconst historyAdmin: Partial<Plugin.Config.AdminInput> = {\n  bootstrap(app: StrapiApp) {\n    const { addDocumentAction } = app.getPlugin('content-manager').apis as {\n      addDocumentAction: ContentManagerPlugin['addDocumentAction'];\n    };\n\n    /**\n     * Register the document action here using the public API, and not by setting the action in the\n     * Content Manager directly, because this API lets us control the order of the actions array.\n     * We want history to be the last non-delete action in the array.\n     */\n    addDocumentAction((actions) => {\n      const indexOfDeleteAction = actions.findIndex((action) => action.type === 'delete');\n      actions.splice(indexOfDeleteAction, 0, HistoryAction);\n      return actions;\n    });\n  },\n};\n\nexport { historyAdmin };\n", "import { createSlice, type PayloadAction } from '@reduxjs/toolkit';\n\nimport { GetInitData } from '../../../shared/contracts/init';\n\nimport type { ContentManagerLink } from '../hooks/useContentManagerInitData';\n\ninterface AppState {\n  collectionTypeLinks: ContentManagerLink[];\n  components: GetInitData.Response['data']['components'];\n  fieldSizes: GetInitData.Response['data']['fieldSizes'];\n  models: GetInitData.Response['data']['contentTypes'];\n  singleTypeLinks: ContentManagerLink[];\n  isLoading: boolean;\n}\n\nconst initialState: AppState = {\n  collectionTypeLinks: [],\n  components: [],\n  fieldSizes: {},\n  models: [],\n  singleTypeLinks: [],\n  isLoading: true,\n};\n\nconst appSlice = createSlice({\n  name: 'app',\n  initialState,\n  reducers: {\n    setInitialData(\n      state,\n      action: PayloadAction<{\n        authorizedCollectionTypeLinks: AppState['collectionTypeLinks'];\n        authorizedSingleTypeLinks: AppState['singleTypeLinks'];\n        components: AppState['components'];\n        contentTypeSchemas: AppState['models'];\n        fieldSizes: AppState['fieldSizes'];\n      }>\n    ) {\n      const {\n        authorizedCollectionTypeLinks,\n        authorizedSingleTypeLinks,\n        components,\n        contentTypeSchemas,\n        fieldSizes,\n      } = action.payload;\n      state.collectionTypeLinks = authorizedCollectionTypeLinks.filter(\n        ({ isDisplayed }) => isDisplayed\n      );\n      state.singleTypeLinks = authorizedSingleTypeLinks.filter(({ isDisplayed }) => isDisplayed);\n      state.components = components;\n      state.models = contentTypeSchemas;\n      state.fieldSizes = fieldSizes;\n      state.isLoading = false;\n    },\n  },\n});\n\nconst { actions, reducer } = appSlice;\nconst { setInitialData } = actions;\n\nexport { reducer, setInitialData };\nexport type { AppState };\n", "import { combineReducers } from '@reduxjs/toolkit';\n\nimport { reducer as appReducer } from './app';\n\nconst reducer = combineReducers({\n  app: appReducer,\n});\n\ntype State = ReturnType<typeof reducer>;\n\nexport { reducer };\nexport type { State };\n", "import { GetPreviewUrl } from '../../../../shared/contracts/preview';\nimport { contentManagerApi } from '../../services/api';\n\nconst previewApi = contentManagerApi.injectEndpoints({\n  endpoints: (builder) => ({\n    getPreviewUrl: builder.query<GetPreviewUrl.Response, GetPreviewUrl.Request>({\n      query({ query, params }) {\n        return {\n          url: `/content-manager/preview/url/${params.contentType}`,\n          method: 'GET',\n          config: {\n            params: query,\n          },\n        };\n      },\n    }),\n  }),\n});\n\nconst { useGetPreviewUrlQuery } = previewApi;\n\nexport { useGetPreviewUrlQuery };\n", "import * as React from 'react';\n\nimport { useQueryParams, useTracking, useForm } from '@strapi/admin/strapi-admin';\nimport { Box, Button, Tooltip, type TooltipProps } from '@strapi/design-system';\nimport { UID } from '@strapi/types';\nimport { stringify } from 'qs';\nimport { useIntl } from 'react-intl';\nimport { Link, useLocation } from 'react-router-dom';\n\nimport { useGetPreviewUrlQuery } from '../services/preview';\n\nimport type { PanelComponent } from '@strapi/content-manager/strapi-admin';\n\ninterface ConditionalTooltipProps {\n  isShown: boolean;\n  label: TooltipProps['label'];\n  children: React.ReactNode;\n}\n\nconst ConditionalTooltip = ({ isShown, label, children }: ConditionalTooltipProps) => {\n  if (isShown) {\n    return <Tooltip label={label}>{children}</Tooltip>;\n  }\n\n  return children;\n};\n\nconst PreviewSidePanel: PanelComponent = ({ model, documentId, document }) => {\n  const { formatMessage } = useIntl();\n  const { trackUsage } = useTracking();\n  const { pathname } = useLocation();\n  const [{ query }] = useQueryParams();\n  const isModified = useForm('PreviewSidePanel', (state) => state.modified);\n\n  /**\n   * The preview URL isn't used in this component, we just fetch it to know if preview is enabled\n   * for the content type. If it's not, the panel is not displayed. If it is, we display a link to\n   * /preview, and the URL will already be loaded in the RTK query cache.\n   */\n  const { data, error } = useGetPreviewUrlQuery({\n    params: {\n      contentType: model as UID.ContentType,\n    },\n    query: {\n      documentId,\n      locale: document?.locale,\n      status: document?.status,\n    },\n  });\n\n  if (!data?.data?.url || error) {\n    return null;\n  }\n\n  const trackNavigation = () => {\n    // Append /preview to the current URL\n    const destinationPathname = pathname.replace(/\\/$/, '') + '/preview';\n    trackUsage('willNavigate', { from: pathname, to: destinationPathname });\n  };\n\n  return {\n    title: formatMessage({ id: 'content-manager.preview.panel.title', defaultMessage: 'Preview' }),\n    content: (\n      <ConditionalTooltip\n        label={formatMessage({\n          id: 'content-manager.preview.panel.button-disabled-tooltip',\n          defaultMessage: 'Please save to open the preview',\n        })}\n        isShown={isModified}\n      >\n        <Box cursor=\"not-allowed\" width=\"100%\">\n          <Button\n            variant=\"tertiary\"\n            tag={Link}\n            to={{ pathname: 'preview', search: stringify(query, { encode: false }) }}\n            onClick={trackNavigation}\n            width=\"100%\"\n            disabled={isModified}\n            pointerEvents={isModified ? 'none' : undefined}\n            tabIndex={isModified ? -1 : undefined}\n          >\n            {formatMessage({\n              id: 'content-manager.preview.panel.button',\n              defaultMessage: 'Open preview',\n            })}\n          </Button>\n        </Box>\n      </ConditionalTooltip>\n    ),\n  };\n};\n\nexport { PreviewSidePanel };\n", "/* eslint-disable check-file/no-index */\n\nimport { PreviewSidePanel } from './components/PreviewSidePanel';\n\nimport type { ContentManagerPlugin } from '../content-manager';\nimport type { PluginDefinition } from '@strapi/admin/strapi-admin';\n\nconst previewAdmin = {\n  bootstrap(app) {\n    const contentManagerPluginApis = app.getPlugin('content-manager')\n      .apis as ContentManagerPlugin['config']['apis'];\n\n    contentManagerPluginApis.addEditViewSidePanel([PreviewSidePanel]);\n  },\n} satisfies Partial<PluginDefinition>;\n\nexport { previewAdmin };\n", "import { Feather } from '@strapi/icons';\n\nimport { PLUGIN_ID } from './constants/plugin';\nimport { ContentManagerPlugin } from './content-manager';\nimport { historyAdmin } from './history';\nimport { reducer } from './modules/reducers';\nimport { previewAdmin } from './preview';\nimport { routes } from './router';\nimport { prefixPluginTranslations } from './utils/translations';\n\n// eslint-disable-next-line import/no-default-export\nexport default {\n  register(app: any) {\n    const cm = new ContentManagerPlugin();\n\n    app.addReducers({\n      [PLUGIN_ID]: reducer,\n    });\n\n    app.addMenuLink({\n      to: PLUGIN_ID,\n      icon: Feather,\n      intlLabel: {\n        id: `content-manager.plugin.name`,\n        defaultMessage: 'Content Manager',\n      },\n      permissions: [],\n      position: 1,\n    });\n\n    app.router.addRoute({\n      path: 'content-manager/*',\n      lazy: async () => {\n        const { Layout } = await import('./layout');\n\n        return {\n          Component: Layout,\n        };\n      },\n      children: routes,\n    });\n\n    app.registerPlugin(cm.config);\n  },\n  bootstrap(app: any) {\n    if (typeof historyAdmin.bootstrap === 'function') {\n      historyAdmin.bootstrap(app);\n    }\n    if (typeof previewAdmin.bootstrap === 'function') {\n      previewAdmin.bootstrap(app);\n    }\n  },\n  async registerTrads({ locales }: { locales: string[] }) {\n    const importedTrads = await Promise.all(\n      locales.map((locale) => {\n        return import(`./translations/${locale}.json`)\n          .then(({ default: data }) => {\n            return {\n              data: prefixPluginTranslations(data, PLUGIN_ID),\n              locale,\n            };\n          })\n          .catch(() => {\n            return {\n              data: {},\n              locale,\n            };\n          });\n      })\n    );\n\n    return Promise.resolve(importedTrads);\n  },\n};\n\nexport * from './exports';\n"],
  "mappings": "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",
  "names": ["require_mapValues", "contentTypePermissions", "index", "attributes", "create", "pipe", "contentType", "components", "_a", "error", "routes", "historyRoutes", "previewRoutes", "actions", "action", "mapValues", "PublishAction", "canPublish", "useGetDraftRelationCountQuery", "modified", "setSubmitting", "isSubmitting", "resetForm", "UnpublishAction", "canUpdate", "DeleteAction", "id", "BoldChunk", "data", "validationErrors", "rows", "canRead", "canCreate", "prohibitedFields", "reducer", "appReducer"]
}
