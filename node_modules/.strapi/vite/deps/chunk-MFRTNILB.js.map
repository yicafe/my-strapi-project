{
  "version": 3,
  "sources": ["../../../@strapi/admin/admin/src/pages/Settings/pages/TransferTokens/EditView.tsx"],
  "sourcesContent": ["import * as React from 'react';\n\nimport { Box, Flex, Grid, Typography } from '@strapi/design-system';\nimport { Formik, Form, FormikErrors, FormikHelpers } from 'formik';\nimport { useIntl } from 'react-intl';\nimport { useLocation, useNavigate, useMatch } from 'react-router-dom';\nimport * as yup from 'yup';\n\nimport { useGuidedTour } from '../../../../components/GuidedTour/Provider';\nimport { Layouts } from '../../../../components/Layouts/Layout';\nimport { Page } from '../../../../components/PageHelpers';\nimport { useTypedSelector } from '../../../../core/store/hooks';\nimport { useNotification } from '../../../../features/Notifications';\nimport { useTracking } from '../../../../features/Tracking';\nimport { useAPIErrorHandler } from '../../../../hooks/useAPIErrorHandler';\nimport { useRBAC } from '../../../../hooks/useRBAC';\nimport {\n  useCreateTransferTokenMutation,\n  useGetTransferTokenQuery,\n  useUpdateTransferTokenMutation,\n} from '../../../../services/transferTokens';\nimport { isBaseQueryError } from '../../../../utils/baseQuery';\nimport { translatedErrors } from '../../../../utils/translatedErrors';\nimport { TRANSFER_TOKEN_TYPE } from '../../components/Tokens/constants';\nimport { FormHead } from '../../components/Tokens/FormHead';\nimport { LifeSpanInput } from '../../components/Tokens/LifeSpanInput';\nimport { TokenBox } from '../../components/Tokens/TokenBox';\nimport { TokenDescription } from '../../components/Tokens/TokenDescription';\nimport { TokenName } from '../../components/Tokens/TokenName';\nimport { TokenTypeSelect } from '../../components/Tokens/TokenTypeSelect';\n\nimport type {\n  TransferToken,\n  SanitizedTransferToken,\n} from '../../../../../../shared/contracts/transfer';\n\nconst schema = yup.object().shape({\n  name: yup.string().max(100).required(translatedErrors.required.id),\n  description: yup.string().nullable(),\n  lifespan: yup.number().integer().min(0).nullable().defined(translatedErrors.required.id),\n  permissions: yup.string().required(translatedErrors.required.id),\n});\n\n/* -------------------------------------------------------------------------------------------------\n * EditView\n * -----------------------------------------------------------------------------------------------*/\n\nconst EditView = () => {\n  const { formatMessage } = useIntl();\n  const { toggleNotification } = useNotification();\n  const navigate = useNavigate();\n  const { state: locationState } = useLocation();\n  const [transferToken, setTransferToken] = React.useState<\n    TransferToken | SanitizedTransferToken | null\n  >(\n    locationState && 'accessKey' in locationState.transferToken\n      ? {\n          ...locationState.transferToken,\n        }\n      : null\n  );\n  const { trackUsage } = useTracking();\n  const setCurrentStep = useGuidedTour('EditView', (state) => state.setCurrentStep);\n  const permissions = useTypedSelector(\n    (state) => state.admin_app.permissions.settings?.['transfer-tokens']\n  );\n  const {\n    allowedActions: { canCreate, canUpdate, canRegenerate },\n  } = useRBAC(permissions);\n  const match = useMatch('/settings/transfer-tokens/:id');\n\n  const id = match?.params?.id;\n  const isCreating = id === 'create';\n\n  const {\n    _unstableFormatAPIError: formatAPIError,\n    _unstableFormatValidationErrors: formatValidationErrors,\n  } = useAPIErrorHandler();\n\n  React.useEffect(() => {\n    trackUsage(isCreating ? 'didAddTokenFromList' : 'didEditTokenFromList', {\n      tokenType: TRANSFER_TOKEN_TYPE,\n    });\n  }, [isCreating, trackUsage]);\n\n  const { data, error } = useGetTransferTokenQuery(id!, {\n    skip: isCreating || transferToken !== null || !id,\n  });\n\n  React.useEffect(() => {\n    if (error) {\n      toggleNotification({\n        type: 'danger',\n        message: formatAPIError(error),\n      });\n    }\n  }, [error, formatAPIError, toggleNotification]);\n\n  React.useEffect(() => {\n    if (data) {\n      setTransferToken(data);\n    }\n  }, [data]);\n\n  const [createToken] = useCreateTransferTokenMutation();\n  const [updateToken] = useUpdateTransferTokenMutation();\n\n  const handleSubmit = async (body: FormValues, formik: FormikHelpers<FormValues>) => {\n    trackUsage(isCreating ? 'willCreateToken' : 'willEditToken', {\n      tokenType: TRANSFER_TOKEN_TYPE,\n    });\n\n    const permissions = body.permissions.split('-');\n\n    const isPermissionsTransferPermission = (\n      permission: string[]\n    ): permission is Array<'push' | 'pull'> => {\n      if (permission.length === 1) {\n        return permission[0] === 'push' || permission[0] === 'pull';\n      }\n\n      return permission[0] === 'push' && permission[1] === 'pull';\n    };\n\n    // this type-guard is necessary to satisfy the type for `permissions` in the request body,\n    // because String.split returns stringp[]\n    if (isPermissionsTransferPermission(permissions)) {\n      try {\n        if (isCreating) {\n          const res = await createToken({\n            ...body,\n            // lifespan must be \"null\" for unlimited (0 would mean instantly expired and isn't accepted)\n            lifespan:\n              body?.lifespan && body.lifespan !== '0'\n                ? parseInt(body.lifespan.toString(), 10)\n                : null,\n            permissions,\n          });\n\n          if ('error' in res) {\n            if (isBaseQueryError(res.error) && res.error.name === 'ValidationError') {\n              formik.setErrors(formatValidationErrors(res.error));\n            } else {\n              toggleNotification({\n                type: 'danger',\n                message: formatAPIError(res.error),\n              });\n            }\n\n            return;\n          }\n\n          setTransferToken(res.data);\n\n          toggleNotification({\n            type: 'success',\n            message: formatMessage({\n              id: 'notification.success.transfertokencreated',\n              defaultMessage: 'Transfer Token successfully created',\n            }),\n          });\n\n          trackUsage('didCreateToken', {\n            type: transferToken?.permissions,\n            tokenType: TRANSFER_TOKEN_TYPE,\n          });\n\n          navigate(`../transfer-tokens/${res.data.id.toString()}`, {\n            replace: true,\n            state: { transferToken: res.data },\n          });\n        } else {\n          const res = await updateToken({\n            id: id!,\n            name: body.name,\n            description: body.description,\n            permissions,\n          });\n\n          if ('error' in res) {\n            if (isBaseQueryError(res.error) && res.error.name === 'ValidationError') {\n              formik.setErrors(formatValidationErrors(res.error));\n            } else {\n              toggleNotification({\n                type: 'danger',\n                message: formatAPIError(res.error),\n              });\n            }\n\n            return;\n          }\n\n          setTransferToken(res.data);\n\n          toggleNotification({\n            type: 'success',\n            message: formatMessage({\n              id: 'notification.success.transfertokenedited',\n              defaultMessage: 'Transfer Token successfully edited',\n            }),\n          });\n\n          trackUsage('didEditToken', {\n            type: transferToken?.permissions,\n            tokenType: TRANSFER_TOKEN_TYPE,\n          });\n        }\n      } catch (err) {\n        toggleNotification({\n          type: 'danger',\n          message: formatMessage({\n            id: 'notification.error',\n            defaultMessage: 'Something went wrong',\n          }),\n        });\n      }\n    }\n  };\n\n  const canEditInputs = (canUpdate && !isCreating) || (canCreate && isCreating);\n  const isLoading = !isCreating && !transferToken;\n\n  if (isLoading) {\n    return <Page.Loading />;\n  }\n\n  return (\n    <Page.Main>\n      <Page.Title>\n        {formatMessage(\n          { id: 'Settings.PageTitle', defaultMessage: 'Settings - {name}' },\n          {\n            name: 'Transfer Tokens',\n          }\n        )}\n      </Page.Title>\n      <Formik\n        validationSchema={schema}\n        validateOnChange={false}\n        initialValues={\n          {\n            name: transferToken?.name || '',\n            description: transferToken?.description || '',\n            lifespan: transferToken?.lifespan || null,\n            /**\n             * We need to cast the permissions to satisfy the type for `permissions`\n             * in the request body incase we don't have a transferToken and instead\n             * use an empty string.\n             */\n            permissions: (transferToken?.permissions.join('-') ?? '') as FormValues['permissions'],\n          } satisfies FormValues\n        }\n        enableReinitialize\n        onSubmit={(body, actions) => handleSubmit(body, actions)}\n      >\n        {({ errors, handleChange, isSubmitting, values }) => {\n          return (\n            <Form>\n              <FormHead\n                title={{\n                  id: 'Settings.transferTokens.createPage.title',\n                  defaultMessage: 'TokenCreate Transfer Token',\n                }}\n                token={transferToken}\n                setToken={setTransferToken}\n                canEditInputs={canEditInputs}\n                canRegenerate={canRegenerate}\n                isSubmitting={isSubmitting}\n                regenerateUrl=\"/admin/transfer/tokens/\"\n              />\n              <Layouts.Content>\n                <Flex direction=\"column\" alignItems=\"stretch\" gap={6}>\n                  {transferToken &&\n                    Boolean(transferToken?.name) &&\n                    'accessKey' in transferToken && (\n                      <TokenBox token={transferToken.accessKey} tokenType={TRANSFER_TOKEN_TYPE} />\n                    )}\n                  <FormTransferTokenContainer\n                    errors={errors}\n                    onChange={handleChange}\n                    canEditInputs={canEditInputs}\n                    isCreating={isCreating}\n                    values={values}\n                    transferToken={transferToken}\n                  />\n                </Flex>\n              </Layouts.Content>\n            </Form>\n          );\n        }}\n      </Formik>\n    </Page.Main>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * ProtectedEditView\n * -----------------------------------------------------------------------------------------------*/\n\nconst ProtectedEditView = () => {\n  const permissions = useTypedSelector(\n    (state) => state.admin_app.permissions.settings?.['transfer-tokens'].read\n  );\n\n  return (\n    <Page.Protect permissions={permissions}>\n      <EditView />\n    </Page.Protect>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * FormTransferTokenContainer\n * -----------------------------------------------------------------------------------------------*/\n\ninterface FormValues extends Pick<TransferToken, 'description' | 'name' | 'lifespan'> {\n  permissions: Extract<TransferToken['permissions'][number], string>;\n}\n\ninterface FormTransferTokenContainerProps {\n  errors: FormikErrors<FormValues>;\n  onChange: ({ target: { name, value } }: { target: { name: string; value: string } }) => void;\n  canEditInputs: boolean;\n  values: FormValues;\n  isCreating: boolean;\n  transferToken: Partial<TransferToken> | null;\n}\n\nconst FormTransferTokenContainer = ({\n  errors = {},\n  onChange,\n  canEditInputs,\n  isCreating,\n  values,\n  transferToken = {},\n}: FormTransferTokenContainerProps) => {\n  const { formatMessage } = useIntl();\n\n  const typeOptions = [\n    {\n      value: 'push',\n      label: {\n        id: 'Settings.transferTokens.types.push',\n        defaultMessage: 'Push',\n      },\n    },\n    {\n      value: 'pull',\n      label: {\n        id: 'Settings.transferTokens.types.pull',\n        defaultMessage: 'Pull',\n      },\n    },\n    {\n      value: 'push-pull',\n      label: {\n        id: 'Settings.transferTokens.types.push-pull',\n        defaultMessage: 'Full Access',\n      },\n    },\n  ];\n\n  return (\n    <Box\n      background=\"neutral0\"\n      hasRadius\n      shadow=\"filterShadow\"\n      paddingTop={6}\n      paddingBottom={6}\n      paddingLeft={7}\n      paddingRight={7}\n    >\n      <Flex direction=\"column\" alignItems=\"stretch\" gap={4}>\n        <Typography variant=\"delta\" tag=\"h2\">\n          {formatMessage({\n            id: 'global.details',\n            defaultMessage: 'Details',\n          })}\n        </Typography>\n        <Grid.Root gap={5}>\n          <Grid.Item key=\"name\" col={6} xs={12} direction=\"column\" alignItems=\"stretch\">\n            <TokenName\n              error={errors['name']}\n              value={values['name']}\n              canEditInputs={canEditInputs}\n              onChange={onChange}\n            />\n          </Grid.Item>\n          <Grid.Item key=\"description\" col={6} xs={12} direction=\"column\" alignItems=\"stretch\">\n            <TokenDescription\n              error={errors['description']}\n              value={values['description']}\n              canEditInputs={canEditInputs}\n              onChange={onChange}\n            />\n          </Grid.Item>\n          <Grid.Item key=\"lifespan\" col={6} xs={12} direction=\"column\" alignItems=\"stretch\">\n            <LifeSpanInput\n              isCreating={isCreating}\n              error={errors['lifespan']}\n              value={values['lifespan']}\n              onChange={onChange}\n              token={transferToken}\n            />\n          </Grid.Item>\n          <Grid.Item key=\"permissions\" col={6} xs={12} direction=\"column\" alignItems=\"stretch\">\n            <TokenTypeSelect\n              name=\"permissions\"\n              value={values['permissions']}\n              error={errors['permissions']}\n              label={{\n                id: 'Settings.tokens.form.type',\n                defaultMessage: 'Token type',\n              }}\n              // @ts-expect-error – DS Select passes number | string, will be fixed in V2\n              onChange={(value: string) => {\n                onChange({ target: { name: 'permissions', value } });\n              }}\n              options={typeOptions}\n              canEditInputs={canEditInputs}\n            />\n          </Grid.Item>\n        </Grid.Root>\n      </Flex>\n    </Box>\n  );\n};\n\nexport { EditView, ProtectedEditView };\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoCA,IAAM,SAAaA,QAAO,EAAE,MAAM;EAChC,MAAU,OAAA,EAAS,IAAI,GAAG,EAAE,SAASC,YAAiB,SAAS,EAAE;EACjE,aAAiB,OAAO,EAAE,SAAS;EACnC,UAAcD,QAAO,EAAE,QAAA,EAAU,IAAI,CAAC,EAAE,SAAS,EAAE,QAAQC,YAAiB,SAAS,EAAE;EACvF,aAAiB,OAAA,EAAS,SAASA,YAAiB,SAAS,EAAE;AACjE,CAAC;AAMD,IAAM,WAAW,MAAM;;AACf,QAAA,EAAE,cAAc,IAAI,QAAQ;AAC5B,QAAA,EAAE,mBAAmB,IAAI,gBAAgB;AAC/C,QAAM,WAAW,YAAY;AAC7B,QAAM,EAAE,OAAO,cAAc,IAAI,YAAY;AAC7C,QAAM,CAAC,eAAe,gBAAgB,IAAU;IAG9C,iBAAiB,eAAe,cAAc,gBAC1C;MACE,GAAG,cAAc;IAAA,IAEnB;EAAA;AAEA,QAAA,EAAE,WAAW,IAAI,YAAY;AACZ,gBAAc,YAAY,CAAC,UAAU,MAAM,cAAc;AAChF,QAAM,cAAc;IAClB,CAAC,UAAU;;AAAA,cAAAC,MAAA,MAAM,UAAU,YAAY,aAA5B,gBAAAA,IAAuC;;EAAiB;AAE/D,QAAA;IACJ,gBAAgB,EAAE,WAAW,WAAW,cAAc;EAAA,IACpD,QAAQ,WAAW;AACjB,QAAA,QAAQ,SAAS,+BAA+B;AAEhD,QAAA,MAAK,oCAAO,WAAP,mBAAe;AAC1B,QAAM,aAAa,OAAO;AAEpB,QAAA;IACJ,yBAAyB;IACzB,iCAAiC;EAAA,IAC/B,mBAAmB;AAEvB,EAAM,gBAAU,MAAM;AACT,eAAA,aAAa,wBAAwB,wBAAwB;MACtE,WAAW;IAAA,CACZ;EAAA,GACA,CAAC,YAAY,UAAU,CAAC;AAE3B,QAAM,EAAE,MAAM,MAAM,IAAI,yBAAyB,IAAK;IACpD,MAAM,cAAc,kBAAkB,QAAQ,CAAC;EAAA,CAChD;AAED,EAAM,gBAAU,MAAM;AACpB,QAAI,OAAO;AACU,yBAAA;QACjB,MAAM;QACN,SAAS,eAAe,KAAK;MAAA,CAC9B;IAAA;EACH,GACC,CAAC,OAAO,gBAAgB,kBAAkB,CAAC;AAE9C,EAAM,gBAAU,MAAM;AACpB,QAAI,MAAM;AACR,uBAAiB,IAAI;IAAA;EACvB,GACC,CAAC,IAAI,CAAC;AAEH,QAAA,CAAC,WAAW,IAAI,+BAA+B;AAC/C,QAAA,CAAC,WAAW,IAAI,+BAA+B;AAE/C,QAAA,eAAe,OAAO,MAAkB,WAAsC;AACvE,eAAA,aAAa,oBAAoB,iBAAiB;MAC3D,WAAW;IAAA,CACZ;AAED,UAAMC,eAAc,KAAK,YAAY,MAAM,GAAG;AAExC,UAAA,kCAAkC,CACtC,eACyC;AACrC,UAAA,WAAW,WAAW,GAAG;AAC3B,eAAO,WAAW,CAAC,MAAM,UAAU,WAAW,CAAC,MAAM;MAAA;AAGvD,aAAO,WAAW,CAAC,MAAM,UAAU,WAAW,CAAC,MAAM;IAAA;AAKnD,QAAA,gCAAgCA,YAAW,GAAG;AAC5C,UAAA;AACF,YAAI,YAAY;AACR,gBAAA,MAAM,MAAM,YAAY;YAC5B,GAAG;;YAEH,WACE,6BAAM,aAAY,KAAK,aAAa,MAChC,SAAS,KAAK,SAAS,SAAA,GAAY,EAAE,IACrC;YACN,aAAAA;UAAA,CACD;AAED,cAAI,WAAW,KAAK;AAClB,gBAAI,iBAAiB,IAAI,KAAK,KAAK,IAAI,MAAM,SAAS,mBAAmB;AACvE,qBAAO,UAAU,uBAAuB,IAAI,KAAK,CAAC;YAAA,OAC7C;AACc,iCAAA;gBACjB,MAAM;gBACN,SAAS,eAAe,IAAI,KAAK;cAAA,CAClC;YAAA;AAGH;UAAA;AAGF,2BAAiB,IAAI,IAAI;AAEN,6BAAA;YACjB,MAAM;YACN,SAAS,cAAc;cACrB,IAAI;cACJ,gBAAgB;YAAA,CACjB;UAAA,CACF;AAED,qBAAW,kBAAkB;YAC3B,MAAM,+CAAe;YACrB,WAAW;UAAA,CACZ;AAED,mBAAS,sBAAsB,IAAI,KAAK,GAAG,SAAA,CAAU,IAAI;YACvD,SAAS;YACT,OAAO,EAAE,eAAe,IAAI,KAAK;UAAA,CAClC;QAAA,OACI;AACC,gBAAA,MAAM,MAAM,YAAY;YAC5B;YACA,MAAM,KAAK;YACX,aAAa,KAAK;YAClB,aAAAA;UAAA,CACD;AAED,cAAI,WAAW,KAAK;AAClB,gBAAI,iBAAiB,IAAI,KAAK,KAAK,IAAI,MAAM,SAAS,mBAAmB;AACvE,qBAAO,UAAU,uBAAuB,IAAI,KAAK,CAAC;YAAA,OAC7C;AACc,iCAAA;gBACjB,MAAM;gBACN,SAAS,eAAe,IAAI,KAAK;cAAA,CAClC;YAAA;AAGH;UAAA;AAGF,2BAAiB,IAAI,IAAI;AAEN,6BAAA;YACjB,MAAM;YACN,SAAS,cAAc;cACrB,IAAI;cACJ,gBAAgB;YAAA,CACjB;UAAA,CACF;AAED,qBAAW,gBAAgB;YACzB,MAAM,+CAAe;YACrB,WAAW;UAAA,CACZ;QAAA;MACH,SACO,KAAK;AACO,2BAAA;UACjB,MAAM;UACN,SAAS,cAAc;YACrB,IAAI;YACJ,gBAAgB;UAAA,CACjB;QAAA,CACF;MAAA;IACH;EACF;AAGF,QAAM,gBAAiB,aAAa,CAAC,cAAgB,aAAa;AAC5D,QAAA,YAAY,CAAC,cAAc,CAAC;AAElC,MAAI,WAAW;AACN,eAAA,wBAAC,KAAK,SAAL,CAAA,CAAa;EAAA;AAIrB,aAAA,yBAAC,KAAK,MAAL,EACC,UAAA;QAAC,wBAAA,KAAK,OAAL,EACE,UAAA;MACC,EAAE,IAAI,sBAAsB,gBAAgB,oBAAoB;MAChE;QACE,MAAM;MAAA;IACR,EAEJ,CAAA;QACA;MAAC;MAAA;QACC,kBAAkB;QAClB,kBAAkB;QAClB,eACE;UACE,OAAM,+CAAe,SAAQ;UAC7B,cAAa,+CAAe,gBAAe;UAC3C,WAAU,+CAAe,aAAY;;;;;;UAMrC,cAAc,+CAAe,YAAY,KAAK,SAAQ;QAAA;QAG1D,oBAAkB;QAClB,UAAU,CAAC,MAAM,YAAY,aAAa,MAAM,OAAO;QAEtD,UAAA,CAAC,EAAE,QAAQ,cAAc,cAAc,OAAA,MAAa;AACnD,qBAAA,yBACG,MACC,EAAA,UAAA;gBAAA;cAAC;cAAA;gBACC,OAAO;kBACL,IAAI;kBACJ,gBAAgB;gBAAA;gBAElB,OAAO;gBACP,UAAU;gBACV;gBACA;gBACA;gBACA,eAAc;cAAA;YAAA;gBAEhB,wBAAC,QAAQ,SAAR,EACC,cAAA,yBAAC,MAAK,EAAA,WAAU,UAAS,YAAW,WAAU,KAAK,GAChD,UAAA;cAAA,iBACC,QAAQ,+CAAe,IAAI,KAC3B,eAAe,qBACZ,wBAAA,UAAA,EAAS,OAAO,cAAc,WAAW,WAAW,oBAAqB,CAAA;kBAE9E;gBAAC;gBAAA;kBACC;kBACA,UAAU;kBACV;kBACA;kBACA;kBACA;gBAAA;cAAA;YACF,EAAA,CACF,EACF,CAAA;UAAA,EACF,CAAA;QAAA;MAEJ;IAAA;EACF,EACF,CAAA;AAEJ;AAMA,IAAM,oBAAoB,MAAM;AAC9B,QAAM,cAAc;IAClB,CAAC,UAAU;;AAAA,yBAAM,UAAU,YAAY,aAA5B,mBAAuC,mBAAmB;;EAAA;AAGvE,aAAA,wBACG,KAAK,SAAL,EAAa,aACZ,cAAA,wBAAC,UAAA,CAAA,CAAS,EACZ,CAAA;AAEJ;AAmBA,IAAM,6BAA6B,CAAC;EAClC,SAAS,CAAA;EACT;EACA;EACA;EACA;EACA,gBAAgB,CAAA;AAClB,MAAuC;AAC/B,QAAA,EAAE,cAAc,IAAI,QAAQ;AAElC,QAAM,cAAc;IAClB;MACE,OAAO;MACP,OAAO;QACL,IAAI;QACJ,gBAAgB;MAAA;IAClB;IAEF;MACE,OAAO;MACP,OAAO;QACL,IAAI;QACJ,gBAAgB;MAAA;IAClB;IAEF;MACE,OAAO;MACP,OAAO;QACL,IAAI;QACJ,gBAAgB;MAAA;IAClB;EACF;AAIA,aAAA;IAAC;IAAA;MACC,YAAW;MACX,WAAS;MACT,QAAO;MACP,YAAY;MACZ,eAAe;MACf,aAAa;MACb,cAAc;MAEd,cAAA,yBAAC,MAAK,EAAA,WAAU,UAAS,YAAW,WAAU,KAAK,GACjD,UAAA;YAAA,wBAAC,YAAW,EAAA,SAAQ,SAAQ,KAAI,MAC7B,UAAc,cAAA;UACb,IAAI;UACJ,gBAAgB;QAAA,CACjB,EACH,CAAA;YACC,yBAAA,KAAK,MAAL,EAAU,KAAK,GACd,UAAA;cAAC,wBAAA,KAAK,MAAL,EAAqB,KAAK,GAAG,IAAI,IAAI,WAAU,UAAS,YAAW,WAClE,cAAA;YAAC;YAAA;cACC,OAAO,OAAO,MAAM;cACpB,OAAO,OAAO,MAAM;cACpB;cACA;YAAA;UAAA,EAAA,GALW,MAOf;cACA,wBAAC,KAAK,MAAL,EAA4B,KAAK,GAAG,IAAI,IAAI,WAAU,UAAS,YAAW,WACzE,cAAA;YAAC;YAAA;cACC,OAAO,OAAO,aAAa;cAC3B,OAAO,OAAO,aAAa;cAC3B;cACA;YAAA;UAAA,EAAA,GALW,aAOf;cACA,wBAAC,KAAK,MAAL,EAAyB,KAAK,GAAG,IAAI,IAAI,WAAU,UAAS,YAAW,WACtE,cAAA;YAAC;YAAA;cACC;cACA,OAAO,OAAO,UAAU;cACxB,OAAO,OAAO,UAAU;cACxB;cACA,OAAO;YAAA;UAAA,EAAA,GANI,UAQf;cACA,wBAAC,KAAK,MAAL,EAA4B,KAAK,GAAG,IAAI,IAAI,WAAU,UAAS,YAAW,WACzE,cAAA;YAAC;YAAA;cACC,MAAK;cACL,OAAO,OAAO,aAAa;cAC3B,OAAO,OAAO,aAAa;cAC3B,OAAO;gBACL,IAAI;gBACJ,gBAAgB;cAAA;cAGlB,UAAU,CAAC,UAAkB;AAC3B,yBAAS,EAAE,QAAQ,EAAE,MAAM,eAAe,MAAA,EAAA,CAAS;cAAA;cAErD,SAAS;cACT;YAAA;UAAA,EAAA,GAdW,aAgBf;QAAA,EACF,CAAA;MAAA,EACF,CAAA;IAAA;EAAA;AAGN;",
  "names": ["create", "translatedErrors", "_a", "permissions"]
}
