{
  "version": 3,
  "sources": ["../../../@strapi/admin/admin/src/services/apiTokens.ts"],
  "sourcesContent": ["import * as ApiToken from '../../../shared/contracts/api-token';\n\nimport { adminApi } from './api';\n\nconst apiTokensService = adminApi\n  .enhanceEndpoints({\n    addTagTypes: ['ApiToken'],\n  })\n  .injectEndpoints({\n    endpoints: (builder) => ({\n      getAPITokens: builder.query<ApiToken.List.Response['data'], void>({\n        query: () => '/admin/api-tokens',\n        transformResponse: (response: ApiToken.List.Response) => response.data,\n        providesTags: (res, _err) => [\n          ...(res?.map(({ id }) => ({ type: 'ApiToken' as const, id })) ?? []),\n          { type: 'ApiToken' as const, id: 'LIST' },\n        ],\n      }),\n      getAPIToken: builder.query<ApiToken.Get.Response['data'], ApiToken.Get.Params['id']>({\n        query: (id) => `/admin/api-tokens/${id}`,\n        transformResponse: (response: ApiToken.Get.Response) => response.data,\n        providesTags: (res, _err, id) => [{ type: 'ApiToken' as const, id }],\n      }),\n      createAPIToken: builder.mutation<\n        ApiToken.Create.Response['data'],\n        ApiToken.Create.Request['body']\n      >({\n        query: (body) => ({\n          url: '/admin/api-tokens',\n          method: 'POST',\n          data: body,\n        }),\n        transformResponse: (response: ApiToken.Create.Response) => response.data,\n        invalidatesTags: [{ type: 'ApiToken' as const, id: 'LIST' }],\n      }),\n      deleteAPIToken: builder.mutation<\n        ApiToken.Revoke.Response['data'],\n        ApiToken.Revoke.Params['id']\n      >({\n        query: (id) => ({\n          url: `/admin/api-tokens/${id}`,\n          method: 'DELETE',\n        }),\n        transformResponse: (response: ApiToken.Revoke.Response) => response.data,\n        invalidatesTags: (_res, _err, id) => [{ type: 'ApiToken' as const, id }],\n      }),\n      updateAPIToken: builder.mutation<\n        ApiToken.Update.Response['data'],\n        ApiToken.Update.Params & ApiToken.Update.Request['body']\n      >({\n        query: ({ id, ...body }) => ({\n          url: `/admin/api-tokens/${id}`,\n          method: 'PUT',\n          data: body,\n        }),\n        transformResponse: (response: ApiToken.Update.Response) => response.data,\n        invalidatesTags: (_res, _err, { id }) => [{ type: 'ApiToken' as const, id }],\n      }),\n    }),\n  });\n\nconst {\n  useGetAPITokensQuery,\n  useGetAPITokenQuery,\n  useCreateAPITokenMutation,\n  useDeleteAPITokenMutation,\n  useUpdateAPITokenMutation,\n} = apiTokensService;\n\nexport {\n  useGetAPITokensQuery,\n  useGetAPITokenQuery,\n  useCreateAPITokenMutation,\n  useDeleteAPITokenMutation,\n  useUpdateAPITokenMutation,\n};\n"],
  "mappings": ";;;;;AAIA,IAAM,mBAAmB,SACtB,iBAAiB;EAChB,aAAa,CAAC,UAAU;AAC1B,CAAC,EACA,gBAAgB;EACf,WAAW,CAAC,aAAa;IACvB,cAAc,QAAQ,MAA4C;MAChE,OAAO,MAAM;MACb,mBAAmB,CAAC,aAAqC,SAAS;MAClE,cAAc,CAAC,KAAK,SAAS;QAC3B,IAAI,2BAAK,IAAI,CAAC,EAAE,GAAA,OAAU,EAAE,MAAM,YAAqB,GAAG,QAAO,CAAA;QACjE,EAAE,MAAM,YAAqB,IAAI,OAAO;MAAA;IAC1C,CACD;IACD,aAAa,QAAQ,MAAgE;MACnF,OAAO,CAAC,OAAO,qBAAqB,EAAE;MACtC,mBAAmB,CAAC,aAAoC,SAAS;MACjE,cAAc,CAAC,KAAK,MAAM,OAAO,CAAC,EAAE,MAAM,YAAqB,GAAA,CAAI;IAAA,CACpE;IACD,gBAAgB,QAAQ,SAGtB;MACA,OAAO,CAAC,UAAU;QAChB,KAAK;QACL,QAAQ;QACR,MAAM;MAAA;MAER,mBAAmB,CAAC,aAAuC,SAAS;MACpE,iBAAiB,CAAC,EAAE,MAAM,YAAqB,IAAI,OAAA,CAAQ;IAAA,CAC5D;IACD,gBAAgB,QAAQ,SAGtB;MACA,OAAO,CAAC,QAAQ;QACd,KAAK,qBAAqB,EAAE;QAC5B,QAAQ;MAAA;MAEV,mBAAmB,CAAC,aAAuC,SAAS;MACpE,iBAAiB,CAAC,MAAM,MAAM,OAAO,CAAC,EAAE,MAAM,YAAqB,GAAA,CAAI;IAAA,CACxE;IACD,gBAAgB,QAAQ,SAGtB;MACA,OAAO,CAAC,EAAE,IAAI,GAAG,KAAA,OAAY;QAC3B,KAAK,qBAAqB,EAAE;QAC5B,QAAQ;QACR,MAAM;MAAA;MAER,mBAAmB,CAAC,aAAuC,SAAS;MACpE,iBAAiB,CAAC,MAAM,MAAM,EAAE,GAAA,MAAS,CAAC,EAAE,MAAM,YAAqB,GAAA,CAAI;IAAA,CAC5E;EAAA;AAEL,CAAC;AAEG,IAAA;EACJ;EACA;EACA;EACA;EACA;AACF,IAAI;",
  "names": []
}
