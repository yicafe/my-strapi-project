import {
  MemoizedInputRenderer,
  createDefaultForm,
  transformDocument,
  useLazyComponents
} from "./chunk-SJM3OSSG.js";
import {
  DocumentRBAC,
  Header,
  PERMISSIONS,
  Panels,
  SINGLE_TYPES,
  createYupSchema,
  getTranslation,
  useDoc,
  useDocumentLayout,
  useDocumentRBAC
} from "./chunk-6YOYCAO7.js";
import {
  Blocker,
  Form2 as Form
} from "./chunk-WAN4NJHK.js";
import {
  Page,
  useNotification,
  useQueryParams,
  useRBAC
} from "./chunk-Z4DUCMVZ.js";
import {
  Box,
  Flex,
  Grid,
  Main,
  Tabs,
  useIntl
} from "./chunk-3AE57NTV.js";
import {
  useLocation,
  useParams
} from "./chunk-ZJMETV45.js";
import {
  require_jsx_runtime
} from "./chunk-QBLEIVF7.js";
import {
  dt
} from "./chunk-WRI5LBAT.js";
import {
  require_react
} from "./chunk-BCGHH3YY.js";
import {
  __toESM
} from "./chunk-WGAPYIUP.js";

// node_modules/@strapi/content-manager/dist/_chunks/EditViewPage-BPFcUbqi.mjs
var import_jsx_runtime = __toESM(require_jsx_runtime(), 1);
var React = __toESM(require_react(), 1);
var useOnce = (effect) => React.useEffect(effect, emptyDeps);
var emptyDeps = [];
var FormLayout = ({ layout }) => {
  const { formatMessage } = useIntl();
  const { model } = useDoc();
  return (0, import_jsx_runtime.jsx)(Flex, { direction: "column", alignItems: "stretch", gap: 6, children: layout.map((panel, index) => {
    if (panel.some((row) => row.some((field) => field.type === "dynamiczone"))) {
      const [row] = panel;
      const [field] = row;
      const fieldWithTranslatedLabel = {
        ...field,
        label: formatMessage({
          id: `content-manager.content-types.${model}.${field.name}`,
          defaultMessage: field.label
        })
      };
      return (0, import_jsx_runtime.jsx)(Grid.Root, { gap: 4, children: (0, import_jsx_runtime.jsx)(Grid.Item, { col: 12, s: 12, xs: 12, direction: "column", alignItems: "stretch", children: (0, import_jsx_runtime.jsx)(MemoizedInputRenderer, { ...fieldWithTranslatedLabel }) }) }, field.name);
    }
    return (0, import_jsx_runtime.jsx)(
      Box,
      {
        hasRadius: true,
        background: "neutral0",
        shadow: "tableShadow",
        paddingLeft: 6,
        paddingRight: 6,
        paddingTop: 6,
        paddingBottom: 6,
        borderColor: "neutral150",
        children: (0, import_jsx_runtime.jsx)(Flex, { direction: "column", alignItems: "stretch", gap: 6, children: panel.map((row, gridRowIndex) => (0, import_jsx_runtime.jsx)(Grid.Root, { gap: 4, children: row.map(({ size, ...field }) => {
          const fieldWithTranslatedLabel = {
            ...field,
            label: formatMessage({
              id: `content-manager.content-types.${model}.${field.name}`,
              defaultMessage: field.label
            })
          };
          return (0, import_jsx_runtime.jsx)(
            Grid.Item,
            {
              col: size,
              s: 12,
              xs: 12,
              direction: "column",
              alignItems: "stretch",
              children: (0, import_jsx_runtime.jsx)(MemoizedInputRenderer, { ...fieldWithTranslatedLabel })
            },
            field.name
          );
        }) }, gridRowIndex)) })
      },
      index
    );
  }) });
};
var EditViewPage = () => {
  var _a, _b;
  const location = useLocation();
  const [
    {
      query: { status }
    },
    setQuery
  ] = useQueryParams({
    status: "draft"
  });
  const { formatMessage } = useIntl();
  const { toggleNotification } = useNotification();
  const {
    document,
    meta,
    isLoading: isLoadingDocument,
    schema,
    components,
    collectionType,
    id,
    model,
    hasError
  } = useDoc();
  const hasDraftAndPublished = ((_a = schema == null ? void 0 : schema.options) == null ? void 0 : _a.draftAndPublish) ?? false;
  useOnce(() => {
    if ((location == null ? void 0 : location.state) && "error" in location.state) {
      toggleNotification({
        type: "danger",
        message: location.state.error,
        timeout: 5e3
      });
    }
  });
  const isLoadingActionsRBAC = useDocumentRBAC("EditViewPage", (state) => state.isLoading);
  const isSingleType = collectionType === SINGLE_TYPES;
  const isCreatingDocument = !id && !isSingleType;
  const {
    isLoading: isLoadingLayout,
    edit: {
      layout,
      settings: { mainField }
    }
  } = useDocumentLayout(model);
  const { isLazyLoading } = useLazyComponents([]);
  const isLoading = isLoadingActionsRBAC || isLoadingDocument || isLoadingLayout || isLazyLoading;
  const initialValues = React.useMemo(() => {
    if (!document && !isCreatingDocument && !isSingleType || !schema) {
      return void 0;
    }
    const form = (document == null ? void 0 : document.id) ? document : createDefaultForm(schema, components);
    return transformDocument(schema, components)(form);
  }, [document, isCreatingDocument, isSingleType, schema, components]);
  if (hasError) {
    return (0, import_jsx_runtime.jsx)(Page.Error, {});
  }
  if (isLoading && !(document == null ? void 0 : document.documentId)) {
    return (0, import_jsx_runtime.jsx)(Page.Loading, {});
  }
  if (!initialValues) {
    return (0, import_jsx_runtime.jsx)(Page.Error, {});
  }
  const handleTabChange = (status2) => {
    if (status2 === "published" || status2 === "draft") {
      setQuery({ status: status2 }, "push", true);
    }
  };
  let documentTitle = "Untitled";
  if (mainField !== "id" && (document == null ? void 0 : document[mainField])) {
    documentTitle = document[mainField];
  } else if (isSingleType && (schema == null ? void 0 : schema.info.displayName)) {
    documentTitle = schema.info.displayName;
  }
  const validateSync = (values, options) => {
    const yupSchema = createYupSchema(schema == null ? void 0 : schema.attributes, components, {
      status,
      ...options
    });
    return yupSchema.validateSync(values, { abortEarly: false });
  };
  return (0, import_jsx_runtime.jsxs)(Main, { paddingLeft: 10, paddingRight: 10, children: [
    (0, import_jsx_runtime.jsx)(Page.Title, { children: documentTitle }),
    (0, import_jsx_runtime.jsx)(
      Form,
      {
        disabled: hasDraftAndPublished && status === "published",
        initialValues,
        method: isCreatingDocument ? "POST" : "PUT",
        validate: (values, options) => {
          const yupSchema = createYupSchema(schema == null ? void 0 : schema.attributes, components, {
            status,
            ...options
          });
          return yupSchema.validate(values, { abortEarly: false });
        },
        initialErrors: ((_b = location == null ? void 0 : location.state) == null ? void 0 : _b.forceValidation) ? validateSync(initialValues, {}) : {},
        children: ({ resetForm }) => (0, import_jsx_runtime.jsxs)(import_jsx_runtime.Fragment, { children: [
          (0, import_jsx_runtime.jsx)(
            Header,
            {
              isCreating: isCreatingDocument,
              status: hasDraftAndPublished ? getDocumentStatus(document, meta) : void 0,
              title: documentTitle
            }
          ),
          (0, import_jsx_runtime.jsxs)(Tabs.Root, { variant: "simple", value: status, onValueChange: handleTabChange, children: [
            (0, import_jsx_runtime.jsx)(
              Tabs.List,
              {
                "aria-label": formatMessage({
                  id: getTranslation("containers.edit.tabs.label"),
                  defaultMessage: "Document status"
                }),
                children: hasDraftAndPublished ? (0, import_jsx_runtime.jsxs)(import_jsx_runtime.Fragment, { children: [
                  (0, import_jsx_runtime.jsx)(StatusTab, { value: "draft", children: formatMessage({
                    id: getTranslation("containers.edit.tabs.draft"),
                    defaultMessage: "draft"
                  }) }),
                  (0, import_jsx_runtime.jsx)(
                    StatusTab,
                    {
                      disabled: !meta || meta.availableStatus.length === 0,
                      value: "published",
                      children: formatMessage({
                        id: getTranslation("containers.edit.tabs.published"),
                        defaultMessage: "published"
                      })
                    }
                  )
                ] }) : null
              }
            ),
            (0, import_jsx_runtime.jsxs)(Grid.Root, { paddingTop: 8, gap: 4, children: [
              (0, import_jsx_runtime.jsxs)(Grid.Item, { col: 9, s: 12, direction: "column", alignItems: "stretch", children: [
                (0, import_jsx_runtime.jsx)(Tabs.Content, { value: "draft", children: (0, import_jsx_runtime.jsx)(FormLayout, { layout }) }),
                (0, import_jsx_runtime.jsx)(Tabs.Content, { value: "published", children: (0, import_jsx_runtime.jsx)(FormLayout, { layout }) })
              ] }),
              (0, import_jsx_runtime.jsx)(Grid.Item, { col: 3, s: 12, direction: "column", alignItems: "stretch", children: (0, import_jsx_runtime.jsx)(Panels, {}) })
            ] })
          ] }),
          (0, import_jsx_runtime.jsx)(
            Blocker,
            {
              onProceed: resetForm
            }
          )
        ] })
      }
    )
  ] });
};
var StatusTab = dt(Tabs.Trigger)`
  text-transform: uppercase;
`;
var getDocumentStatus = (document, meta) => {
  const docStatus = document == null ? void 0 : document.status;
  const statuses = (meta == null ? void 0 : meta.availableStatus) ?? [];
  if (!docStatus) {
    return "draft";
  }
  if (docStatus === "draft" && statuses.find((doc) => doc.publishedAt !== null)) {
    return "published";
  }
  return docStatus;
};
var ProtectedEditViewPage = () => {
  const { slug = "" } = useParams();
  const {
    permissions = [],
    isLoading,
    error
  } = useRBAC(
    PERMISSIONS.map((action) => ({
      action,
      subject: slug
    }))
  );
  if (isLoading) {
    return (0, import_jsx_runtime.jsx)(Page.Loading, {});
  }
  if (error || !slug) {
    return (0, import_jsx_runtime.jsx)(Page.Error, {});
  }
  return (0, import_jsx_runtime.jsx)(Page.Protect, { permissions, children: ({ permissions: permissions2 }) => (0, import_jsx_runtime.jsx)(DocumentRBAC, { permissions: permissions2, children: (0, import_jsx_runtime.jsx)(EditViewPage, {}) }) });
};

export {
  EditViewPage,
  getDocumentStatus,
  ProtectedEditViewPage
};
//# sourceMappingURL=chunk-UXZRL2MS.js.map
