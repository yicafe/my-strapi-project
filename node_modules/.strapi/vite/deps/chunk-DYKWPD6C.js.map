{
  "version": 3,
  "sources": ["../../../@strapi/admin/admin/src/services/homepage.ts", "../../../@strapi/admin/admin/src/pages/Home/components/Widget.tsx", "../../../@strapi/admin/admin/src/pages/Home/components/ContentManagerWidgets.tsx", "../../../@strapi/admin/admin/src/components/GuidedTour/Homepage.tsx", "../../../@strapi/admin/admin/src/pages/Home/components/GuidedTour.tsx", "../../../@strapi/admin/admin/src/pages/Home/HomePage.tsx"],
  "sourcesContent": ["import * as Homepage from '../../../shared/contracts/homepage';\n\nimport { adminApi } from './api';\n\nconst homepageService = adminApi\n  .enhanceEndpoints({\n    // TODO: remove when the CM widgets are moved to the CM package, the type already exists there\n    addTagTypes: ['RecentDocumentList'],\n  })\n  .injectEndpoints({\n    endpoints: (builder) => ({\n      getRecentDocuments: builder.query<\n        Homepage.GetRecentDocuments.Response['data'],\n        Homepage.GetRecentDocuments.Request['query']\n      >({\n        query: (params) => `/admin/homepage/recent-documents?action=${params.action}`,\n        transformResponse: (response: Homepage.GetRecentDocuments.Response) => response.data,\n        providesTags: (res, _err, { action }) => [\n          { type: 'RecentDocumentList' as const, id: action },\n        ],\n      }),\n    }),\n  });\n\nconst { useGetRecentDocumentsQuery } = homepageService;\n\nexport { useGetRecentDocumentsQuery };\n", "import * as React from 'react';\n\nimport { Box, Flex, type FlexProps, Loader, Typography } from '@strapi/design-system';\nimport { PuzzlePiece, WarningCircle } from '@strapi/icons';\nimport { EmptyDocuments } from '@strapi/icons/symbols';\nimport { type MessageDescriptor, useIntl } from 'react-intl';\n\ninterface RootProps {\n  title: MessageDescriptor;\n  icon?: typeof import('@strapi/icons').PuzzlePiece;\n  children: React.ReactNode;\n}\n\nconst Root = ({ title, icon = PuzzlePiece, children }: RootProps) => {\n  const { formatMessage } = useIntl();\n  const id = React.useId();\n  const Icon = icon;\n\n  return (\n    <Flex\n      width=\"100%\"\n      hasRadius\n      direction=\"column\"\n      alignItems=\"flex-start\"\n      background=\"neutral0\"\n      shadow=\"tableShadow\"\n      tag=\"section\"\n      gap={4}\n      padding={6}\n      aria-labelledby={id}\n    >\n      <Flex direction=\"row\" alignItems=\"center\" gap={2} tag=\"header\">\n        <Icon fill=\"neutral500\" aria-hidden />\n        <Typography textColor=\"neutral500\" variant=\"sigma\" tag=\"h2\" id={id}>\n          {formatMessage(title)}\n        </Typography>\n      </Flex>\n      <Box width=\"100%\" height=\"261px\" overflow=\"auto\" tag=\"main\">\n        {children}\n      </Box>\n    </Flex>\n  );\n};\n\ninterface LoadingProps {\n  children?: string;\n}\n\nconst Loading = ({ children }: LoadingProps) => {\n  const { formatMessage } = useIntl();\n\n  return (\n    <Flex height=\"100%\" justifyContent=\"center\" alignItems=\"center\">\n      <Loader>\n        {children ??\n          formatMessage({\n            id: 'HomePage.widget.loading',\n            defaultMessage: 'Loading widget content',\n          })}\n      </Loader>\n    </Flex>\n  );\n};\n\ninterface ErrorProps {\n  children?: string;\n}\n\nconst Error = ({ children }: ErrorProps) => {\n  const { formatMessage } = useIntl();\n\n  return (\n    <Flex height=\"100%\" direction=\"column\" justifyContent=\"center\" alignItems=\"center\" gap={2}>\n      <WarningCircle width=\"3.2rem\" height=\"3.2rem\" fill=\"danger600\" />\n      <Typography variant=\"delta\">\n        {formatMessage({\n          id: 'global.error',\n          defaultMessage: 'Something went wrong',\n        })}\n      </Typography>\n      <Typography textColor=\"neutral600\">\n        {children ??\n          formatMessage({\n            id: 'HomePage.widget.error',\n            defaultMessage: \"Couldn't load widget content.\",\n          })}\n      </Typography>\n    </Flex>\n  );\n};\n\ninterface NoDataProps {\n  children?: string;\n}\n\nconst NoData = ({ children }: NoDataProps) => {\n  const { formatMessage } = useIntl();\n\n  return (\n    <Flex height=\"100%\" direction=\"column\" justifyContent=\"center\" alignItems=\"center\" gap={6}>\n      <EmptyDocuments width=\"16rem\" height=\"8.8rem\" />\n      <Typography textColor=\"neutral600\">\n        {children ??\n          formatMessage({\n            id: 'HomePage.widget.no-data',\n            defaultMessage: 'No content found.',\n          })}\n      </Typography>\n    </Flex>\n  );\n};\n\nconst Widget = {\n  Root,\n  Loading,\n  Error,\n  NoData,\n};\n\nexport { Widget };\n", "import { Box, IconButton, Status, Table, Tbody, Td, Tr, Typography } from '@strapi/design-system';\nimport { CheckCircle, Pencil } from '@strapi/icons';\nimport { useIntl } from 'react-intl';\nimport { Link, useNavigate } from 'react-router-dom';\nimport { styled } from 'styled-components';\n\nimport { RelativeTime } from '../../../components/RelativeTime';\nimport { useTracking } from '../../../features/Tracking';\nimport { useGetRecentDocumentsQuery } from '../../../services/homepage';\nimport { capitalise } from '../../../utils/strings';\n\nimport { Widget } from './Widget';\n\nimport type { RecentDocument } from '../../../../../shared/contracts/homepage';\n\nconst CellTypography = styled(Typography).attrs({ maxWidth: '14.4rem', display: 'block' })`\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n`;\n\ninterface DocumentStatusProps {\n  status: RecentDocument['status'];\n}\n\nconst DocumentStatus = ({ status = 'draft' }: DocumentStatusProps) => {\n  const statusVariant =\n    status === 'draft' ? 'secondary' : status === 'published' ? 'success' : 'alternative';\n\n  const { formatMessage } = useIntl();\n\n  return (\n    <Status variant={statusVariant} size=\"XS\">\n      <Typography tag=\"span\" variant=\"omega\" fontWeight=\"bold\">\n        {formatMessage({\n          id: `content-manager.containers.List.${status}`,\n          defaultMessage: capitalise(status),\n        })}\n      </Typography>\n    </Status>\n  );\n};\n\nconst RecentDocumentsTable = ({ documents }: { documents: RecentDocument[] }) => {\n  const { formatMessage } = useIntl();\n  const { trackUsage } = useTracking();\n  const navigate = useNavigate();\n\n  const getEditViewLink = (document: RecentDocument): string => {\n    // TODO: import the constants for this once the code is moved to the CM package\n    const isSingleType = document.kind === 'singleType';\n    const kindPath = isSingleType ? 'single-types' : 'collection-types';\n    const queryParams = document.locale ? `?plugins[i18n][locale]=${document.locale}` : '';\n\n    return `/content-manager/${kindPath}/${document.contentTypeUid}${isSingleType ? '' : '/' + document.documentId}${queryParams}`;\n  };\n\n  const handleRowClick = (document: RecentDocument) => () => {\n    trackUsage('willEditEntryFromHome');\n    const link = getEditViewLink(document);\n    navigate(link);\n  };\n\n  return (\n    <Table colCount={5} rowCount={documents?.length ?? 0}>\n      <Tbody>\n        {documents?.map((document) => (\n          <Tr onClick={handleRowClick(document)} cursor=\"pointer\" key={document.documentId}>\n            <Td>\n              <CellTypography title={document.title} variant=\"omega\" textColor=\"neutral800\">\n                {document.title}\n              </CellTypography>\n            </Td>\n            <Td>\n              <CellTypography variant=\"omega\" textColor=\"neutral600\">\n                {document.kind === 'singleType'\n                  ? formatMessage({\n                      id: 'content-manager.widget.last-edited.single-type',\n                      defaultMessage: 'Single-Type',\n                    })\n                  : formatMessage({\n                      id: document.contentTypeDisplayName,\n                      defaultMessage: document.contentTypeDisplayName,\n                    })}\n              </CellTypography>\n            </Td>\n            <Td>\n              <Box display=\"inline-block\">\n                {document.status ? (\n                  <DocumentStatus status={document.status} />\n                ) : (\n                  <Typography textColor=\"neutral600\" aria-hidden>\n                    -\n                  </Typography>\n                )}\n              </Box>\n            </Td>\n            <Td>\n              <Typography textColor=\"neutral600\">\n                <RelativeTime timestamp={new Date(document.updatedAt)} />\n              </Typography>\n            </Td>\n            <Td onClick={(e) => e.stopPropagation()}>\n              <Box display=\"inline-block\">\n                <IconButton\n                  tag={Link}\n                  to={getEditViewLink(document)}\n                  onClick={() => trackUsage('willEditEntryFromHome')}\n                  label={formatMessage({\n                    id: 'content-manager.actions.edit.label',\n                    defaultMessage: 'Edit',\n                  })}\n                  variant=\"ghost\"\n                >\n                  <Pencil />\n                </IconButton>\n              </Box>\n            </Td>\n          </Tr>\n        ))}\n      </Tbody>\n    </Table>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * LastEditedWidget\n * -----------------------------------------------------------------------------------------------*/\n\nconst LastEditedWidgetContent = () => {\n  const { formatMessage } = useIntl();\n  const { data, isLoading, error } = useGetRecentDocumentsQuery({ action: 'update' });\n\n  if (isLoading) {\n    return <Widget.Loading />;\n  }\n\n  if (error || !data) {\n    return <Widget.Error />;\n  }\n\n  if (data.length === 0) {\n    return (\n      <Widget.NoData>\n        {formatMessage({\n          id: 'content-manager.widget.last-edited.no-data',\n          defaultMessage: 'No edited entries',\n        })}\n      </Widget.NoData>\n    );\n  }\n\n  return <RecentDocumentsTable documents={data} />;\n};\n\nconst LastEditedWidget = () => {\n  return (\n    <Widget.Root\n      title={{\n        id: 'content-manager.widget.last-edited.title',\n        defaultMessage: 'Last edited entries',\n      }}\n      icon={Pencil}\n    >\n      <LastEditedWidgetContent />\n    </Widget.Root>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * LastPublishedWidget\n * -----------------------------------------------------------------------------------------------*/\n\nconst LastPublishedWidgetContent = () => {\n  const { formatMessage } = useIntl();\n  const { data, isLoading, error } = useGetRecentDocumentsQuery({ action: 'publish' });\n\n  if (isLoading) {\n    return <Widget.Loading />;\n  }\n\n  if (error || !data) {\n    return <Widget.Error />;\n  }\n\n  if (data.length === 0) {\n    return (\n      <Widget.NoData>\n        {formatMessage({\n          id: 'content-manager.widget.last-published.no-data',\n          defaultMessage: 'No published entries',\n        })}\n      </Widget.NoData>\n    );\n  }\n\n  return <RecentDocumentsTable documents={data} />;\n};\n\nconst LastPublishedWidget = () => {\n  return (\n    <Widget.Root\n      title={{\n        id: 'content-manager.widget.last-published.title',\n        defaultMessage: 'Last published entries',\n      }}\n      icon={CheckCircle}\n    >\n      <LastPublishedWidgetContent />\n    </Widget.Root>\n  );\n};\n\nexport { LastEditedWidget, LastPublishedWidget };\n", "import { Box, Button, Flex, Typography, LinkButton } from '@strapi/design-system';\nimport { ArrowRight } from '@strapi/icons';\nimport { useIntl } from 'react-intl';\nimport { NavLink } from 'react-router-dom';\n\nimport { useTracking } from '../../features/Tracking';\n\nimport { LAYOUT_DATA, States, STATES } from './constants';\nimport { Number, VerticalDivider } from './Ornaments';\nimport { GuidedTourContextValue, useGuidedTour } from './Provider';\n\ntype SectionName = keyof GuidedTourContextValue['guidedTourState'];\n\nconst GuidedTourHomepage = () => {\n  const guidedTourState = useGuidedTour('GuidedTourHomepage', (state) => state.guidedTourState);\n  const setSkipped = useGuidedTour('GuidedTourHomepage', (state) => state.setSkipped);\n  const { formatMessage } = useIntl();\n  const { trackUsage } = useTracking();\n\n  const sections = Object.entries(LAYOUT_DATA).map(([key, val]) => ({\n    key: key,\n    title: val.home.title,\n    content: (\n      <LinkButton\n        onClick={() => trackUsage(val.home.trackingEvent)}\n        tag={NavLink}\n        to={val.home.cta.target}\n        endIcon={<ArrowRight />}\n      >\n        {formatMessage(val.home.cta.title)}\n      </LinkButton>\n    ),\n    isDone: Object.values(guidedTourState[key as SectionName]).every((value) => value === true),\n  }));\n\n  const activeSectionIndex = sections.findIndex((section) => !section.isDone);\n\n  const handleSkip = () => {\n    setSkipped(true);\n    trackUsage('didSkipGuidedtour');\n  };\n\n  return (\n    <Box\n      hasRadius\n      shadow=\"tableShadow\"\n      paddingTop={7}\n      paddingRight={4}\n      paddingLeft={7}\n      paddingBottom={4}\n      background=\"neutral0\"\n    >\n      <Flex direction=\"column\" alignItems=\"stretch\" gap={6}>\n        <Typography variant=\"beta\" tag=\"h2\">\n          {formatMessage({\n            id: 'app.components.GuidedTour.title',\n            defaultMessage: '3 steps to get started',\n          })}\n        </Typography>\n        <Box>\n          {sections.map((section, index) => {\n            const state = getState(activeSectionIndex, index);\n\n            return (\n              <Box key={section.key}>\n                <Flex>\n                  <Box minWidth={`3rem`} marginRight={5}>\n                    <Number state={state}>{index + 1}</Number>\n                  </Box>\n                  <Typography variant=\"delta\" tag=\"h3\">\n                    {formatMessage(section.title)}\n                  </Typography>\n                </Flex>\n                <Flex alignItems=\"flex-start\">\n                  <Flex\n                    justifyContent=\"center\"\n                    minWidth={`3rem`}\n                    marginBottom={3}\n                    marginTop={3}\n                    marginRight={5}\n                  >\n                    {index === sections.length - 1 ? null : <VerticalDivider state={state} />}\n                  </Flex>\n                  <Box marginTop={2}>{state === STATES.IS_ACTIVE ? section.content : null}</Box>\n                </Flex>\n              </Box>\n            );\n          })}\n        </Box>\n      </Flex>\n      <Flex justifyContent=\"flex-end\">\n        <Button variant=\"tertiary\" onClick={handleSkip}>\n          {formatMessage({ id: 'app.components.GuidedTour.skip', defaultMessage: 'Skip the tour' })}\n        </Button>\n      </Flex>\n    </Box>\n  );\n};\n\nconst getState = (activeSectionIndex: number, index: number): States => {\n  if (activeSectionIndex === -1) {\n    return STATES.IS_DONE;\n  }\n  if (index < activeSectionIndex) {\n    return STATES.IS_DONE;\n  }\n  if (index > activeSectionIndex) {\n    return STATES.IS_NOT_DONE;\n  }\n  return STATES.IS_ACTIVE;\n};\n\nexport { GuidedTourHomepage };\n", "import { GuidedTourHomepage } from '../../../components/GuidedTour/Homepage';\nimport { useGuidedTour } from '../../../components/GuidedTour/Provider';\n\nexport const GuidedTour = () => {\n  const guidedTourState = useGuidedTour('HomePage', (state) => state.guidedTourState);\n  const isGuidedTourVisible = useGuidedTour('HomePage', (state) => state.isGuidedTourVisible);\n  const isSkipped = useGuidedTour('HomePage', (state) => state.isSkipped);\n  const showGuidedTour =\n    !Object.values(guidedTourState).every((section) =>\n      Object.values(section).every((step) => step)\n    ) &&\n    isGuidedTourVisible &&\n    !isSkipped;\n\n  if (!showGuidedTour) {\n    return null;\n  }\n\n  return <GuidedTourHomepage />;\n};\n", "import * as React from 'react';\n\nimport { Flex, Grid, Main } from '@strapi/design-system';\nimport { useIntl } from 'react-intl';\n\nimport { Layouts } from '../../components/Layouts/Layout';\nimport { Page } from '../../components/PageHelpers';\nimport { useEnterprise } from '../../ee';\nimport { useAuth } from '../../features/Auth';\n\nimport { LastEditedWidget, LastPublishedWidget } from './components/ContentManagerWidgets';\nimport { GuidedTour } from './components/GuidedTour';\n\n/* -------------------------------------------------------------------------------------------------\n * HomePageCE\n * -----------------------------------------------------------------------------------------------*/\n\nconst HomePageCE = () => {\n  const { formatMessage } = useIntl();\n  const user = useAuth('HomePageCE', (state) => state.user);\n  const displayName = user?.firstname ?? user?.username ?? user?.email;\n\n  return (\n    <Main>\n      <Page.Title>\n        {formatMessage({ id: 'HomePage.head.title', defaultMessage: 'Homepage' })}\n      </Page.Title>\n      <Layouts.Header\n        title={formatMessage(\n          { id: 'HomePage.header.title', defaultMessage: 'Hello {name}' },\n          { name: displayName }\n        )}\n        subtitle={formatMessage({\n          id: 'HomePage.header.subtitle',\n          defaultMessage: 'Welcome to your administration panel',\n        })}\n      />\n      <Layouts.Content>\n        <Flex direction=\"column\" alignItems=\"stretch\" gap={8} paddingBottom={10}>\n          <GuidedTour />\n          <Grid.Root gap={5}>\n            <Grid.Item col={6} s={12}>\n              <LastEditedWidget />\n            </Grid.Item>\n            <Grid.Item col={6} s={12}>\n              <LastPublishedWidget />\n            </Grid.Item>\n          </Grid.Root>\n        </Flex>\n      </Layouts.Content>\n    </Main>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * HomePage\n * -----------------------------------------------------------------------------------------------*/\n\nconst HomePage = () => {\n  const Page = useEnterprise(\n    HomePageCE,\n    // eslint-disable-next-line import/no-cycle\n    async () => (await import('../../../../ee/admin/src/pages/HomePage')).HomePageEE\n  );\n\n  // block rendering until the EE component is fully loaded\n  if (!Page) {\n    return null;\n  }\n\n  return <Page />;\n};\n\nexport { HomePage, HomePageCE };\n"],
  "mappings": "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",
  "names": ["Page"]
}
