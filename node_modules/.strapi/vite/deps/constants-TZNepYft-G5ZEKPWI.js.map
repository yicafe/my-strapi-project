{
  "version": 3,
  "sources": ["../../../@strapi/admin/ee/admin/src/pages/AuthPage/components/Providers.tsx", "../../../@strapi/admin/ee/admin/src/pages/AuthPage/constants.ts"],
  "sourcesContent": ["import { Box, Button, Divider, Flex, Loader, Main, Typography, Link } from '@strapi/design-system';\nimport { useIntl } from 'react-intl';\nimport { NavLink, Navigate, useNavigate } from 'react-router-dom';\nimport { styled } from 'styled-components';\n\nimport { Logo } from '../../../../../../admin/src/components/UnauthenticatedLogo';\nimport {\n  Column,\n  LayoutContent,\n  UnauthenticatedLayout,\n} from '../../../../../../admin/src/layouts/UnauthenticatedLayout';\nimport { useGetProvidersQuery } from '../../../../../../admin/src/services/auth';\n\nimport { SSOProviders } from './SSOProviders';\n\nconst Providers = () => {\n  const navigate = useNavigate();\n  const { formatMessage } = useIntl();\n  const { isLoading, data: providers = [] } = useGetProvidersQuery(undefined, {\n    skip: !window.strapi.features.isEnabled(window.strapi.features.SSO),\n  });\n\n  const handleClick = () => {\n    navigate('/auth/login');\n  };\n\n  if (\n    !window.strapi.features.isEnabled(window.strapi.features.SSO) ||\n    (!isLoading && providers.length === 0)\n  ) {\n    return <Navigate to=\"/auth/login\" />;\n  }\n\n  return (\n    <UnauthenticatedLayout>\n      <Main>\n        <LayoutContent>\n          <Column>\n            <Logo />\n            <Box paddingTop={6} paddingBottom={1}>\n              <Typography tag=\"h1\" variant=\"alpha\">\n                {formatMessage({ id: 'Auth.form.welcome.title' })}\n              </Typography>\n            </Box>\n            <Box paddingBottom={7}>\n              <Typography variant=\"epsilon\" textColor=\"neutral600\">\n                {formatMessage({ id: 'Auth.login.sso.subtitle' })}\n              </Typography>\n            </Box>\n          </Column>\n          <Flex direction=\"column\" alignItems=\"stretch\" gap={7}>\n            {isLoading ? (\n              <Flex justifyContent=\"center\">\n                <Loader>{formatMessage({ id: 'Auth.login.sso.loading' })}</Loader>\n              </Flex>\n            ) : (\n              <SSOProviders providers={providers} />\n            )}\n            <Flex>\n              <DividerFull />\n              <Box paddingLeft={3} paddingRight={3}>\n                <Typography variant=\"sigma\" textColor=\"neutral600\">\n                  {formatMessage({ id: 'or' })}\n                </Typography>\n              </Box>\n              <DividerFull />\n            </Flex>\n            <Button fullWidth size=\"L\" onClick={handleClick}>\n              {formatMessage({ id: 'Auth.form.button.login.strapi' })}\n            </Button>\n          </Flex>\n        </LayoutContent>\n        <Flex justifyContent=\"center\">\n          <Box paddingTop={4}>\n            <Link tag={NavLink} to=\"/auth/forgot-password\">\n              <Typography variant=\"pi\">\n                {formatMessage({ id: 'Auth.link.forgot-password' })}\n              </Typography>\n            </Link>\n          </Box>\n        </Flex>\n      </Main>\n    </UnauthenticatedLayout>\n  );\n};\n\nconst DividerFull = styled(Divider)`\n  flex: 1;\n`;\n\nexport { Providers };\n", "import type { ComponentType } from 'react';\n\nimport { Providers } from './components/Providers';\n\ntype AuthType = 'providers';\n\ntype FormDictionary = Record<AuthType, ComponentType>;\n\nexport const FORMS = {\n  providers: Providers,\n} satisfies FormDictionary;\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAeA,IAAM,YAAY,MAAM;AACtB,QAAM,WAAW,YAAY;AACvB,QAAA,EAAE,cAAc,IAAI,QAAQ;AAC5B,QAAA,EAAE,WAAW,MAAM,YAAY,CAAA,EAAG,IAAI,qBAAqB,QAAW;IAC1E,MAAM,CAAC,OAAO,OAAO,SAAS,UAAU,OAAO,OAAO,SAAS,GAAG;EAAA,CACnE;AAED,QAAM,cAAc,MAAM;AACxB,aAAS,aAAa;EAAA;AAGxB,MACE,CAAC,OAAO,OAAO,SAAS,UAAU,OAAO,OAAO,SAAS,GAAG,KAC3D,CAAC,aAAa,UAAU,WAAW,GACpC;AACO,eAAA,wBAAC,UAAS,EAAA,IAAG,cAAc,CAAA;EAAA;AAIlC,aAAA,wBAAC,uBACC,EAAA,cAAA,yBAAC,MACC,EAAA,UAAA;QAAA,yBAAC,eACC,EAAA,UAAA;UAAA,yBAAC,QACC,EAAA,UAAA;YAAA,wBAAC,MAAK,CAAA,CAAA;YAAA,wBACL,KAAI,EAAA,YAAY,GAAG,eAAe,GACjC,cAAA,wBAAC,YAAW,EAAA,KAAI,MAAK,SAAQ,SAC1B,UAAc,cAAA,EAAE,IAAI,0BAA0B,CAAC,EAAA,CAClD,EACF,CAAA;YAAA,wBACC,KAAI,EAAA,eAAe,GAClB,cAAA,wBAAC,YAAA,EAAW,SAAQ,WAAU,WAAU,cACrC,UAAA,cAAc,EAAE,IAAI,0BAA0B,CAAC,EAAA,CAClD,EACF,CAAA;MAAA,EACF,CAAA;UAAA,yBACC,MAAK,EAAA,WAAU,UAAS,YAAW,WAAU,KAAK,GAChD,UAAA;QAAA,gBAAA,wBACE,MAAK,EAAA,gBAAe,UACnB,cAAA,wBAAC,QAAA,EAAQ,UAAc,cAAA,EAAE,IAAI,yBAAA,CAA0B,EAAE,CAAA,EAAA,CAC3D,QAEA,wBAAC,cAAA,EAAa,UAAsB,CAAA;YAAA,yBAErC,MACC,EAAA,UAAA;cAAA,wBAAC,aAAY,CAAA,CAAA;cAAA,wBACZ,KAAI,EAAA,aAAa,GAAG,cAAc,GACjC,cAAA,wBAAC,YAAW,EAAA,SAAQ,SAAQ,WAAU,cACnC,UAAc,cAAA,EAAE,IAAI,KAAK,CAAC,EAAA,CAC7B,EACF,CAAA;cAAA,wBACC,aAAY,CAAA,CAAA;QAAA,EACf,CAAA;YACC,wBAAA,QAAA,EAAO,WAAS,MAAC,MAAK,KAAI,SAAS,aACjC,UAAc,cAAA,EAAE,IAAI,gCAAA,CAAiC,EACxD,CAAA;MAAA,EACF,CAAA;IAAA,EACF,CAAA;QACA,wBAAC,MAAK,EAAA,gBAAe,UACnB,cAAA,wBAAC,KAAI,EAAA,YAAY,GACf,cAAA,wBAAC,MAAK,EAAA,KAAK,SAAS,IAAG,yBACrB,cAAC,wBAAA,YAAA,EAAW,SAAQ,MACjB,UAAc,cAAA,EAAE,IAAI,4BAAA,CAA6B,EAAA,CACpD,EACF,CAAA,EAAA,CACF,EACF,CAAA;EAAA,EAAA,CACF,EACF,CAAA;AAEJ;AAEA,IAAM,cAAc,GAAO,OAAO;;;AC9E3B,IAAM,QAAQ;EACnB,WAAW;AACb;",
  "names": []
}
