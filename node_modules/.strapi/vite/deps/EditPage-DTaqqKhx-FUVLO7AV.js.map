{
  "version": 3,
  "sources": ["../../../@strapi/admin/admin/src/pages/Settings/pages/Users/EditPage.tsx"],
  "sourcesContent": ["import * as React from 'react';\n\nimport { Box, Button, Flex, Grid, Typography } from '@strapi/design-system';\nimport { Check } from '@strapi/icons';\nimport pick from 'lodash/pick';\nimport { useIntl } from 'react-intl';\nimport { useMatch, useNavigate } from 'react-router-dom';\nimport * as yup from 'yup';\n\nimport { Update } from '../../../../../../shared/contracts/user';\nimport { Form, FormHelpers } from '../../../../components/Form';\nimport { InputRenderer } from '../../../../components/FormInputs/Renderer';\nimport { Layouts } from '../../../../components/Layouts/Layout';\nimport { Page } from '../../../../components/PageHelpers';\nimport { useTypedSelector } from '../../../../core/store/hooks';\nimport { BackButton } from '../../../../features/BackButton';\nimport { useNotification } from '../../../../features/Notifications';\nimport { useAPIErrorHandler } from '../../../../hooks/useAPIErrorHandler';\nimport { useEnterprise } from '../../../../hooks/useEnterprise';\nimport { useRBAC } from '../../../../hooks/useRBAC';\nimport { selectAdminPermissions } from '../../../../selectors';\nimport { useAdminUsers, useUpdateUserMutation } from '../../../../services/users';\nimport { isBaseQueryError } from '../../../../utils/baseQuery';\nimport { translatedErrors } from '../../../../utils/translatedErrors';\nimport { getDisplayName } from '../../../../utils/users';\n\nimport { MagicLinkCE } from './components/MagicLinkCE';\nimport { SelectRoles } from './components/SelectRoles';\nimport { COMMON_USER_SCHEMA } from './utils/validation';\n\nconst EDIT_VALIDATION_SCHEMA = yup.object().shape({\n  ...COMMON_USER_SCHEMA,\n  isActive: yup.bool(),\n  roles: yup\n    .array()\n    .min(1, {\n      id: translatedErrors.required.id,\n      defaultMessage: 'This field is required',\n    })\n    .required({\n      id: translatedErrors.required.id,\n      defaultMessage: 'This field is required',\n    }),\n});\n\nconst fieldsToPick = ['email', 'firstname', 'lastname', 'username', 'isActive', 'roles'] as const;\n\n/* -------------------------------------------------------------------------------------------------\n * EditPage\n * -----------------------------------------------------------------------------------------------*/\n\nconst EditPage = () => {\n  const { formatMessage } = useIntl();\n  const match = useMatch('/settings/users/:id');\n  const id = match?.params?.id ?? '';\n  const navigate = useNavigate();\n  const { toggleNotification } = useNotification();\n  const MagicLink = useEnterprise(\n    MagicLinkCE,\n    async () =>\n      (\n        await import(\n          '../../../../../../ee/admin/src/pages/SettingsPage/pages/Users/components/MagicLinkEE'\n        )\n      ).MagicLinkEE\n  );\n  const {\n    _unstableFormatAPIError: formatAPIError,\n    _unstableFormatValidationErrors: formatValidationErrors,\n  } = useAPIErrorHandler();\n\n  const permissions = useTypedSelector(selectAdminPermissions);\n\n  const {\n    isLoading: isLoadingRBAC,\n    allowedActions: { canUpdate },\n  } = useRBAC({\n    read: permissions.settings?.users.read ?? [],\n    update: permissions.settings?.users.update ?? [],\n  });\n\n  const [updateUser] = useUpdateUserMutation();\n\n  const {\n    data,\n    error,\n    isLoading: isLoadingAdminUsers,\n  } = useAdminUsers(\n    { id },\n    {\n      refetchOnMountOrArgChange: true,\n    }\n  );\n\n  const [user] = data?.users ?? [];\n\n  React.useEffect(() => {\n    if (error) {\n      // Redirect the user to the homepage if is not allowed to read\n      if (error.name === 'UnauthorizedError') {\n        toggleNotification({\n          type: 'info',\n          message: formatMessage({\n            id: 'notification.permission.not-allowed-read',\n            defaultMessage: 'You are not allowed to see this document',\n          }),\n        });\n\n        navigate('/');\n      } else {\n        toggleNotification({\n          type: 'danger',\n          message: formatAPIError(error),\n        });\n      }\n    }\n  }, [error, formatAPIError, formatMessage, navigate, toggleNotification]);\n\n  const isLoading = isLoadingAdminUsers || !MagicLink || isLoadingRBAC;\n\n  if (isLoading) {\n    return <Page.Loading />;\n  }\n\n  type InitialData = Pick<Update.Request['body'], (typeof fieldsToPick)[number]> & {\n    confirmPassword: string;\n    password: string;\n  };\n\n  const initialData = {\n    ...pick(user, fieldsToPick),\n    roles: user.roles.map(({ id }) => id),\n    password: '',\n    confirmPassword: '',\n  } satisfies InitialData;\n\n  const handleSubmit = async (body: InitialData, actions: FormHelpers<InitialData>) => {\n    const { confirmPassword: _confirmPassword, ...bodyRest } = body;\n\n    const res = await updateUser({\n      id,\n      ...bodyRest,\n    });\n\n    if ('error' in res && isBaseQueryError(res.error)) {\n      if (res.error.name === 'ValidationError') {\n        actions.setErrors(formatValidationErrors(res.error));\n      }\n\n      toggleNotification({\n        type: 'danger',\n        message: formatAPIError(res.error),\n      });\n    } else {\n      toggleNotification({\n        type: 'success',\n        message: formatMessage({ id: 'notification.success.saved', defaultMessage: 'Saved' }),\n      });\n\n      actions.setValues({\n        ...pick(body, fieldsToPick),\n        password: '',\n        confirmPassword: '',\n      });\n    }\n  };\n\n  return (\n    <Page.Main>\n      <Page.Title>\n        {formatMessage(\n          { id: 'Settings.PageTitle', defaultMessage: 'Settings - {name}' },\n          {\n            name: 'Users',\n          }\n        )}\n      </Page.Title>\n      <Form\n        method=\"PUT\"\n        onSubmit={handleSubmit}\n        initialValues={initialData}\n        validationSchema={EDIT_VALIDATION_SCHEMA}\n      >\n        {({ isSubmitting, modified }) => {\n          return (\n            <>\n              <Layouts.Header\n                primaryAction={\n                  <Button\n                    disabled={isSubmitting || !canUpdate || !modified}\n                    startIcon={<Check />}\n                    loading={isSubmitting}\n                    type=\"submit\"\n                  >\n                    {formatMessage({ id: 'global.save', defaultMessage: 'Save' })}\n                  </Button>\n                }\n                title={formatMessage(\n                  {\n                    id: 'app.containers.Users.EditPage.header.label',\n                    defaultMessage: 'Edit {name}',\n                  },\n                  {\n                    // @ts-expect-error â€“ issues with the Entity ID type, still.\n                    name: getDisplayName(initialData),\n                  }\n                )}\n                navigationAction={<BackButton fallback=\"../users\" />}\n              />\n              <Layouts.Content>\n                {user?.registrationToken && (\n                  <Box paddingBottom={6}>\n                    <MagicLink registrationToken={user.registrationToken} />\n                  </Box>\n                )}\n                <Flex direction=\"column\" alignItems=\"stretch\" gap={7}>\n                  <Box\n                    background=\"neutral0\"\n                    hasRadius\n                    shadow=\"filterShadow\"\n                    paddingTop={6}\n                    paddingBottom={6}\n                    paddingLeft={7}\n                    paddingRight={7}\n                  >\n                    <Flex direction=\"column\" alignItems=\"stretch\" gap={4}>\n                      <Typography variant=\"delta\" tag=\"h2\">\n                        {formatMessage({\n                          id: 'app.components.Users.ModalCreateBody.block-title.details',\n                          defaultMessage: 'Details',\n                        })}\n                      </Typography>\n                      <Grid.Root gap={5}>\n                        {LAYOUT.map((row) =>\n                          row.map(({ size, label, ...field }) => {\n                            return (\n                              <Grid.Item\n                                key={field.name}\n                                col={size}\n                                direction=\"column\"\n                                alignItems=\"stretch\"\n                              >\n                                <InputRenderer\n                                  {...field}\n                                  disabled={!canUpdate}\n                                  label={formatMessage(label)}\n                                  placeholder={\n                                    'placeholder' in field\n                                      ? formatMessage(field.placeholder)\n                                      : undefined\n                                  }\n                                />\n                              </Grid.Item>\n                            );\n                          })\n                        )}\n                      </Grid.Root>\n                    </Flex>\n                  </Box>\n                  <Box\n                    background=\"neutral0\"\n                    hasRadius\n                    shadow=\"filterShadow\"\n                    paddingTop={6}\n                    paddingBottom={6}\n                    paddingLeft={7}\n                    paddingRight={7}\n                  >\n                    <Flex direction=\"column\" alignItems=\"stretch\" gap={4}>\n                      <Typography variant=\"delta\" tag=\"h2\">\n                        {formatMessage({\n                          id: 'global.roles',\n                          defaultMessage: \"User's role\",\n                        })}\n                      </Typography>\n                      <Grid.Root gap={5}>\n                        <Grid.Item col={6} xs={12} direction=\"column\" alignItems=\"stretch\">\n                          <SelectRoles disabled={!canUpdate} />\n                        </Grid.Item>\n                      </Grid.Root>\n                    </Flex>\n                  </Box>\n                </Flex>\n              </Layouts.Content>\n            </>\n          );\n        }}\n      </Form>\n    </Page.Main>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * EditPage LAYOUT\n * -----------------------------------------------------------------------------------------------*/\n\nconst LAYOUT = [\n  [\n    {\n      label: {\n        id: 'Auth.form.firstname.label',\n        defaultMessage: 'First name',\n      },\n      name: 'firstname',\n      placeholder: {\n        id: 'Auth.form.firstname.placeholder',\n        defaultMessage: 'e.g. Kai',\n      },\n      type: 'string' as const,\n      size: 6,\n      required: true,\n    },\n    {\n      label: {\n        id: 'Auth.form.lastname.label',\n        defaultMessage: 'Last name',\n      },\n      name: 'lastname',\n      placeholder: {\n        id: 'Auth.form.lastname.placeholder',\n        defaultMessage: 'e.g. Doe',\n      },\n      type: 'string' as const,\n      size: 6,\n    },\n  ],\n  [\n    {\n      label: {\n        id: 'Auth.form.email.label',\n        defaultMessage: 'Email',\n      },\n      name: 'email',\n      placeholder: {\n        id: 'Auth.form.email.placeholder',\n        defaultMessage: 'e.g. kai.doe@strapi.io',\n      },\n      type: 'email' as const,\n      size: 6,\n      required: true,\n    },\n    {\n      label: {\n        id: 'Auth.form.username.label',\n        defaultMessage: 'Username',\n      },\n      name: 'username',\n      placeholder: {\n        id: 'Auth.form.username.placeholder',\n        defaultMessage: 'e.g. Kai_Doe',\n      },\n      type: 'string' as const,\n      size: 6,\n    },\n  ],\n  [\n    {\n      autoComplete: 'new-password',\n      label: {\n        id: 'global.password',\n        defaultMessage: 'Password',\n      },\n      name: 'password',\n      type: 'password' as const,\n      size: 6,\n    },\n    {\n      autoComplete: 'new-password',\n      label: {\n        id: 'Auth.form.confirmPassword.label',\n        defaultMessage: 'Password confirmation',\n      },\n      name: 'confirmPassword',\n      type: 'password' as const,\n      size: 6,\n    },\n  ],\n  [\n    {\n      label: {\n        id: 'Auth.form.active.label',\n        defaultMessage: 'Active',\n      },\n      name: 'isActive',\n      type: 'boolean' as const,\n      size: 6,\n    },\n  ],\n];\n\nconst ProtectedEditPage = () => {\n  const permissions = useTypedSelector((state) => state.admin_app.permissions.settings?.users.read);\n\n  return (\n    <Page.Protect permissions={permissions}>\n      <EditPage />\n    </Page.Protect>\n  );\n};\n\nexport { EditPage, ProtectedEditPage };\n"],
  "mappings": "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",
  "names": ["create", "translatedErrors", "pick", "id", "InputRenderer"]
}
