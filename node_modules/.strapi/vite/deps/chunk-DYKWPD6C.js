import {
  LAYOUT_DATA,
  Number,
  STATES,
  VerticalDivider
} from "./chunk-RV6R4R3W.js";
import {
  RelativeTime
} from "./chunk-CQV24LJX.js";
import {
  Layouts,
  useEnterprise
} from "./chunk-WAN4NJHK.js";
import {
  ForwardRef$J,
  Page,
  capitalise,
  useAuth,
  useGuidedTour,
  useTracking
} from "./chunk-Z4DUCMVZ.js";
import {
  Box,
  Button,
  Flex,
  Grid,
  IconButton,
  LinkButton,
  Loader,
  Main,
  Status,
  Table,
  Tbody,
  Td,
  Tr,
  Typography,
  adminApi,
  useIntl
} from "./chunk-3AE57NTV.js";
import {
  Link,
  NavLink,
  useNavigate
} from "./chunk-ZJMETV45.js";
import {
  ForwardRef$15,
  ForwardRef$1r,
  ForwardRef$3,
  ForwardRef$4v,
  ForwardRef$53
} from "./chunk-UCO6YWR3.js";
import {
  require_jsx_runtime
} from "./chunk-QBLEIVF7.js";
import {
  dt
} from "./chunk-WRI5LBAT.js";
import {
  require_react
} from "./chunk-BCGHH3YY.js";
import {
  __toESM
} from "./chunk-WGAPYIUP.js";

// node_modules/@strapi/admin/dist/admin/HomePage-NPjXohKj.mjs
var import_jsx_runtime = __toESM(require_jsx_runtime(), 1);
var React = __toESM(require_react(), 1);
var homepageService = adminApi.enhanceEndpoints({
  // TODO: remove when the CM widgets are moved to the CM package, the type already exists there
  addTagTypes: ["RecentDocumentList"]
}).injectEndpoints({
  endpoints: (builder) => ({
    getRecentDocuments: builder.query({
      query: (params) => `/admin/homepage/recent-documents?action=${params.action}`,
      transformResponse: (response) => response.data,
      providesTags: (res, _err, { action }) => [
        { type: "RecentDocumentList", id: action }
      ]
    })
  })
});
var { useGetRecentDocumentsQuery } = homepageService;
var Root = ({ title, icon = ForwardRef$15, children }) => {
  const { formatMessage } = useIntl();
  const id = React.useId();
  const Icon = icon;
  return (0, import_jsx_runtime.jsxs)(
    Flex,
    {
      width: "100%",
      hasRadius: true,
      direction: "column",
      alignItems: "flex-start",
      background: "neutral0",
      shadow: "tableShadow",
      tag: "section",
      gap: 4,
      padding: 6,
      "aria-labelledby": id,
      children: [
        (0, import_jsx_runtime.jsxs)(Flex, { direction: "row", alignItems: "center", gap: 2, tag: "header", children: [
          (0, import_jsx_runtime.jsx)(Icon, { fill: "neutral500", "aria-hidden": true }),
          (0, import_jsx_runtime.jsx)(Typography, { textColor: "neutral500", variant: "sigma", tag: "h2", id, children: formatMessage(title) })
        ] }),
        (0, import_jsx_runtime.jsx)(Box, { width: "100%", height: "261px", overflow: "auto", tag: "main", children })
      ]
    }
  );
};
var Loading = ({ children }) => {
  const { formatMessage } = useIntl();
  return (0, import_jsx_runtime.jsx)(Flex, { height: "100%", justifyContent: "center", alignItems: "center", children: (0, import_jsx_runtime.jsx)(Loader, { children: children ?? formatMessage({
    id: "HomePage.widget.loading",
    defaultMessage: "Loading widget content"
  }) }) });
};
var Error = ({ children }) => {
  const { formatMessage } = useIntl();
  return (0, import_jsx_runtime.jsxs)(Flex, { height: "100%", direction: "column", justifyContent: "center", alignItems: "center", gap: 2, children: [
    (0, import_jsx_runtime.jsx)(ForwardRef$3, { width: "3.2rem", height: "3.2rem", fill: "danger600" }),
    (0, import_jsx_runtime.jsx)(Typography, { variant: "delta", children: formatMessage({
      id: "global.error",
      defaultMessage: "Something went wrong"
    }) }),
    (0, import_jsx_runtime.jsx)(Typography, { textColor: "neutral600", children: children ?? formatMessage({
      id: "HomePage.widget.error",
      defaultMessage: "Couldn't load widget content."
    }) })
  ] });
};
var NoData = ({ children }) => {
  const { formatMessage } = useIntl();
  return (0, import_jsx_runtime.jsxs)(Flex, { height: "100%", direction: "column", justifyContent: "center", alignItems: "center", gap: 6, children: [
    (0, import_jsx_runtime.jsx)(ForwardRef$J, { width: "16rem", height: "8.8rem" }),
    (0, import_jsx_runtime.jsx)(Typography, { textColor: "neutral600", children: children ?? formatMessage({
      id: "HomePage.widget.no-data",
      defaultMessage: "No content found."
    }) })
  ] });
};
var Widget = {
  Root,
  Loading,
  Error,
  NoData
};
var CellTypography = dt(Typography).attrs({ maxWidth: "14.4rem", display: "block" })`
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
`;
var DocumentStatus = ({ status = "draft" }) => {
  const statusVariant = status === "draft" ? "secondary" : status === "published" ? "success" : "alternative";
  const { formatMessage } = useIntl();
  return (0, import_jsx_runtime.jsx)(Status, { variant: statusVariant, size: "XS", children: (0, import_jsx_runtime.jsx)(Typography, { tag: "span", variant: "omega", fontWeight: "bold", children: formatMessage({
    id: `content-manager.containers.List.${status}`,
    defaultMessage: capitalise(status)
  }) }) });
};
var RecentDocumentsTable = ({ documents }) => {
  const { formatMessage } = useIntl();
  const { trackUsage } = useTracking();
  const navigate = useNavigate();
  const getEditViewLink = (document) => {
    const isSingleType = document.kind === "singleType";
    const kindPath = isSingleType ? "single-types" : "collection-types";
    const queryParams = document.locale ? `?plugins[i18n][locale]=${document.locale}` : "";
    return `/content-manager/${kindPath}/${document.contentTypeUid}${isSingleType ? "" : "/" + document.documentId}${queryParams}`;
  };
  const handleRowClick = (document) => () => {
    trackUsage("willEditEntryFromHome");
    const link = getEditViewLink(document);
    navigate(link);
  };
  return (0, import_jsx_runtime.jsx)(Table, { colCount: 5, rowCount: (documents == null ? void 0 : documents.length) ?? 0, children: (0, import_jsx_runtime.jsx)(Tbody, { children: documents == null ? void 0 : documents.map((document) => (0, import_jsx_runtime.jsxs)(Tr, { onClick: handleRowClick(document), cursor: "pointer", children: [
    (0, import_jsx_runtime.jsx)(Td, { children: (0, import_jsx_runtime.jsx)(CellTypography, { title: document.title, variant: "omega", textColor: "neutral800", children: document.title }) }),
    (0, import_jsx_runtime.jsx)(Td, { children: (0, import_jsx_runtime.jsx)(CellTypography, { variant: "omega", textColor: "neutral600", children: document.kind === "singleType" ? formatMessage({
      id: "content-manager.widget.last-edited.single-type",
      defaultMessage: "Single-Type"
    }) : formatMessage({
      id: document.contentTypeDisplayName,
      defaultMessage: document.contentTypeDisplayName
    }) }) }),
    (0, import_jsx_runtime.jsx)(Td, { children: (0, import_jsx_runtime.jsx)(Box, { display: "inline-block", children: document.status ? (0, import_jsx_runtime.jsx)(DocumentStatus, { status: document.status }) : (0, import_jsx_runtime.jsx)(Typography, { textColor: "neutral600", "aria-hidden": true, children: "-" }) }) }),
    (0, import_jsx_runtime.jsx)(Td, { children: (0, import_jsx_runtime.jsx)(Typography, { textColor: "neutral600", children: (0, import_jsx_runtime.jsx)(RelativeTime, { timestamp: new Date(document.updatedAt) }) }) }),
    (0, import_jsx_runtime.jsx)(Td, { onClick: (e) => e.stopPropagation(), children: (0, import_jsx_runtime.jsx)(Box, { display: "inline-block", children: (0, import_jsx_runtime.jsx)(
      IconButton,
      {
        tag: Link,
        to: getEditViewLink(document),
        onClick: () => trackUsage("willEditEntryFromHome"),
        label: formatMessage({
          id: "content-manager.actions.edit.label",
          defaultMessage: "Edit"
        }),
        variant: "ghost",
        children: (0, import_jsx_runtime.jsx)(ForwardRef$1r, {})
      }
    ) }) })
  ] }, document.documentId)) }) });
};
var LastEditedWidgetContent = () => {
  const { formatMessage } = useIntl();
  const { data, isLoading, error } = useGetRecentDocumentsQuery({ action: "update" });
  if (isLoading) {
    return (0, import_jsx_runtime.jsx)(Widget.Loading, {});
  }
  if (error || !data) {
    return (0, import_jsx_runtime.jsx)(Widget.Error, {});
  }
  if (data.length === 0) {
    return (0, import_jsx_runtime.jsx)(Widget.NoData, { children: formatMessage({
      id: "content-manager.widget.last-edited.no-data",
      defaultMessage: "No edited entries"
    }) });
  }
  return (0, import_jsx_runtime.jsx)(RecentDocumentsTable, { documents: data });
};
var LastEditedWidget = () => {
  return (0, import_jsx_runtime.jsx)(
    Widget.Root,
    {
      title: {
        id: "content-manager.widget.last-edited.title",
        defaultMessage: "Last edited entries"
      },
      icon: ForwardRef$1r,
      children: (0, import_jsx_runtime.jsx)(LastEditedWidgetContent, {})
    }
  );
};
var LastPublishedWidgetContent = () => {
  const { formatMessage } = useIntl();
  const { data, isLoading, error } = useGetRecentDocumentsQuery({ action: "publish" });
  if (isLoading) {
    return (0, import_jsx_runtime.jsx)(Widget.Loading, {});
  }
  if (error || !data) {
    return (0, import_jsx_runtime.jsx)(Widget.Error, {});
  }
  if (data.length === 0) {
    return (0, import_jsx_runtime.jsx)(Widget.NoData, { children: formatMessage({
      id: "content-manager.widget.last-published.no-data",
      defaultMessage: "No published entries"
    }) });
  }
  return (0, import_jsx_runtime.jsx)(RecentDocumentsTable, { documents: data });
};
var LastPublishedWidget = () => {
  return (0, import_jsx_runtime.jsx)(
    Widget.Root,
    {
      title: {
        id: "content-manager.widget.last-published.title",
        defaultMessage: "Last published entries"
      },
      icon: ForwardRef$4v,
      children: (0, import_jsx_runtime.jsx)(LastPublishedWidgetContent, {})
    }
  );
};
var GuidedTourHomepage = () => {
  const guidedTourState = useGuidedTour("GuidedTourHomepage", (state) => state.guidedTourState);
  const setSkipped = useGuidedTour("GuidedTourHomepage", (state) => state.setSkipped);
  const { formatMessage } = useIntl();
  const { trackUsage } = useTracking();
  const sections = Object.entries(LAYOUT_DATA).map(([key, val]) => ({
    key,
    title: val.home.title,
    content: (0, import_jsx_runtime.jsx)(
      LinkButton,
      {
        onClick: () => trackUsage(val.home.trackingEvent),
        tag: NavLink,
        to: val.home.cta.target,
        endIcon: (0, import_jsx_runtime.jsx)(ForwardRef$53, {}),
        children: formatMessage(val.home.cta.title)
      }
    ),
    isDone: Object.values(guidedTourState[key]).every((value) => value === true)
  }));
  const activeSectionIndex = sections.findIndex((section) => !section.isDone);
  const handleSkip = () => {
    setSkipped(true);
    trackUsage("didSkipGuidedtour");
  };
  return (0, import_jsx_runtime.jsxs)(
    Box,
    {
      hasRadius: true,
      shadow: "tableShadow",
      paddingTop: 7,
      paddingRight: 4,
      paddingLeft: 7,
      paddingBottom: 4,
      background: "neutral0",
      children: [
        (0, import_jsx_runtime.jsxs)(Flex, { direction: "column", alignItems: "stretch", gap: 6, children: [
          (0, import_jsx_runtime.jsx)(Typography, { variant: "beta", tag: "h2", children: formatMessage({
            id: "app.components.GuidedTour.title",
            defaultMessage: "3 steps to get started"
          }) }),
          (0, import_jsx_runtime.jsx)(Box, { children: sections.map((section, index) => {
            const state = getState(activeSectionIndex, index);
            return (0, import_jsx_runtime.jsxs)(Box, { children: [
              (0, import_jsx_runtime.jsxs)(Flex, { children: [
                (0, import_jsx_runtime.jsx)(Box, { minWidth: `3rem`, marginRight: 5, children: (0, import_jsx_runtime.jsx)(Number, { state, children: index + 1 }) }),
                (0, import_jsx_runtime.jsx)(Typography, { variant: "delta", tag: "h3", children: formatMessage(section.title) })
              ] }),
              (0, import_jsx_runtime.jsxs)(Flex, { alignItems: "flex-start", children: [
                (0, import_jsx_runtime.jsx)(
                  Flex,
                  {
                    justifyContent: "center",
                    minWidth: `3rem`,
                    marginBottom: 3,
                    marginTop: 3,
                    marginRight: 5,
                    children: index === sections.length - 1 ? null : (0, import_jsx_runtime.jsx)(VerticalDivider, { state })
                  }
                ),
                (0, import_jsx_runtime.jsx)(Box, { marginTop: 2, children: state === STATES.IS_ACTIVE ? section.content : null })
              ] })
            ] }, section.key);
          }) })
        ] }),
        (0, import_jsx_runtime.jsx)(Flex, { justifyContent: "flex-end", children: (0, import_jsx_runtime.jsx)(Button, { variant: "tertiary", onClick: handleSkip, children: formatMessage({ id: "app.components.GuidedTour.skip", defaultMessage: "Skip the tour" }) }) })
      ]
    }
  );
};
var getState = (activeSectionIndex, index) => {
  if (activeSectionIndex === -1) {
    return STATES.IS_DONE;
  }
  if (index < activeSectionIndex) {
    return STATES.IS_DONE;
  }
  if (index > activeSectionIndex) {
    return STATES.IS_NOT_DONE;
  }
  return STATES.IS_ACTIVE;
};
var GuidedTour = () => {
  const guidedTourState = useGuidedTour("HomePage", (state) => state.guidedTourState);
  const isGuidedTourVisible = useGuidedTour("HomePage", (state) => state.isGuidedTourVisible);
  const isSkipped = useGuidedTour("HomePage", (state) => state.isSkipped);
  const showGuidedTour = !Object.values(guidedTourState).every(
    (section) => Object.values(section).every((step) => step)
  ) && isGuidedTourVisible && !isSkipped;
  if (!showGuidedTour) {
    return null;
  }
  return (0, import_jsx_runtime.jsx)(GuidedTourHomepage, {});
};
var HomePageCE = () => {
  const { formatMessage } = useIntl();
  const user = useAuth("HomePageCE", (state) => state.user);
  const displayName = (user == null ? void 0 : user.firstname) ?? (user == null ? void 0 : user.username) ?? (user == null ? void 0 : user.email);
  return (0, import_jsx_runtime.jsxs)(Main, { children: [
    (0, import_jsx_runtime.jsx)(Page.Title, { children: formatMessage({ id: "HomePage.head.title", defaultMessage: "Homepage" }) }),
    (0, import_jsx_runtime.jsx)(
      Layouts.Header,
      {
        title: formatMessage(
          { id: "HomePage.header.title", defaultMessage: "Hello {name}" },
          { name: displayName }
        ),
        subtitle: formatMessage({
          id: "HomePage.header.subtitle",
          defaultMessage: "Welcome to your administration panel"
        })
      }
    ),
    (0, import_jsx_runtime.jsx)(Layouts.Content, { children: (0, import_jsx_runtime.jsxs)(Flex, { direction: "column", alignItems: "stretch", gap: 8, paddingBottom: 10, children: [
      (0, import_jsx_runtime.jsx)(GuidedTour, {}),
      (0, import_jsx_runtime.jsxs)(Grid.Root, { gap: 5, children: [
        (0, import_jsx_runtime.jsx)(Grid.Item, { col: 6, s: 12, children: (0, import_jsx_runtime.jsx)(LastEditedWidget, {}) }),
        (0, import_jsx_runtime.jsx)(Grid.Item, { col: 6, s: 12, children: (0, import_jsx_runtime.jsx)(LastPublishedWidget, {}) })
      ] })
    ] }) })
  ] });
};
var HomePage = () => {
  const Page2 = useEnterprise(
    HomePageCE,
    // eslint-disable-next-line import/no-cycle
    async () => (await import("./HomePage-HuAhOTRQ-MZ2PJZSC.js")).HomePageEE
  );
  if (!Page2) {
    return null;
  }
  return (0, import_jsx_runtime.jsx)(Page2, {});
};

export {
  HomePageCE,
  HomePage
};
//# sourceMappingURL=chunk-DYKWPD6C.js.map
