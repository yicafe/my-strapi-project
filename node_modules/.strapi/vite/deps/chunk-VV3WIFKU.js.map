{
  "version": 3,
  "sources": ["../../../@strapi/review-workflows/admin/src/routes/settings/hooks/useReviewWorkflows.ts", "../../../@strapi/review-workflows/admin/src/routes/settings/constants.ts", "../../../@strapi/review-workflows/admin/src/routes/settings/components/StageDragPreview.tsx", "../../../@strapi/review-workflows/admin/src/routes/settings/components/Layout.tsx"],
  "sourcesContent": ["import * as React from 'react';\n\nimport { useAPIErrorHandler, useNotification } from '@strapi/admin/strapi-admin';\nimport { type MessageDescriptor, useIntl } from 'react-intl';\n\nimport {\n  GetWorkflowsParams,\n  useCreateWorkflowMutation,\n  useDeleteWorkflowMutation,\n  useGetWorkflowsQuery,\n  useUpdateWorkflowMutation,\n} from '../../../services/settings';\n\nimport type { Create, Update } from '../../../../../shared/contracts/review-workflows';\n\nconst DEFAULT_UNEXPECTED_ERROR_MSG = {\n  id: 'notification.error',\n  defaultMessage: 'An error occurred, please try again',\n} satisfies MessageDescriptor;\n\ntype UseReviewWorkflowsArgs = GetWorkflowsParams & {\n  skip?: boolean;\n};\n\nconst useReviewWorkflows = (params: UseReviewWorkflowsArgs = {}) => {\n  const { toggleNotification } = useNotification();\n  const { formatMessage } = useIntl();\n  const { _unstableFormatAPIError: formatAPIError } = useAPIErrorHandler();\n\n  const { skip = false, ...queryParams } = params;\n\n  const { data, isLoading, error } = useGetWorkflowsQuery(\n    {\n      populate: ['stages', 'stageRequiredToPublish'],\n      ...queryParams,\n    },\n    {\n      skip,\n    }\n  );\n\n  React.useEffect(() => {\n    if (error) {\n      toggleNotification({\n        type: 'danger',\n        message: formatAPIError(error),\n      });\n    }\n  }, [error, formatAPIError, toggleNotification]);\n\n  const [createWorkflow] = useCreateWorkflowMutation();\n  const create = React.useCallback(\n    async (data: Create.Request['body']['data']) => {\n      try {\n        const res = await createWorkflow({ data });\n\n        if ('error' in res) {\n          toggleNotification({\n            type: 'danger',\n            message: formatAPIError(res.error),\n          });\n\n          return res;\n        }\n\n        toggleNotification({\n          type: 'success',\n          message: formatMessage({ id: 'actions.created', defaultMessage: 'Created workflow' }),\n        });\n\n        return res;\n      } catch (err) {\n        toggleNotification({\n          type: 'danger',\n          message: formatMessage(DEFAULT_UNEXPECTED_ERROR_MSG),\n        });\n\n        throw err;\n      }\n    },\n    [createWorkflow, formatAPIError, formatMessage, toggleNotification]\n  );\n\n  const [updateWorkflow] = useUpdateWorkflowMutation();\n  const update = React.useCallback(\n    async (id: string, data: Update.Request['body']['data']) => {\n      try {\n        const res = await updateWorkflow({ id, data });\n\n        if ('error' in res) {\n          toggleNotification({\n            type: 'danger',\n            message: formatAPIError(res.error),\n          });\n\n          return res;\n        }\n\n        toggleNotification({\n          type: 'success',\n          message: formatMessage({ id: 'actions.updated', defaultMessage: 'Updated workflow' }),\n        });\n\n        return res;\n      } catch (err) {\n        toggleNotification({\n          type: 'danger',\n          message: formatMessage(DEFAULT_UNEXPECTED_ERROR_MSG),\n        });\n\n        throw err;\n      }\n    },\n    [formatAPIError, formatMessage, toggleNotification, updateWorkflow]\n  );\n\n  const [deleteWorkflow] = useDeleteWorkflowMutation();\n  const deleteAction = React.useCallback(\n    async (id: string) => {\n      try {\n        const res = await deleteWorkflow({ id });\n\n        if ('error' in res) {\n          toggleNotification({\n            type: 'danger',\n            message: formatAPIError(res.error),\n          });\n\n          return;\n        }\n\n        toggleNotification({\n          type: 'success',\n          message: formatMessage({ id: 'actions.deleted', defaultMessage: 'Deleted workflow' }),\n        });\n\n        return res.data;\n      } catch (err) {\n        toggleNotification({\n          type: 'danger',\n          message: formatMessage(DEFAULT_UNEXPECTED_ERROR_MSG),\n        });\n\n        throw err;\n      }\n    },\n    [deleteWorkflow, formatAPIError, formatMessage, toggleNotification]\n  );\n\n  const { workflows = [], meta } = data ?? {};\n\n  return {\n    // meta contains e.g. the total of all workflows. we can not use\n    // the pagination object here, because the list is not paginated.\n    meta,\n    workflows,\n    isLoading,\n    error,\n    create,\n    delete: deleteAction,\n    update,\n  };\n};\n\nexport { useReviewWorkflows };\n", "export type DragDropTypes = 'stage';\n\nexport const DRAG_DROP_TYPES: Record<Uppercase<DragDropTypes>, DragDropTypes> = {\n  STAGE: 'stage',\n};\n", "import { Flex, Typography } from '@strapi/design-system';\nimport { CaretDown } from '@strapi/icons';\n\ninterface StageDragPreviewType {\n  name: string | null;\n}\n\nconst StageDragPreview = ({ name }: StageDragPreviewType) => {\n  return (\n    <Flex\n      background=\"primary100\"\n      borderStyle=\"dashed\"\n      borderColor=\"primary600\"\n      borderWidth=\"1px\"\n      gap={3}\n      hasRadius\n      padding={3}\n      shadow=\"tableShadow\"\n      width=\"30rem\"\n    >\n      <Flex\n        alignItems=\"center\"\n        background=\"neutral200\"\n        borderRadius=\"50%\"\n        height={6}\n        justifyContent=\"center\"\n        width={6}\n      >\n        <CaretDown width=\"0.8rem\" fill=\"neutral600\" />\n      </Flex>\n\n      <Typography fontWeight=\"bold\">{name}</Typography>\n    </Flex>\n  );\n};\n\nexport { StageDragPreview };\nexport type { StageDragPreviewType };\n", "import * as React from 'react';\n\nimport { Page, Layouts } from '@strapi/admin/strapi-admin';\nimport { Box } from '@strapi/design-system';\nimport { XYCoord, useDragLayer } from 'react-dnd';\nimport { useIntl } from 'react-intl';\n\nimport { DRAG_DROP_TYPES } from '../constants';\n\nimport { StageDragPreview } from './StageDragPreview';\n\nfunction getStyle(\n  initialOffset: XYCoord | null,\n  currentOffset: XYCoord | null,\n  mouseOffset: XYCoord | null\n) {\n  if (!initialOffset || !currentOffset || !mouseOffset) {\n    return { display: 'none' };\n  }\n\n  const { x, y } = mouseOffset;\n\n  return {\n    transform: `translate(${x}px, ${y}px)`,\n  };\n}\n\nconst DragLayerRendered = () => {\n  const { itemType, isDragging, item, initialOffset, currentOffset, mouseOffset } = useDragLayer(\n    (monitor) => ({\n      item: monitor.getItem(),\n      itemType: monitor.getItemType(),\n      initialOffset: monitor.getInitialSourceClientOffset(),\n      currentOffset: monitor.getSourceClientOffset(),\n      isDragging: monitor.isDragging(),\n      mouseOffset: monitor.getClientOffset(),\n    })\n  );\n\n  if (!isDragging || itemType !== DRAG_DROP_TYPES.STAGE) {\n    return null;\n  }\n\n  return (\n    <Box\n      height=\"100%\"\n      left={0}\n      position=\"fixed\"\n      pointerEvents=\"none\"\n      top={0}\n      zIndex={100}\n      width=\"100%\"\n    >\n      <Box style={getStyle(initialOffset, currentOffset, mouseOffset)}>\n        <StageDragPreview name={typeof item.item === 'string' ? item.item : null} />;\n      </Box>\n    </Box>\n  );\n};\n\nconst Root: React.FC<React.PropsWithChildren> = ({ children }) => {\n  return (\n    <Page.Main>\n      <Layouts.Content>{children}</Layouts.Content>\n    </Page.Main>\n  );\n};\n\ninterface HeaderProps {\n  title: string;\n  navigationAction?: React.ReactNode;\n  primaryAction?: React.ReactNode;\n  secondaryAction?: React.ReactNode;\n  subtitle?: React.ReactNode;\n}\n\nconst Header: React.FC<HeaderProps> = ({ title, subtitle, navigationAction, primaryAction }) => {\n  const { formatMessage } = useIntl();\n  return (\n    <>\n      <Page.Title>\n        {formatMessage(\n          { id: 'Settings.PageTitle', defaultMessage: 'Settings - {name}' },\n          {\n            name: title,\n          }\n        )}\n      </Page.Title>\n      <Layouts.BaseHeader\n        navigationAction={navigationAction}\n        primaryAction={primaryAction}\n        title={title}\n        subtitle={subtitle}\n      />\n    </>\n  );\n};\n\nexport { DragLayerRendered, Header, Root };\n"],
  "mappings": "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",
  "names": ["data"]
}
