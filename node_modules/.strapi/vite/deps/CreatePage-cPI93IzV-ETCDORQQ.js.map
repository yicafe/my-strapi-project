{
  "version": 3,
  "sources": ["../../../@strapi/admin/admin/src/pages/Settings/pages/Roles/CreatePage.tsx"],
  "sourcesContent": ["import * as React from 'react';\n\nimport {\n  Box,\n  Button,\n  Field,\n  Flex,\n  Grid,\n  Main,\n  Textarea,\n  TextInput,\n  Typography,\n} from '@strapi/design-system';\nimport { Check } from '@strapi/icons';\nimport { format } from 'date-fns';\nimport { Formik, Form, FormikHelpers } from 'formik';\nimport { useIntl } from 'react-intl';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { styled } from 'styled-components';\nimport * as yup from 'yup';\n\nimport { Layouts } from '../../../../components/Layouts/Layout';\nimport { Page } from '../../../../components/PageHelpers';\nimport { useTypedSelector } from '../../../../core/store/hooks';\nimport { BackButton } from '../../../../features/BackButton';\nimport { useNotification } from '../../../../features/Notifications';\nimport { useTracking } from '../../../../features/Tracking';\nimport { useAPIErrorHandler } from '../../../../hooks/useAPIErrorHandler';\nimport {\n  useCreateRoleMutation,\n  useGetRolePermissionLayoutQuery,\n  useGetRolePermissionsQuery,\n  useUpdateRolePermissionsMutation,\n} from '../../../../services/users';\nimport { isBaseQueryError } from '../../../../utils/baseQuery';\nimport { translatedErrors } from '../../../../utils/translatedErrors';\n\nimport { Permissions, PermissionsAPI } from './components/Permissions';\n\n/* -------------------------------------------------------------------------------------------------\n * CreatePage\n * -----------------------------------------------------------------------------------------------*/\n\nconst CREATE_SCHEMA = yup.object().shape({\n  name: yup.string().required(translatedErrors.required.id),\n  description: yup.string().required(translatedErrors.required.id),\n});\n\n/**\n * TODO: be nice if we could just infer this from the schema\n */\ninterface CreateRoleFormValues {\n  name: string;\n  description: string;\n}\n\n/**\n * TODO: this whole section of the app needs refactoring. Using a ref to\n * manage the state of the child is nonsensical.\n */\nconst CreatePage = () => {\n  const { id } = useParams();\n  const { toggleNotification } = useNotification();\n  const { formatMessage } = useIntl();\n  const navigate = useNavigate();\n  const permissionsRef = React.useRef<PermissionsAPI>(null);\n  const { trackUsage } = useTracking();\n  const {\n    _unstableFormatAPIError: formatAPIError,\n    _unstableFormatValidationErrors: formatValidationErrors,\n  } = useAPIErrorHandler();\n\n  const { isLoading: isLoadingPermissionsLayout, currentData: permissionsLayout } =\n    useGetRolePermissionLayoutQuery({\n      /**\n       * Role here is a query param so if there's no role we pass an empty string\n       * which returns us a default layout.\n       */\n      role: id ?? '',\n    });\n\n  /**\n   * We need this so if we're cloning a role, we can fetch\n   * the current permissions that role has.\n   */\n  const { currentData: rolePermissions, isLoading: isLoadingRole } = useGetRolePermissionsQuery(\n    {\n      id: id!,\n    },\n    {\n      skip: !id,\n      refetchOnMountOrArgChange: true,\n    }\n  );\n\n  const [createRole] = useCreateRoleMutation();\n  const [updateRolePermissions] = useUpdateRolePermissionsMutation();\n\n  const handleCreateRoleSubmit = async (\n    data: CreateRoleFormValues,\n    formik: FormikHelpers<CreateRoleFormValues>\n  ) => {\n    try {\n      if (id) {\n        trackUsage('willDuplicateRole');\n      } else {\n        trackUsage('willCreateNewRole');\n      }\n\n      const res = await createRole(data);\n\n      if ('error' in res) {\n        if (isBaseQueryError(res.error) && res.error.name === 'ValidationError') {\n          formik.setErrors(formatValidationErrors(res.error));\n        } else {\n          toggleNotification({\n            type: 'danger',\n            message: formatAPIError(res.error),\n          });\n        }\n\n        return;\n      }\n\n      const { permissionsToSend } = permissionsRef.current?.getPermissions() ?? {};\n\n      if (res.data.id && Array.isArray(permissionsToSend) && permissionsToSend.length > 0) {\n        const updateRes = await updateRolePermissions({\n          id: res.data.id,\n          permissions: permissionsToSend,\n        });\n\n        if ('error' in updateRes) {\n          if (isBaseQueryError(updateRes.error) && updateRes.error.name === 'ValidationError') {\n            formik.setErrors(formatValidationErrors(updateRes.error));\n          } else {\n            toggleNotification({\n              type: 'danger',\n              message: formatAPIError(updateRes.error),\n            });\n          }\n\n          return;\n        }\n      }\n\n      toggleNotification({\n        type: 'success',\n        message: formatMessage({ id: 'Settings.roles.created', defaultMessage: 'created' }),\n      });\n\n      navigate(`../roles/${res.data.id.toString()}`, { replace: true });\n    } catch (err) {\n      toggleNotification({\n        type: 'danger',\n        message: formatMessage({ id: 'notification.error', defaultMessage: 'An error occurred' }),\n      });\n    }\n  };\n\n  if ((isLoadingPermissionsLayout && isLoadingRole) || !permissionsLayout) {\n    return <Page.Loading />;\n  }\n\n  return (\n    <Main>\n      <Page.Title>\n        {formatMessage(\n          { id: 'Settings.PageTitle', defaultMessage: 'Settings - {name}' },\n          {\n            name: 'Roles',\n          }\n        )}\n      </Page.Title>\n      <Formik\n        initialValues={\n          {\n            name: '',\n            description: `${formatMessage({\n              id: 'Settings.roles.form.created',\n              defaultMessage: 'Created',\n            })} ${format(new Date(), 'PPP')}`,\n          } satisfies CreateRoleFormValues\n        }\n        onSubmit={handleCreateRoleSubmit}\n        validationSchema={CREATE_SCHEMA}\n        validateOnChange={false}\n      >\n        {({ values, errors, handleReset, handleChange, isSubmitting }) => (\n          <Form>\n            <>\n              <Layouts.Header\n                primaryAction={\n                  <Flex gap={2}>\n                    <Button\n                      variant=\"secondary\"\n                      onClick={() => {\n                        handleReset();\n                        permissionsRef.current?.resetForm();\n                      }}\n                    >\n                      {formatMessage({\n                        id: 'app.components.Button.reset',\n                        defaultMessage: 'Reset',\n                      })}\n                    </Button>\n                    <Button type=\"submit\" loading={isSubmitting} startIcon={<Check />}>\n                      {formatMessage({\n                        id: 'global.save',\n                        defaultMessage: 'Save',\n                      })}\n                    </Button>\n                  </Flex>\n                }\n                title={formatMessage({\n                  id: 'Settings.roles.create.title',\n                  defaultMessage: 'Create a role',\n                })}\n                subtitle={formatMessage({\n                  id: 'Settings.roles.create.description',\n                  defaultMessage: 'Define the rights given to the role',\n                })}\n                navigationAction={<BackButton fallback=\"../roles\" />}\n              />\n              <Layouts.Content>\n                <Flex direction=\"column\" alignItems=\"stretch\" gap={6}>\n                  <Box background=\"neutral0\" padding={6} shadow=\"filterShadow\" hasRadius>\n                    <Flex direction=\"column\" alignItems=\"stretch\" gap={4}>\n                      <Flex justifyContent=\"space-between\">\n                        <Box>\n                          <Box>\n                            <Typography fontWeight=\"bold\">\n                              {formatMessage({\n                                id: 'global.details',\n                                defaultMessage: 'Details',\n                              })}\n                            </Typography>\n                          </Box>\n                          <Box>\n                            <Typography variant=\"pi\" textColor=\"neutral600\">\n                              {formatMessage({\n                                id: 'Settings.roles.form.description',\n                                defaultMessage: 'Name and description of the role',\n                              })}\n                            </Typography>\n                          </Box>\n                        </Box>\n                        <UsersRoleNumber>\n                          {formatMessage(\n                            {\n                              id: 'Settings.roles.form.button.users-with-role',\n                              defaultMessage:\n                                '{number, plural, =0 {# users} one {# user} other {# users}} with this role',\n                            },\n                            { number: 0 }\n                          )}\n                        </UsersRoleNumber>\n                      </Flex>\n                      <Grid.Root gap={4}>\n                        <Grid.Item col={6} direction=\"column\" alignItems=\"stretch\">\n                          <Field.Root\n                            name=\"name\"\n                            error={errors.name && formatMessage({ id: errors.name })}\n                            required\n                          >\n                            <Field.Label>\n                              {formatMessage({\n                                id: 'global.name',\n                                defaultMessage: 'Name',\n                              })}\n                            </Field.Label>\n                            <TextInput onChange={handleChange} value={values.name} />\n                            <Field.Error />\n                          </Field.Root>\n                        </Grid.Item>\n                        <Grid.Item col={6} direction=\"column\" alignItems=\"stretch\">\n                          <Field.Root\n                            name=\"description\"\n                            error={errors.description && formatMessage({ id: errors.description })}\n                          >\n                            <Field.Label>\n                              {formatMessage({\n                                id: 'global.description',\n                                defaultMessage: 'Description',\n                              })}\n                            </Field.Label>\n                            <Textarea onChange={handleChange} value={values.description} />\n                          </Field.Root>\n                        </Grid.Item>\n                      </Grid.Root>\n                    </Flex>\n                  </Box>\n                  <Box shadow=\"filterShadow\" hasRadius>\n                    <Permissions\n                      isFormDisabled={false}\n                      ref={permissionsRef}\n                      permissions={rolePermissions}\n                      layout={permissionsLayout}\n                    />\n                  </Box>\n                </Flex>\n              </Layouts.Content>\n            </>\n          </Form>\n        )}\n      </Formik>\n    </Main>\n  );\n};\n\nconst UsersRoleNumber = styled.div`\n  border: 1px solid ${({ theme }) => theme.colors.primary200};\n  background: ${({ theme }) => theme.colors.primary100};\n  padding: ${({ theme }) => `${theme.spaces[2]} ${theme.spaces[4]}`};\n  color: ${({ theme }) => theme.colors.primary600};\n  border-radius: ${({ theme }) => theme.borderRadius};\n  font-size: 1.2rem;\n  font-weight: bold;\n`;\n\n/* -------------------------------------------------------------------------------------------------\n * ProtectedCreatePage\n * -----------------------------------------------------------------------------------------------*/\n\nconst ProtectedCreatePage = () => {\n  const permissions = useTypedSelector(\n    (state) => state.admin_app.permissions.settings?.roles.create\n  );\n\n  return (\n    <Page.Protect permissions={permissions}>\n      <CreatePage />\n    </Page.Protect>\n  );\n};\n\nexport { CreatePage, ProtectedCreatePage };\n"],
  "mappings": "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",
  "names": ["create", "translatedErrors"]
}
