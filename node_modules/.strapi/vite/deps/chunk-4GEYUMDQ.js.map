{
  "version": 3,
  "sources": ["../../../@strapi/admin/admin/src/pages/Settings/pages/Webhooks/components/Events.tsx", "../../../@strapi/admin/admin/src/pages/Settings/pages/Webhooks/components/EventsTable.tsx", "../../../@strapi/admin/admin/src/pages/Settings/pages/Webhooks/components/HeadersInput.tsx", "../../../@strapi/admin/admin/src/pages/Settings/pages/Webhooks/components/TriggerContainer.tsx", "../../../@strapi/admin/admin/src/pages/Settings/pages/Webhooks/components/WebhookForm.tsx", "../../../@strapi/admin/admin/src/pages/Settings/pages/Webhooks/EditPage.tsx"],
  "sourcesContent": ["import * as React from 'react';\n\nimport {\n  Checkbox,\n  Flex,\n  RawTable as Table,\n  RawTbody as Tbody,\n  RawTd as Td,\n  RawTh as Th,\n  RawThead as Thead,\n  RawTr as Tr,\n  Typography,\n  VisuallyHidden,\n  Field,\n  CheckboxProps,\n} from '@strapi/design-system';\nimport { MessageDescriptor, useIntl } from 'react-intl';\nimport { styled } from 'styled-components';\n\nimport { useField } from '../../../../../components/Form';\n\n/* -------------------------------------------------------------------------------------------------\n * EventsRoot\n * -----------------------------------------------------------------------------------------------*/\n\ninterface EventsRootProps {\n  children: React.ReactNode;\n}\n\nconst EventsRoot = ({ children }: EventsRootProps) => {\n  const { formatMessage } = useIntl();\n\n  const label = formatMessage({\n    id: 'Settings.webhooks.form.events',\n    defaultMessage: 'Events',\n  });\n\n  return (\n    <Flex direction=\"column\" alignItems=\"stretch\" gap={1}>\n      <Field.Label aria-hidden>{label}</Field.Label>\n      {/* @ts-expect-error â€“ TODO: add colCount & rowCount */}\n      <StyledTable aria-label={label}>{children}</StyledTable>\n    </Flex>\n  );\n};\n\n// TODO check whether we want to move alternating background colour tables to the design system\nconst StyledTable = styled(Table)`\n  tbody tr:nth-child(odd) {\n    background: ${({ theme }) => theme.colors.neutral100};\n  }\n\n  thead th span {\n    color: ${({ theme }) => theme.colors.neutral500};\n  }\n\n  td,\n  th {\n    padding-block-start: ${({ theme }) => theme.spaces[3]};\n    padding-block-end: ${({ theme }) => theme.spaces[3]};\n    width: 6%;\n    vertical-align: middle;\n  }\n\n  tbody tr td:first-child {\n    /**\n     * Add padding to the start of the first column to avoid the checkbox appearing\n     * too close to the edge of the table\n     */\n    padding-inline-start: ${({ theme }) => theme.spaces[2]};\n  }\n`;\n\n/* -------------------------------------------------------------------------------------------------\n * EventsHeaders\n * -----------------------------------------------------------------------------------------------*/\n\ninterface EventsHeadersProps {\n  getHeaders?: typeof getCEHeaders;\n}\n\nconst getCEHeaders = (): MessageDescriptor[] => {\n  const headers = [\n    { id: 'Settings.webhooks.events.create', defaultMessage: 'Create' },\n    { id: 'Settings.webhooks.events.update', defaultMessage: 'Update' },\n    { id: 'app.utils.delete', defaultMessage: 'Delete' },\n    { id: 'app.utils.publish', defaultMessage: 'Publish' },\n    { id: 'app.utils.unpublish', defaultMessage: 'Unpublish' },\n  ];\n\n  return headers;\n};\n\nconst EventsHeaders = ({ getHeaders = getCEHeaders }: EventsHeadersProps) => {\n  const { formatMessage } = useIntl();\n  const headers = getHeaders();\n\n  return (\n    <Thead>\n      <Tr>\n        <Th>\n          <VisuallyHidden>\n            {formatMessage({\n              id: 'Settings.webhooks.event.select',\n              defaultMessage: 'Select event',\n            })}\n          </VisuallyHidden>\n        </Th>\n        {headers.map((header) => {\n          if (['app.utils.publish', 'app.utils.unpublish'].includes(header?.id ?? '')) {\n            return (\n              <Th\n                key={header.id}\n                title={formatMessage({\n                  id: 'Settings.webhooks.event.publish-tooltip',\n                  defaultMessage: 'This event only exists for content with draft & publish enabled',\n                })}\n              >\n                <Typography variant=\"sigma\" textColor=\"neutral600\">\n                  {formatMessage(header)}\n                </Typography>\n              </Th>\n            );\n          }\n\n          return (\n            <Th key={header.id}>\n              <Typography variant=\"sigma\" textColor=\"neutral600\">\n                {formatMessage(header)}\n              </Typography>\n            </Th>\n          );\n        })}\n      </Tr>\n    </Thead>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * EventsBody\n * -----------------------------------------------------------------------------------------------*/\ninterface FormikContextValue {\n  events: string[];\n}\n\ninterface EventsBodyProps {\n  providedEvents?: Record<string, FormikContextValue['events']>;\n}\n\nconst EventsBody = ({ providedEvents }: EventsBodyProps) => {\n  const events = providedEvents || getCEEvents();\n  const { value = [], onChange } = useField<string[]>('events');\n\n  const inputName = 'events';\n  const inputValue = value;\n  const disabledEvents: string[] = [];\n\n  const formattedValue = inputValue.reduce<Record<string, string[]>>((acc, curr) => {\n    const key = curr.split('.')[0];\n\n    if (!acc[key]) {\n      acc[key] = [];\n    }\n    acc[key].push(curr);\n\n    return acc;\n  }, {});\n\n  const handleSelect: EventsRowProps['handleSelect'] = (name, value) => {\n    const set = new Set(inputValue);\n\n    if (value) {\n      set.add(name);\n    } else {\n      set.delete(name);\n    }\n\n    onChange(inputName, Array.from(set));\n  };\n\n  const handleSelectAll: EventsRowProps['handleSelectAll'] = (name, value) => {\n    const set = new Set(inputValue);\n\n    if (value) {\n      events[name].forEach((event) => {\n        if (!disabledEvents.includes(event)) {\n          set.add(event);\n        }\n      });\n    } else {\n      events[name].forEach((event) => set.delete(event));\n    }\n\n    onChange(inputName, Array.from(set));\n  };\n\n  return (\n    <Tbody>\n      {Object.entries(events).map(([event, value]) => {\n        return (\n          <EventsRow\n            disabledEvents={disabledEvents}\n            key={event}\n            name={event}\n            events={value}\n            inputValue={formattedValue[event]}\n            handleSelect={handleSelect}\n            handleSelectAll={handleSelectAll}\n          />\n        );\n      })}\n    </Tbody>\n  );\n};\n\nconst getCEEvents = (): Required<Pick<EventsBodyProps, 'providedEvents'>>['providedEvents'] => {\n  const entryEvents: FormikContextValue['events'] = [\n    'entry.create',\n    'entry.update',\n    'entry.delete',\n    'entry.publish',\n    'entry.unpublish',\n  ];\n\n  return {\n    entry: entryEvents,\n    media: ['media.create', 'media.update', 'media.delete'],\n  };\n};\n\n/* -------------------------------------------------------------------------------------------------\n * EventsRow\n * -----------------------------------------------------------------------------------------------*/\n\ninterface EventsRowProps {\n  disabledEvents?: string[];\n  events?: string[];\n  inputValue?: string[];\n  handleSelect: (name: string, value: boolean) => void;\n  handleSelectAll: (name: string, value: boolean) => void;\n  name: string;\n}\n\nconst EventsRow = ({\n  disabledEvents = [],\n  name,\n  events = [],\n  inputValue = [],\n  handleSelect,\n  handleSelectAll,\n}: EventsRowProps) => {\n  const { formatMessage } = useIntl();\n  const enabledCheckboxes = events.filter((event) => !disabledEvents.includes(event));\n\n  const hasSomeCheckboxSelected = inputValue.length > 0;\n  const areAllCheckboxesSelected = inputValue.length === enabledCheckboxes.length;\n\n  const onChangeAll: CheckboxProps['onCheckedChange'] = () => {\n    const valueToSet = !areAllCheckboxesSelected;\n\n    handleSelectAll(name, valueToSet);\n  };\n\n  const targetColumns = 5;\n\n  return (\n    <Tr>\n      <Td>\n        <Checkbox\n          aria-label={formatMessage({\n            id: 'global.select-all-entries',\n            defaultMessage: 'Select all entries',\n          })}\n          name={name}\n          checked={\n            hasSomeCheckboxSelected && !areAllCheckboxesSelected\n              ? 'indeterminate'\n              : areAllCheckboxesSelected\n          }\n          onCheckedChange={onChangeAll}\n        >\n          {removeHyphensAndTitleCase(name)}\n        </Checkbox>\n      </Td>\n\n      {events.map((event) => {\n        return (\n          <Td key={event} textAlign=\"center\">\n            <Flex width=\"100%\" justifyContent=\"center\">\n              <Checkbox\n                disabled={disabledEvents.includes(event)}\n                aria-label={event}\n                name={event}\n                checked={inputValue.includes(event)}\n                onCheckedChange={(value) => handleSelect(event, !!value)}\n              />\n            </Flex>\n          </Td>\n        );\n      })}\n      {events.length < targetColumns && <Td colSpan={targetColumns - events.length} />}\n    </Tr>\n  );\n};\n\n/**\n * Converts a string to title case and removes hyphens.\n */\nconst removeHyphensAndTitleCase = (str: string): string =>\n  str\n    .replace(/-/g, ' ')\n    .split(' ')\n    .map((word) => word.charAt(0).toUpperCase() + word.slice(1).toLowerCase())\n    .join(' ');\n\nconst Events = { Root: EventsRoot, Headers: EventsHeaders, Body: EventsBody, Row: EventsRow };\n\nexport { Events };\nexport type { EventsRowProps, EventsHeadersProps, EventsRootProps, EventsBodyProps };\n", "import { Events } from './Events';\n\nconst EventTableCE = () => {\n  return (\n    <Events.Root>\n      <Events.Headers />\n      <Events.Body />\n    </Events.Root>\n  );\n};\n\nexport { EventTableCE };\n", "import * as React from 'react';\n\nimport {\n  Box,\n  Flex,\n  Grid,\n  TextButton,\n  ComboboxOption,\n  Combobox,\n  ComboboxProps,\n  IconButton,\n  Field as DSField,\n} from '@strapi/design-system';\nimport { Minus, Plus } from '@strapi/icons';\nimport { useIntl } from 'react-intl';\nimport { styled } from 'styled-components';\n\nimport { useField, useForm } from '../../../../../components/Form';\nimport { StringInput } from '../../../../../components/FormInputs/String';\n\nconst AddHeaderButton = styled(TextButton)`\n  cursor: pointer;\n`;\n\n/* -------------------------------------------------------------------------------------------------\n * HeadersInput\n * -----------------------------------------------------------------------------------------------*/\n\ninterface Header {\n  key: HTTPHeaders;\n  value: string;\n}\n\nconst HeadersInput = () => {\n  const { formatMessage } = useIntl();\n\n  const addFieldRow = useForm('HeadersInput', (state) => state.addFieldRow);\n  const removeFieldRow = useForm('HeadersInput', (state) => state.removeFieldRow);\n  const setFieldValue = useForm('HeadersInput', (state) => state.onChange);\n  const { value = [] } = useField<Header[]>('headers');\n\n  const removeRow = (index: number) => {\n    // if we are removing the last row, simply clear it\n    if (value.length === 1) {\n      setFieldValue('headers', [{ key: '', value: '' }]);\n    } else {\n      removeFieldRow('headers', index);\n    }\n  };\n\n  return (\n    <Flex direction=\"column\" alignItems=\"stretch\" gap={1}>\n      <DSField.Label>\n        {formatMessage({\n          id: 'Settings.webhooks.form.headers',\n          defaultMessage: 'Headers',\n        })}\n      </DSField.Label>\n      <Box padding={8} background=\"neutral100\" hasRadius>\n        {value.map((val, index) => {\n          return (\n            <Grid.Root key={`${index}-${JSON.stringify(val.key)}`} gap={4} padding={2}>\n              <Grid.Item col={6} direction=\"column\" alignItems=\"stretch\">\n                <HeaderCombobox\n                  name={`headers.${index}.key`}\n                  aria-label={`row ${index + 1} key`}\n                  label={formatMessage({\n                    id: 'Settings.webhooks.key',\n                    defaultMessage: 'Key',\n                  })}\n                />\n              </Grid.Item>\n              <Grid.Item col={6} direction=\"column\" alignItems=\"stretch\">\n                <Flex alignItems=\"flex-end\" gap={2}>\n                  <Box style={{ flex: 1 }}>\n                    <StringInput\n                      name={`headers.${index}.value`}\n                      aria-label={`row ${index + 1} value`}\n                      label={formatMessage({\n                        id: 'Settings.webhooks.value',\n                        defaultMessage: 'Value',\n                      })}\n                      type=\"string\"\n                    />\n                  </Box>\n                  <IconButton\n                    width=\"4rem\"\n                    height=\"4rem\"\n                    onClick={() => removeRow(index)}\n                    color=\"primary600\"\n                    label={formatMessage(\n                      {\n                        id: 'Settings.webhooks.headers.remove',\n                        defaultMessage: 'Remove header row {number}',\n                      },\n                      { number: index + 1 }\n                    )}\n                    type=\"button\"\n                  >\n                    <Minus width=\"0.8rem\" />\n                  </IconButton>\n                </Flex>\n              </Grid.Item>\n            </Grid.Root>\n          );\n        })}\n        <Box paddingTop={4}>\n          <AddHeaderButton\n            type=\"button\"\n            onClick={() => {\n              addFieldRow('headers', { key: '', value: '' });\n            }}\n            startIcon={<Plus />}\n          >\n            {formatMessage({\n              id: 'Settings.webhooks.create.header',\n              defaultMessage: 'Create new header',\n            })}\n          </AddHeaderButton>\n        </Box>\n      </Box>\n    </Flex>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * HeaderCombobox\n * -----------------------------------------------------------------------------------------------*/\n\ninterface HeaderComboboxProps extends Omit<ComboboxProps, 'children' | 'name'> {\n  name: string;\n  label: string;\n}\n\nconst HeaderCombobox = ({ name, label, ...restProps }: HeaderComboboxProps) => {\n  const [options, setOptions] = React.useState<HTTPHeaders[]>([...HTTP_HEADERS]);\n  const { value: headers } = useField<Header[]>('headers');\n  const field = useField(name);\n\n  React.useEffect(() => {\n    const headerOptions = HTTP_HEADERS.filter(\n      (key) => !headers?.some((header) => header.key !== field.value && header.key === key)\n    );\n\n    setOptions(headerOptions);\n  }, [headers, field.value]);\n\n  const handleChange: ComboboxProps['onChange'] = (value) => {\n    field.onChange(name, value);\n  };\n\n  const handleCreateOption = (value: string) => {\n    setOptions((prev) => [...prev, value as HTTPHeaders]);\n\n    handleChange(value);\n  };\n\n  return (\n    <DSField.Root name={name} error={field.error}>\n      <DSField.Label>{label}</DSField.Label>\n      <Combobox\n        {...restProps}\n        onClear={() => handleChange('')}\n        onChange={handleChange}\n        onCreateOption={handleCreateOption}\n        placeholder=\"\"\n        creatable\n        value={field.value}\n      >\n        {options.map((key) => (\n          <ComboboxOption value={key} key={key}>\n            {key}\n          </ComboboxOption>\n        ))}\n      </Combobox>\n      <DSField.Error />\n    </DSField.Root>\n  );\n};\n\nconst HTTP_HEADERS = [\n  'A-IM',\n  'Accept',\n  'Accept-Charset',\n  'Accept-Encoding',\n  'Accept-Language',\n  'Accept-Datetime',\n  'Access-Control-Request-Method',\n  'Access-Control-Request-Headers',\n  'Authorization',\n  'Cache-Control',\n  'Connection',\n  'Content-Length',\n  'Content-Type',\n  'Cookie',\n  'Date',\n  'Expect',\n  'Forwarded',\n  'From',\n  'Host',\n  'If-Match',\n  'If-Modified-Since',\n  'If-None-Match',\n  'If-Range',\n  'If-Unmodified-Since',\n  'Max-Forwards',\n  'Origin',\n  'Pragma',\n  'Proxy-Authorization',\n  'Range',\n  'Referer',\n  'TE',\n  'User-Agent',\n  'Upgrade',\n  'Via',\n  'Warning',\n] as const;\n\ntype HTTPHeaders = (typeof HTTP_HEADERS)[number];\n\nexport { HeadersInput };\n", "import { Box, Flex, Grid, Typography } from '@strapi/design-system';\nimport { Check, Cross, Loader } from '@strapi/icons';\nimport { useIntl } from 'react-intl';\n\n/* -------------------------------------------------------------------------------------------------\n * TriggerContainer\n * -----------------------------------------------------------------------------------------------*/\n\ninterface TriggerContainerProps extends Pick<StatusProps, 'isPending'> {\n  onCancel: () => void;\n  response?: {\n    statusCode: number;\n    message?: string;\n  };\n}\n\nconst TriggerContainer = ({ isPending, onCancel, response }: TriggerContainerProps) => {\n  const { statusCode, message } = response ?? {};\n  const { formatMessage } = useIntl();\n\n  return (\n    <Box background=\"neutral0\" padding={5} shadow=\"filterShadow\" hasRadius>\n      <Grid.Root gap={4} style={{ alignItems: 'center' }}>\n        <Grid.Item col={3} direction=\"column\" alignItems=\"stretch\">\n          <Typography>\n            {formatMessage({\n              id: 'Settings.webhooks.trigger.test',\n              defaultMessage: 'Test-trigger',\n            })}\n          </Typography>\n        </Grid.Item>\n        <Grid.Item col={3} direction=\"column\" alignItems=\"stretch\">\n          <Status isPending={isPending} statusCode={statusCode} />\n        </Grid.Item>\n        <Grid.Item col={6} direction=\"column\" alignItems=\"stretch\">\n          {!isPending ? (\n            <Message statusCode={statusCode} message={message} />\n          ) : (\n            <Flex justifyContent=\"flex-end\">\n              <button onClick={onCancel} type=\"button\">\n                <Flex gap={2} alignItems=\"center\">\n                  <Typography textColor=\"neutral400\">\n                    {formatMessage({\n                      id: 'Settings.webhooks.trigger.cancel',\n                      defaultMessage: 'cancel',\n                    })}\n                  </Typography>\n                  <Cross fill=\"neutral400\" height=\"1.2rem\" width=\"1.2rem\" />\n                </Flex>\n              </button>\n            </Flex>\n          )}\n        </Grid.Item>\n      </Grid.Root>\n    </Box>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * Status\n * -----------------------------------------------------------------------------------------------*/\n\ninterface StatusProps {\n  isPending: boolean;\n  statusCode?: number;\n}\n\nconst Status = ({ isPending, statusCode }: StatusProps) => {\n  const { formatMessage } = useIntl();\n\n  if (isPending || !statusCode) {\n    return (\n      <Flex gap={2} alignItems=\"center\">\n        <Loader height=\"1.2rem\" width=\"1.2rem\" />\n        <Typography>\n          {formatMessage({ id: 'Settings.webhooks.trigger.pending', defaultMessage: 'pending' })}\n        </Typography>\n      </Flex>\n    );\n  }\n\n  if (statusCode >= 200 && statusCode < 300) {\n    return (\n      <Flex gap={2} alignItems=\"center\">\n        <Check fill=\"success700\" height=\"1.2rem\" width=\"1.2rem\" />\n        <Typography>\n          {formatMessage({ id: 'Settings.webhooks.trigger.success', defaultMessage: 'success' })}\n        </Typography>\n      </Flex>\n    );\n  }\n\n  if (statusCode >= 300) {\n    return (\n      <Flex gap={2} alignItems=\"center\">\n        <Cross fill=\"danger700\" height=\"1.2rem\" width=\"1.2rem\" />\n        <Typography>\n          {formatMessage({ id: 'Settings.error', defaultMessage: 'error' })} {statusCode}\n        </Typography>\n      </Flex>\n    );\n  }\n\n  return null;\n};\n\n/* -------------------------------------------------------------------------------------------------\n * Message\n * -----------------------------------------------------------------------------------------------*/\n\ninterface MessageProps {\n  statusCode?: number;\n  message?: string;\n}\n\nconst Message = ({ statusCode, message }: MessageProps) => {\n  const { formatMessage } = useIntl();\n\n  if (!statusCode) {\n    return null;\n  }\n\n  if (statusCode >= 200 && statusCode < 300) {\n    return (\n      <Flex justifyContent=\"flex-end\">\n        <Typography textColor=\"neutral600\" ellipsis>\n          {formatMessage({\n            id: 'Settings.webhooks.trigger.success.label',\n            defaultMessage: 'Trigger succeeded',\n          })}\n        </Typography>\n      </Flex>\n    );\n  }\n\n  if (statusCode >= 300) {\n    return (\n      <Flex justifyContent=\"flex-end\">\n        <Flex maxWidth={`25rem`} justifyContent=\"flex-end\" title={message}>\n          <Typography ellipsis textColor=\"neutral600\">\n            {message}\n          </Typography>\n        </Flex>\n      </Flex>\n    );\n  }\n\n  return null;\n};\n\nexport { TriggerContainer };\n", "import * as React from 'react';\n\nimport { Box, Button, Flex, Grid, TextInput } from '@strapi/design-system';\nimport { Check, Play as Publish } from '@strapi/icons';\nimport { IntlShape, useIntl } from 'react-intl';\nimport * as yup from 'yup';\n\nimport { TriggerWebhook } from '../../../../../../../shared/contracts/webhooks';\nimport { Form, FormHelpers } from '../../../../../components/Form';\nimport { InputRenderer } from '../../../../../components/FormInputs/Renderer';\nimport { Layouts } from '../../../../../components/Layouts/Layout';\nimport { BackButton } from '../../../../../features/BackButton';\nimport { useEnterprise } from '../../../../../hooks/useEnterprise';\n\nimport { EventTableCE } from './EventsTable';\nimport { HeadersInput } from './HeadersInput';\nimport { TriggerContainer } from './TriggerContainer';\n\nimport type { Modules } from '@strapi/types';\n\ninterface WebhookFormValues {\n  name: Modules.WebhookStore.Webhook['name'];\n  url: Modules.WebhookStore.Webhook['url'];\n  headers: Array<{ key: string; value: string }>;\n  events: Modules.WebhookStore.Webhook['events'];\n}\n\ninterface WebhookFormProps {\n  data?: Modules.WebhookStore.Webhook;\n  handleSubmit: (\n    values: WebhookFormValues,\n    helpers: FormHelpers<WebhookFormValues>\n  ) => Promise<void>;\n  isCreating: boolean;\n  isTriggering: boolean;\n  triggerWebhook: () => void;\n  triggerResponse?: TriggerWebhook.Response['data'];\n}\n\nconst WebhookForm = ({\n  handleSubmit,\n  triggerWebhook,\n  isCreating,\n  isTriggering,\n  triggerResponse,\n  data,\n}: WebhookFormProps) => {\n  const { formatMessage } = useIntl();\n  const [showTriggerResponse, setShowTriggerResponse] = React.useState(false);\n  const EventTable = useEnterprise(\n    EventTableCE,\n    async () =>\n      (\n        await import(\n          '../../../../../../../ee/admin/src/pages/SettingsPage/pages/Webhooks/components/EventsTable'\n        )\n      ).EventsTableEE\n  );\n\n  /**\n   * Map the headers into a form that can be used within the formik form\n   */\n  const mapHeaders = (headers: Modules.WebhookStore.Webhook['headers']) => {\n    if (!Object.keys(headers).length) {\n      return [{ key: '', value: '' }];\n    }\n\n    return Object.entries(headers).map(([key, value]) => ({ key, value }));\n  };\n\n  // block rendering until the EE component is fully loaded\n  if (!EventTable) {\n    return null;\n  }\n\n  return (\n    <Form\n      initialValues={{\n        name: data?.name || '',\n        url: data?.url || '',\n        headers: mapHeaders(data?.headers || {}),\n        events: data?.events || [],\n      }}\n      method={isCreating ? 'POST' : 'PUT'}\n      onSubmit={handleSubmit}\n      validationSchema={makeWebhookValidationSchema({ formatMessage })}\n    >\n      {({ isSubmitting, modified }) => (\n        <>\n          <Layouts.Header\n            primaryAction={\n              <Flex gap={2}>\n                <Button\n                  onClick={() => {\n                    triggerWebhook();\n                    setShowTriggerResponse(true);\n                  }}\n                  variant=\"tertiary\"\n                  startIcon={<Publish />}\n                  disabled={isCreating || isTriggering}\n                >\n                  {formatMessage({\n                    id: 'Settings.webhooks.trigger',\n                    defaultMessage: 'Trigger',\n                  })}\n                </Button>\n                <Button\n                  startIcon={<Check />}\n                  type=\"submit\"\n                  disabled={!modified}\n                  loading={isSubmitting}\n                >\n                  {formatMessage({\n                    id: 'global.save',\n                    defaultMessage: 'Save',\n                  })}\n                </Button>\n              </Flex>\n            }\n            title={\n              isCreating\n                ? formatMessage({\n                    id: 'Settings.webhooks.create',\n                    defaultMessage: 'Create a webhook',\n                  })\n                : data?.name\n            }\n            navigationAction={<BackButton fallback=\"../webhooks\" />}\n          />\n          <Layouts.Content>\n            <Flex direction=\"column\" alignItems=\"stretch\" gap={4}>\n              {showTriggerResponse && (\n                <TriggerContainer\n                  isPending={isTriggering}\n                  response={triggerResponse}\n                  onCancel={() => setShowTriggerResponse(false)}\n                />\n              )}\n              <Box background=\"neutral0\" padding={8} shadow=\"filterShadow\" hasRadius>\n                <Flex direction=\"column\" alignItems=\"stretch\" gap={6}>\n                  <Grid.Root gap={6}>\n                    {[\n                      {\n                        label: formatMessage({\n                          id: 'global.name',\n                          defaultMessage: 'Name',\n                        }),\n                        name: 'name',\n                        required: true,\n                        size: 6,\n                        type: 'string' as const,\n                      },\n                      {\n                        label: formatMessage({\n                          id: 'Settings.roles.form.input.url',\n                          defaultMessage: 'Url',\n                        }),\n                        name: 'url',\n                        required: true,\n                        size: 12,\n                        type: 'string' as const,\n                      },\n                    ].map(({ size, ...field }) => (\n                      <Grid.Item\n                        key={field.name}\n                        col={size}\n                        direction=\"column\"\n                        alignItems=\"stretch\"\n                      >\n                        <InputRenderer {...field} />\n                      </Grid.Item>\n                    ))}\n                  </Grid.Root>\n                  <HeadersInput />\n                  <EventTable />\n                </Flex>\n              </Box>\n            </Flex>\n          </Layouts.Content>\n        </>\n      )}\n    </Form>\n  );\n};\n\nconst NAME_REGEX = /(^$)|(^[A-Za-z][_0-9A-Za-z ]*$)/;\nconst URL_REGEX = /(^$)|((https?:\\/\\/.*)(d*)\\/?(.*))/;\n\nconst makeWebhookValidationSchema = ({ formatMessage }: Pick<IntlShape, 'formatMessage'>) =>\n  yup.object().shape({\n    name: yup\n      .string()\n      .nullable()\n      .required(\n        formatMessage({\n          id: 'Settings.webhooks.validation.name.required',\n          defaultMessage: 'Name is required',\n        })\n      )\n      .matches(\n        NAME_REGEX,\n        formatMessage({\n          id: 'Settings.webhooks.validation.name.regex',\n          defaultMessage:\n            'The name must start with a letter and only contain letters, numbers, spaces and underscores',\n        })\n      ),\n    url: yup\n      .string()\n      .nullable()\n      .required(\n        formatMessage({\n          id: 'Settings.webhooks.validation.url.required',\n          defaultMessage: 'Url is required',\n        })\n      )\n      .matches(\n        URL_REGEX,\n        formatMessage({\n          id: 'Settings.webhooks.validation.url.regex',\n          defaultMessage: 'The value must be a valid Url',\n        })\n      ),\n    headers: yup.lazy((array) => {\n      const baseSchema = yup.array();\n\n      if (array.length === 1) {\n        const { key, value } = array[0];\n\n        if (!key && !value) {\n          return baseSchema;\n        }\n      }\n\n      return baseSchema.of(\n        yup.object().shape({\n          key: yup\n            .string()\n            .required(\n              formatMessage({\n                id: 'Settings.webhooks.validation.key',\n                defaultMessage: 'Key is required',\n              })\n            )\n            .nullable(),\n          value: yup\n            .string()\n            .required(\n              formatMessage({\n                id: 'Settings.webhooks.validation.value',\n                defaultMessage: 'Value is required',\n              })\n            )\n            .nullable(),\n        })\n      );\n    }),\n    events: yup.array(),\n  });\n\nexport { WebhookForm };\nexport type { WebhookFormValues, WebhookFormProps };\n", "import * as React from 'react';\n\nimport { Main } from '@strapi/design-system';\nimport { Modules } from '@strapi/types';\nimport { useIntl } from 'react-intl';\nimport { useNavigate, useMatch } from 'react-router-dom';\n\nimport { CreateWebhook, TriggerWebhook } from '../../../../../../shared/contracts/webhooks';\nimport { Page } from '../../../../components/PageHelpers';\nimport { useTypedSelector } from '../../../../core/store/hooks';\nimport { useNotification } from '../../../../features/Notifications';\nimport { useAPIErrorHandler } from '../../../../hooks/useAPIErrorHandler';\nimport { selectAdminPermissions } from '../../../../selectors';\nimport { isBaseQueryError } from '../../../../utils/baseQuery';\n\nimport { WebhookForm, WebhookFormProps, WebhookFormValues } from './components/WebhookForm';\nimport { useWebhooks } from './hooks/useWebhooks';\n\n/* -------------------------------------------------------------------------------------------------\n * EditView\n * -----------------------------------------------------------------------------------------------*/\n\nconst cleanData = (\n  data: WebhookFormValues\n): Omit<CreateWebhook.Request['body'], 'id' | 'isEnabled'> => ({\n  ...data,\n  headers: data.headers.reduce<Modules.WebhookStore.Webhook['headers']>((acc, { key, value }) => {\n    if (key !== '') {\n      acc[key] = value;\n    }\n\n    return acc;\n  }, {}),\n});\n\nconst EditPage = () => {\n  const { formatMessage } = useIntl();\n  const match = useMatch('/settings/webhooks/:id');\n  const id = match?.params.id;\n  const isCreating = id === 'create';\n\n  const navigate = useNavigate();\n  const { toggleNotification } = useNotification();\n  const {\n    _unstableFormatAPIError: formatAPIError,\n    _unstableFormatValidationErrors: formatValidationErrors,\n  } = useAPIErrorHandler();\n\n  /**\n   * Prevents the notifications from showing up twice because the function identity\n   * coming from the helper plugin is not stable\n   */\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const stableFormatAPIError = React.useCallback(formatAPIError, []);\n  const [isTriggering, setIsTriggering] = React.useState(false);\n  const [triggerResponse, setTriggerResponse] = React.useState<TriggerWebhook.Response['data']>();\n\n  const { isLoading, webhooks, error, createWebhook, updateWebhook, triggerWebhook } = useWebhooks(\n    { id: id! },\n    {\n      skip: isCreating,\n    }\n  );\n\n  React.useEffect(() => {\n    if (error) {\n      toggleNotification({\n        type: 'danger',\n        message: stableFormatAPIError(error),\n      });\n    }\n  }, [error, toggleNotification, stableFormatAPIError]);\n\n  const handleTriggerWebhook = async () => {\n    try {\n      setIsTriggering(true);\n\n      const res = await triggerWebhook(id!);\n\n      if ('error' in res) {\n        toggleNotification({\n          type: 'danger',\n          message: formatAPIError(res.error),\n        });\n\n        return;\n      }\n\n      setTriggerResponse(res.data);\n    } catch {\n      toggleNotification({\n        type: 'danger',\n        message: formatMessage({\n          id: 'notification.error',\n          defaultMessage: 'An error occurred',\n        }),\n      });\n    } finally {\n      setIsTriggering(false);\n    }\n  };\n\n  const handleSubmit: WebhookFormProps['handleSubmit'] = async (data, helpers) => {\n    try {\n      if (isCreating) {\n        const res = await createWebhook(cleanData(data));\n\n        if ('error' in res) {\n          if (isBaseQueryError(res.error) && res.error.name === 'ValidationError') {\n            helpers.setErrors(formatValidationErrors(res.error));\n          } else {\n            toggleNotification({\n              type: 'danger',\n              message: formatAPIError(res.error),\n            });\n          }\n\n          return;\n        }\n\n        toggleNotification({\n          type: 'success',\n          message: formatMessage({ id: 'Settings.webhooks.created' }),\n        });\n\n        navigate(`../webhooks/${res.data.id}`, { replace: true });\n      } else {\n        const res = await updateWebhook({ id: id!, ...cleanData(data) });\n\n        if ('error' in res) {\n          if (isBaseQueryError(res.error) && res.error.name === 'ValidationError') {\n            helpers.setErrors(formatValidationErrors(res.error));\n          } else {\n            toggleNotification({\n              type: 'danger',\n              message: formatAPIError(res.error),\n            });\n          }\n\n          return;\n        }\n\n        toggleNotification({\n          type: 'success',\n          message: formatMessage({ id: 'notification.form.success.fields' }),\n        });\n      }\n    } catch {\n      toggleNotification({\n        type: 'danger',\n        message: formatMessage({\n          id: 'notification.error',\n          defaultMessage: 'An error occurred',\n        }),\n      });\n    }\n  };\n\n  if (isLoading) {\n    return <Page.Loading />;\n  }\n\n  const [webhook] = webhooks ?? [];\n\n  return (\n    <Main>\n      <Page.Title>\n        {formatMessage(\n          { id: 'Settings.PageTitle', defaultMessage: 'Settings - {name}' },\n          {\n            name: 'Webhooks',\n          }\n        )}\n      </Page.Title>\n      <WebhookForm\n        data={webhook}\n        handleSubmit={handleSubmit}\n        triggerWebhook={handleTriggerWebhook}\n        isCreating={isCreating}\n        isTriggering={isTriggering}\n        triggerResponse={triggerResponse}\n      />\n    </Main>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * ProtectedEditView\n * -----------------------------------------------------------------------------------------------*/\n\nconst ProtectedEditPage = () => {\n  const permissions = useTypedSelector(selectAdminPermissions);\n\n  return (\n    <Page.Protect permissions={permissions.settings?.webhooks.update}>\n      <EditPage />\n    </Page.Protect>\n  );\n};\n\nexport { ProtectedEditPage, EditPage };\n"],
  "mappings": "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",
  "names": ["Table", "Thead", "Tr", "Th", "value", "Tbody", "Td", "DSField", "StringInput", "Publish", "InputRenderer", "create"]
}
