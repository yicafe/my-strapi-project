{
  "version": 3,
  "sources": ["../../../@strapi/admin/admin/src/pages/Settings/components/Tokens/Table.tsx"],
  "sourcesContent": ["import * as React from 'react';\n\nimport {\n  Box,\n  Flex,\n  IconButton,\n  Typography,\n  useCollator,\n  Dialog,\n  LinkButton,\n} from '@strapi/design-system';\nimport { Pencil, Trash } from '@strapi/icons';\nimport { useIntl } from 'react-intl';\nimport { NavLink, useNavigate } from 'react-router-dom';\nimport { styled } from 'styled-components';\n\nimport { ApiToken } from '../../../../../../shared/contracts/api-token';\nimport { SanitizedTransferToken } from '../../../../../../shared/contracts/transfer';\nimport { ConfirmDialog } from '../../../../components/ConfirmDialog';\nimport { RelativeTime } from '../../../../components/RelativeTime';\nimport { Table as TableImpl } from '../../../../components/Table';\nimport { useTracking } from '../../../../features/Tracking';\nimport { useQueryParams } from '../../../../hooks/useQueryParams';\n\nimport type { Data } from '@strapi/types';\n\n/* -------------------------------------------------------------------------------------------------\n * Table\n * -----------------------------------------------------------------------------------------------*/\n\ninterface TableProps\n  extends Pick<TableImpl.Props<SanitizedTransferToken | ApiToken>, 'headers' | 'isLoading'> {\n  onConfirmDelete: (id: Data.ID) => void;\n  permissions: {\n    canRead: boolean;\n    canDelete: boolean;\n    canUpdate: boolean;\n  };\n  tokens: SanitizedTransferToken[] | ApiToken[];\n  tokenType: 'api-token' | 'transfer-token';\n}\n\nconst Table = ({\n  permissions,\n  headers = [],\n  isLoading = false,\n  tokens = [],\n  onConfirmDelete,\n  tokenType,\n}: TableProps) => {\n  const [{ query }] = useQueryParams<{ sort?: string }>();\n  const { formatMessage, locale } = useIntl();\n  const [, sortOrder] = query && query.sort ? query.sort.split(':') : [undefined, 'ASC'];\n  const navigate = useNavigate();\n  const { trackUsage } = useTracking();\n  const formatter = useCollator(locale);\n\n  const sortedTokens = [...tokens].sort((a, b) => {\n    return sortOrder === 'DESC'\n      ? formatter.compare(b.name, a.name)\n      : formatter.compare(a.name, b.name);\n  });\n\n  const { canDelete, canUpdate, canRead } = permissions;\n\n  const handleRowClick = (id: Data.ID) => () => {\n    if (canRead) {\n      trackUsage('willEditTokenFromList', {\n        tokenType,\n      });\n      navigate(id.toString());\n    }\n  };\n\n  return (\n    <TableImpl.Root headers={headers} rows={sortedTokens} isLoading={isLoading}>\n      <TableImpl.Content>\n        <TableImpl.Head>\n          {headers.map((header) => (\n            <TableImpl.HeaderCell key={header.name} {...header} />\n          ))}\n        </TableImpl.Head>\n        <TableImpl.Empty />\n        <TableImpl.Loading />\n        <TableImpl.Body>\n          {sortedTokens.map((token) => (\n            <TableImpl.Row key={token.id} onClick={handleRowClick(token.id)}>\n              <TableImpl.Cell maxWidth=\"25rem\">\n                <Typography textColor=\"neutral800\" fontWeight=\"bold\" ellipsis>\n                  {token.name}\n                </Typography>\n              </TableImpl.Cell>\n              <TableImpl.Cell maxWidth=\"25rem\">\n                <Typography textColor=\"neutral800\" ellipsis>\n                  {token.description}\n                </Typography>\n              </TableImpl.Cell>\n              <TableImpl.Cell>\n                <Typography textColor=\"neutral800\">\n                  {/* @ts-expect-error One of the tokens doesn't have createdAt */}\n                  <RelativeTime timestamp={new Date(token.createdAt)} />\n                </Typography>\n              </TableImpl.Cell>\n              <TableImpl.Cell>\n                {token.lastUsedAt && (\n                  <Typography textColor=\"neutral800\">\n                    <RelativeTime\n                      timestamp={new Date(token.lastUsedAt)}\n                      customIntervals={[\n                        {\n                          unit: 'hours',\n                          threshold: 1,\n                          text: formatMessage({\n                            id: 'Settings.apiTokens.lastHour',\n                            defaultMessage: 'last hour',\n                          }),\n                        },\n                      ]}\n                    />\n                  </Typography>\n                )}\n              </TableImpl.Cell>\n              {canUpdate || canRead || canDelete ? (\n                <TableImpl.Cell>\n                  <Flex justifyContent=\"end\">\n                    {canUpdate && <UpdateButton tokenName={token.name} tokenId={token.id} />}\n                    {canDelete && (\n                      <DeleteButton\n                        tokenName={token.name}\n                        onClickDelete={() => onConfirmDelete?.(token.id)}\n                        tokenType={tokenType}\n                      />\n                    )}\n                  </Flex>\n                </TableImpl.Cell>\n              ) : null}\n            </TableImpl.Row>\n          ))}\n        </TableImpl.Body>\n      </TableImpl.Content>\n    </TableImpl.Root>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * CRUD Buttons\n * -----------------------------------------------------------------------------------------------*/\n\nconst MESSAGES_MAP = {\n  edit: {\n    id: 'app.component.table.edit',\n    defaultMessage: 'Edit {target}',\n  },\n  read: {\n    id: 'app.component.table.read',\n    defaultMessage: 'Read {target}',\n  },\n};\n\ninterface DefaultButtonProps {\n  tokenName: string;\n  tokenId: Data.ID;\n  buttonType?: 'edit' | 'read';\n  children: React.ReactNode;\n}\n\nconst DefaultButton = ({\n  tokenName,\n  tokenId,\n  buttonType = 'edit',\n  children,\n}: DefaultButtonProps) => {\n  const { formatMessage } = useIntl();\n\n  return (\n    <LinkButtonStyled\n      tag={NavLink}\n      to={tokenId.toString()}\n      onClick={(e: React.MouseEvent) => e.stopPropagation()}\n      title={formatMessage(MESSAGES_MAP[buttonType], { target: tokenName })}\n      variant=\"ghost\"\n      size=\"S\"\n    >\n      {children}\n    </LinkButtonStyled>\n  );\n};\n\nconst LinkButtonStyled = styled(LinkButton)`\n  padding: 0.7rem;\n\n  & > span {\n    display: flex;\n  }\n`;\n\ninterface DeleteButtonProps extends Pick<ButtonProps, 'tokenName'>, Pick<TableProps, 'tokenType'> {\n  onClickDelete: () => void;\n}\n\nconst DeleteButton = ({ tokenName, onClickDelete, tokenType }: DeleteButtonProps) => {\n  const { formatMessage } = useIntl();\n  const { trackUsage } = useTracking();\n  const handleClickDelete = () => {\n    trackUsage('willDeleteToken', {\n      tokenType,\n    });\n    onClickDelete();\n  };\n\n  return (\n    <Dialog.Root>\n      <Box<'div'> paddingLeft={1} onClick={(e) => e.stopPropagation()}>\n        <Dialog.Trigger>\n          <IconButton\n            label={formatMessage(\n              {\n                id: 'global.delete-target',\n                defaultMessage: 'Delete {target}',\n              },\n              { target: `${tokenName}` }\n            )}\n            name=\"delete\"\n            variant=\"ghost\"\n          >\n            <Trash />\n          </IconButton>\n        </Dialog.Trigger>\n        <ConfirmDialog onConfirm={handleClickDelete} />\n      </Box>\n    </Dialog.Root>\n  );\n};\n\ninterface ButtonProps {\n  tokenName: string;\n  tokenId: Data.ID;\n}\n\nconst UpdateButton = ({ tokenName, tokenId }: ButtonProps) => {\n  return (\n    <DefaultButton tokenName={tokenName} tokenId={tokenId}>\n      <Pencil />\n    </DefaultButton>\n  );\n};\n\nexport { Table };\nexport type { TableProps };\n"],
  "mappings": "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",
  "names": ["Table", "TableImpl"]
}
