{
  "version": 3,
  "sources": ["../../../@strapi/admin/admin/src/pages/Settings/pages/Users/components/CreateActionCE.tsx", "../../../@strapi/admin/admin/src/pages/Settings/pages/Users/components/NewUserForm.tsx", "../../../@strapi/admin/admin/src/pages/Settings/pages/Users/ListPage.tsx"],
  "sourcesContent": ["import * as React from 'react';\n\nimport { Button, ButtonProps } from '@strapi/design-system';\nimport { Mail } from '@strapi/icons';\nimport { useIntl } from 'react-intl';\n\ninterface CreateActionCEProps extends Pick<ButtonProps, 'onClick'> {}\n\nconst CreateActionCE = React.forwardRef<HTMLButtonElement, CreateActionCEProps>((props, ref) => {\n  const { formatMessage } = useIntl();\n\n  return (\n    <Button ref={ref} startIcon={<Mail />} size=\"S\" {...props}>\n      {formatMessage({\n        id: 'Settings.permissions.users.create',\n        defaultMessage: 'Invite new user',\n      })}\n    </Button>\n  );\n});\n\nexport { CreateActionCE };\nexport type { CreateActionCEProps };\n", "import * as React from 'react';\n\nimport {\n  Box,\n  Button,\n  Flex,\n  Grid,\n  Modal,\n  Typography,\n  Breadcrumbs,\n  Crumb,\n} from '@strapi/design-system';\nimport { useIntl } from 'react-intl';\nimport * as yup from 'yup';\n\nimport { Form, type FormHelpers } from '../../../../../components/Form';\nimport { InputRenderer } from '../../../../../components/FormInputs/Renderer';\nimport { useNotification } from '../../../../../features/Notifications';\nimport { useAPIErrorHandler } from '../../../../../hooks/useAPIErrorHandler';\nimport { useEnterprise } from '../../../../../hooks/useEnterprise';\nimport { useCreateUserMutation } from '../../../../../services/users';\nimport { FormLayoutInputProps } from '../../../../../types/forms';\nimport { isBaseQueryError } from '../../../../../utils/baseQuery';\nimport { translatedErrors } from '../../../../../utils/translatedErrors';\n\nimport { MagicLinkCE } from './MagicLinkCE';\nimport { SelectRoles } from './SelectRoles';\n\nimport type { Data } from '@strapi/types';\n\ninterface ModalFormProps {\n  onToggle: () => void;\n}\n\ntype FormLayout = FormLayoutInputProps[][];\n\nconst ModalForm = ({ onToggle }: ModalFormProps) => {\n  const [currentStep, setStep] = React.useState<keyof typeof STEPPER>('create');\n  const [registrationToken, setRegistrationToken] = React.useState('');\n  const { formatMessage } = useIntl();\n  const { toggleNotification } = useNotification();\n  const {\n    _unstableFormatAPIError: formatAPIError,\n    _unstableFormatValidationErrors: formatValidationErrors,\n  } = useAPIErrorHandler();\n  const roleLayout = useEnterprise<FormLayout, FormLayout, FormLayout>(\n    ROLE_LAYOUT,\n    async () =>\n      (\n        await import(\n          '../../../../../../../ee/admin/src/pages/SettingsPage/pages/Users/components/ModalForm'\n        )\n      ).ROLE_LAYOUT,\n    {\n      combine(ceRoles, eeRoles) {\n        return [...ceRoles, ...eeRoles];\n      },\n\n      defaultValue: [],\n    }\n  );\n\n  const initialValues = useEnterprise<InitialData>(\n    FORM_INITIAL_VALUES,\n    async () =>\n      (\n        await import(\n          '../../../../../../../ee/admin/src/pages/SettingsPage/pages/Users/components/ModalForm'\n        )\n      ).FORM_INITIAL_VALUES,\n    {\n      combine(ceValues, eeValues) {\n        return {\n          ...ceValues,\n          ...eeValues,\n        };\n      },\n\n      defaultValue: FORM_INITIAL_VALUES,\n    }\n  );\n  const MagicLink = useEnterprise(\n    MagicLinkCE,\n    async () =>\n      (\n        await import(\n          '../../../../../../../ee/admin/src/pages/SettingsPage/pages/Users/components/MagicLinkEE'\n        )\n      ).MagicLinkEE\n  );\n\n  const [createUser] = useCreateUserMutation();\n\n  const headerTitle = formatMessage({\n    id: 'Settings.permissions.users.create',\n    defaultMessage: 'Invite new user',\n  });\n\n  const handleSubmit = async (body: InitialData, { setErrors }: FormHelpers<InitialData>) => {\n    const res = await createUser({\n      ...body,\n      roles: body.roles ?? [],\n    });\n\n    if ('data' in res) {\n      // NOTE: when enabling SSO, the user doesn't have to register and the token is undefined\n      if (res.data.registrationToken) {\n        setRegistrationToken(res.data.registrationToken);\n      }\n\n      goNext();\n    } else {\n      toggleNotification({\n        type: 'danger',\n        message: formatAPIError(res.error),\n      });\n\n      if (isBaseQueryError(res.error) && res.error.name === 'ValidationError') {\n        setErrors(formatValidationErrors(res.error));\n      }\n    }\n  };\n\n  const goNext = () => {\n    if (next) {\n      setStep(next);\n    } else {\n      onToggle();\n    }\n  };\n\n  const { buttonSubmitLabel, isDisabled, next } = STEPPER[currentStep];\n\n  // block rendering until the EE component is fully loaded\n  if (!MagicLink) {\n    return null;\n  }\n\n  return (\n    <Modal.Root defaultOpen onOpenChange={onToggle}>\n      <Modal.Content>\n        <Modal.Header>\n          {/**\n           * TODO: this is not semantically correct and should be amended.\n           */}\n          <Breadcrumbs label={headerTitle}>\n            <Crumb isCurrent>{headerTitle}</Crumb>\n          </Breadcrumbs>\n        </Modal.Header>\n        <Form\n          method={currentStep === 'create' ? 'POST' : 'PUT'}\n          initialValues={initialValues ?? {}}\n          onSubmit={handleSubmit}\n          validationSchema={FORM_SCHEMA}\n        >\n          {({ isSubmitting }) => {\n            return (\n              <>\n                <Modal.Body>\n                  <Flex direction=\"column\" alignItems=\"stretch\" gap={6}>\n                    {currentStep !== 'create' && (\n                      <MagicLink registrationToken={registrationToken} />\n                    )}\n                    <Box>\n                      <Typography variant=\"beta\" tag=\"h2\">\n                        {formatMessage({\n                          id: 'app.components.Users.ModalCreateBody.block-title.details',\n                          defaultMessage: 'User details',\n                        })}\n                      </Typography>\n                      <Box paddingTop={4}>\n                        <Flex direction=\"column\" alignItems=\"stretch\" gap={1}>\n                          <Grid.Root gap={5}>\n                            {FORM_LAYOUT.map((row) => {\n                              return row.map(({ size, ...field }) => {\n                                return (\n                                  <Grid.Item\n                                    key={field.name}\n                                    col={size}\n                                    direction=\"column\"\n                                    alignItems=\"stretch\"\n                                  >\n                                    <InputRenderer\n                                      {...field}\n                                      disabled={isDisabled}\n                                      label={formatMessage(field.label)}\n                                      placeholder={formatMessage(field.placeholder)}\n                                    />\n                                  </Grid.Item>\n                                );\n                              });\n                            })}\n                          </Grid.Root>\n                        </Flex>\n                      </Box>\n                    </Box>\n                    <Box>\n                      <Typography variant=\"beta\" tag=\"h2\">\n                        {formatMessage({\n                          id: 'global.roles',\n                          defaultMessage: \"User's role\",\n                        })}\n                      </Typography>\n                      <Box paddingTop={4}>\n                        <Grid.Root gap={5}>\n                          <Grid.Item col={6} xs={12} direction=\"column\" alignItems=\"stretch\">\n                            <SelectRoles disabled={isDisabled} />\n                          </Grid.Item>\n                          {roleLayout.map((row) => {\n                            return row.map(({ size, ...field }) => {\n                              return (\n                                <Grid.Item\n                                  key={field.name}\n                                  col={size}\n                                  direction=\"column\"\n                                  alignItems=\"stretch\"\n                                >\n                                  <InputRenderer\n                                    {...field}\n                                    disabled={isDisabled}\n                                    label={formatMessage(field.label)}\n                                    placeholder={\n                                      field.placeholder\n                                        ? formatMessage(field.placeholder)\n                                        : undefined\n                                    }\n                                    hint={field.hint ? formatMessage(field.hint) : undefined}\n                                  />\n                                </Grid.Item>\n                              );\n                            });\n                          })}\n                        </Grid.Root>\n                      </Box>\n                    </Box>\n                  </Flex>\n                </Modal.Body>\n                <Modal.Footer>\n                  <Button variant=\"tertiary\" onClick={onToggle} type=\"button\">\n                    {formatMessage({\n                      id: 'app.components.Button.cancel',\n                      defaultMessage: 'Cancel',\n                    })}\n                  </Button>\n                  {currentStep === 'create' ? (\n                    <Button type=\"submit\" loading={isSubmitting}>\n                      {formatMessage(buttonSubmitLabel)}\n                    </Button>\n                  ) : (\n                    <Button type=\"button\" loading={isSubmitting} onClick={onToggle}>\n                      {formatMessage(buttonSubmitLabel)}\n                    </Button>\n                  )}\n                </Modal.Footer>\n              </>\n            );\n          }}\n        </Form>\n      </Modal.Content>\n    </Modal.Root>\n  );\n};\n\ninterface InitialData {\n  firstname?: string;\n  lastname?: string;\n  email?: string;\n  roles?: Data.ID[];\n  useSSORegistration?: boolean;\n}\n\nconst FORM_INITIAL_VALUES = {\n  firstname: '',\n  lastname: '',\n  email: '',\n  roles: [],\n};\n\nconst ROLE_LAYOUT: FormLayout = [];\n\nconst FORM_LAYOUT = [\n  [\n    {\n      label: {\n        id: 'Auth.form.firstname.label',\n        defaultMessage: 'First name',\n      },\n      name: 'firstname',\n      placeholder: {\n        id: 'Auth.form.firstname.placeholder',\n        defaultMessage: 'e.g. Kai',\n      },\n      type: 'string' as const,\n      size: 6,\n      required: true,\n    },\n    {\n      label: {\n        id: 'Auth.form.lastname.label',\n        defaultMessage: 'Last name',\n      },\n      name: 'lastname',\n      placeholder: {\n        id: 'Auth.form.lastname.placeholder',\n        defaultMessage: 'e.g. Doe',\n      },\n      type: 'string' as const,\n      size: 6,\n    },\n  ],\n  [\n    {\n      label: {\n        id: 'Auth.form.email.label',\n        defaultMessage: 'Email',\n      },\n      name: 'email',\n      placeholder: {\n        id: 'Auth.form.email.placeholder',\n        defaultMessage: 'e.g. kai.doe@strapi.io',\n      },\n      type: 'email' as const,\n      size: 6,\n      required: true,\n    },\n  ],\n] satisfies FormLayout;\n\nconst FORM_SCHEMA = yup.object().shape({\n  firstname: yup\n    .string()\n    .trim()\n    .required({\n      id: translatedErrors.required.id,\n      defaultMessage: 'This field is required',\n    })\n    .nullable(),\n  lastname: yup.string(),\n  email: yup\n    .string()\n    .email(translatedErrors.email)\n    .required({\n      id: translatedErrors.required.id,\n      defaultMessage: 'This field is required',\n    })\n    .nullable(),\n  roles: yup\n    .array()\n    .min(1, {\n      id: translatedErrors.required.id,\n      defaultMessage: 'This field is required',\n    })\n    .required({\n      id: translatedErrors.required.id,\n      defaultMessage: 'This field is required',\n    }),\n});\n\nconst STEPPER = {\n  create: {\n    buttonSubmitLabel: {\n      id: 'app.containers.Users.ModalForm.footer.button-success',\n      defaultMessage: 'Invite user',\n    },\n    isDisabled: false,\n    next: 'magic-link',\n  },\n  'magic-link': {\n    buttonSubmitLabel: { id: 'global.finish', defaultMessage: 'Finish' },\n    isDisabled: true,\n    next: null,\n  },\n} as const;\n\nexport { ModalForm };\nexport type { InitialData };\n", "import * as React from 'react';\n\nimport { Flex, Typography, Status, IconButton, Dialog } from '@strapi/design-system';\nimport { Pencil, Trash } from '@strapi/icons';\nimport * as qs from 'qs';\nimport { MessageDescriptor, useIntl } from 'react-intl';\nimport { NavLink, useLocation, useNavigate } from 'react-router-dom';\n\nimport { SanitizedAdminUser } from '../../../../../../shared/contracts/shared';\nimport { ConfirmDialog } from '../../../../components/ConfirmDialog';\nimport { Filters } from '../../../../components/Filters';\nimport { Layouts } from '../../../../components/Layouts/Layout';\nimport { Page } from '../../../../components/PageHelpers';\nimport { Pagination } from '../../../../components/Pagination';\nimport { SearchInput } from '../../../../components/SearchInput';\nimport { Table } from '../../../../components/Table';\nimport { useTypedSelector } from '../../../../core/store/hooks';\nimport { useNotification } from '../../../../features/Notifications';\nimport { useAPIErrorHandler } from '../../../../hooks/useAPIErrorHandler';\nimport { useEnterprise } from '../../../../hooks/useEnterprise';\nimport { useRBAC } from '../../../../hooks/useRBAC';\nimport { useAdminUsers, useDeleteManyUsersMutation } from '../../../../services/users';\nimport { getDisplayName } from '../../../../utils/users';\n\nimport { CreateActionCE } from './components/CreateActionCE';\nimport { ModalForm } from './components/NewUserForm';\n\n/* -------------------------------------------------------------------------------------------------\n * ListPageCE\n * -----------------------------------------------------------------------------------------------*/\n\nconst ListPageCE = () => {\n  const { _unstableFormatAPIError: formatAPIError } = useAPIErrorHandler();\n  const [isModalOpened, setIsModalOpen] = React.useState(false);\n  const permissions = useTypedSelector((state) => state.admin_app.permissions);\n  const {\n    allowedActions: { canCreate, canDelete, canRead },\n  } = useRBAC(permissions.settings?.users);\n  const navigate = useNavigate();\n  const { toggleNotification } = useNotification();\n  const { formatMessage } = useIntl();\n  const { search } = useLocation();\n  const [showDeleteConfirmation, setShowDeleteConfirmation] = React.useState(false);\n  const [idsToDelete, setIdsToDelete] = React.useState<Array<SanitizedAdminUser['id']>>([]);\n  const { data, isError, isLoading } = useAdminUsers(qs.parse(search, { ignoreQueryPrefix: true }));\n\n  const { pagination, users = [] } = data ?? {};\n\n  const CreateAction = useEnterprise(\n    CreateActionCE,\n    async () =>\n      (\n        await import(\n          '../../../../../../ee/admin/src/pages/SettingsPage/pages/Users/components/CreateActionEE'\n        )\n      ).CreateActionEE\n  );\n\n  const headers = TABLE_HEADERS.map((header) => ({\n    ...header,\n    label: formatMessage(header.label),\n  }));\n\n  const title = formatMessage({\n    id: 'global.users',\n    defaultMessage: 'Users',\n  });\n\n  const handleToggle = () => {\n    setIsModalOpen((prev) => !prev);\n  };\n\n  const [deleteAll] = useDeleteManyUsersMutation();\n  const handleDeleteAll = async (ids: Array<SanitizedAdminUser['id']>) => {\n    try {\n      const res = await deleteAll({ ids });\n\n      if ('error' in res) {\n        toggleNotification({\n          type: 'danger',\n          message: formatAPIError(res.error),\n        });\n      }\n    } catch (err) {\n      toggleNotification({\n        type: 'danger',\n        message: formatMessage({\n          id: 'global.error',\n          defaultMessage: 'An error occurred',\n        }),\n      });\n    }\n  };\n\n  const handleRowClick = (id: SanitizedAdminUser['id']) => () => {\n    if (canRead) {\n      navigate(id.toString());\n    }\n  };\n\n  const handleDeleteClick = (id: SanitizedAdminUser['id']) => async () => {\n    setIdsToDelete([id]);\n    setShowDeleteConfirmation(true);\n  };\n\n  const confirmDelete = async () => {\n    await handleDeleteAll(idsToDelete);\n    setShowDeleteConfirmation(false);\n  };\n\n  // block rendering until the EE component is fully loaded\n  if (!CreateAction) {\n    return null;\n  }\n\n  if (isError) {\n    return <Page.Error />;\n  }\n\n  return (\n    <Page.Main aria-busy={isLoading}>\n      <Page.Title>\n        {formatMessage(\n          { id: 'Settings.PageTitle', defaultMessage: 'Settings - {name}' },\n          {\n            name: 'Users',\n          }\n        )}\n      </Page.Title>\n      <Layouts.Header\n        primaryAction={canCreate && <CreateAction onClick={handleToggle} />}\n        title={title}\n        subtitle={formatMessage({\n          id: 'Settings.permissions.users.listview.header.subtitle',\n          defaultMessage: 'All the users who have access to the Strapi admin panel',\n        })}\n      />\n      <Layouts.Action\n        startActions={\n          <>\n            <SearchInput\n              label={formatMessage(\n                { id: 'app.component.search.label', defaultMessage: 'Search for {target}' },\n                { target: title }\n              )}\n            />\n            <Filters.Root options={FILTERS}>\n              <Filters.Trigger />\n              <Filters.Popover />\n              <Filters.List />\n            </Filters.Root>\n          </>\n        }\n      />\n      <Layouts.Content>\n        <Table.Root rows={users} headers={headers}>\n          <Table.ActionBar />\n          <Table.Content>\n            <Table.Head>\n              {canDelete ? <Table.HeaderCheckboxCell /> : null}\n              {headers.map((header) => (\n                <Table.HeaderCell key={header.name} {...header} />\n              ))}\n            </Table.Head>\n            <Table.Empty />\n            <Table.Loading />\n            <Table.Body>\n              {users.map((user) => (\n                <Table.Row\n                  key={user.id}\n                  onClick={handleRowClick(user.id)}\n                  cursor={canRead ? 'pointer' : 'default'}\n                >\n                  {canDelete ? <Table.CheckboxCell id={user.id} /> : null}\n                  {headers.map(({ cellFormatter, name, ...rest }) => {\n                    return (\n                      <Table.Cell key={name}>\n                        {typeof cellFormatter === 'function' ? (\n                          cellFormatter(user, { name, ...rest })\n                        ) : (\n                          // @ts-expect-error – name === \"roles\" has the data value of `AdminRole[]` but the header has a cellFormatter value so this shouldn't be called.\n                          <Typography textColor=\"neutral800\">{user[name] || '-'}</Typography>\n                        )}\n                      </Table.Cell>\n                    );\n                  })}\n                  {canRead || canDelete ? (\n                    <Table.Cell onClick={(e) => e.stopPropagation()}>\n                      <Flex justifyContent=\"end\">\n                        {canRead ? (\n                          <IconButton\n                            tag={NavLink}\n                            to={user.id.toString()}\n                            label={formatMessage(\n                              { id: 'app.component.table.edit', defaultMessage: 'Edit {target}' },\n                              { target: getDisplayName(user) }\n                            )}\n                            variant=\"ghost\"\n                          >\n                            <Pencil />\n                          </IconButton>\n                        ) : null}\n                        {canDelete ? (\n                          <IconButton\n                            onClick={handleDeleteClick(user.id)}\n                            label={formatMessage(\n                              { id: 'global.delete-target', defaultMessage: 'Delete {target}' },\n                              { target: getDisplayName(user) }\n                            )}\n                            variant=\"ghost\"\n                          >\n                            <Trash />\n                          </IconButton>\n                        ) : null}\n                      </Flex>\n                    </Table.Cell>\n                  ) : null}\n                </Table.Row>\n              ))}\n            </Table.Body>\n          </Table.Content>\n        </Table.Root>\n        <Pagination.Root {...pagination}>\n          <Pagination.PageSize />\n          <Pagination.Links />\n        </Pagination.Root>\n      </Layouts.Content>\n      {isModalOpened && <ModalForm onToggle={handleToggle} />}\n      <Dialog.Root open={showDeleteConfirmation} onOpenChange={setShowDeleteConfirmation}>\n        <ConfirmDialog onConfirm={confirmDelete} />\n      </Dialog.Root>\n    </Page.Main>\n  );\n};\n\nconst TABLE_HEADERS: Array<\n  Omit<Table.Header<SanitizedAdminUser, any>, 'label'> & { label: MessageDescriptor }\n> = [\n  {\n    name: 'firstname',\n    label: {\n      id: 'Settings.permissions.users.firstname',\n      defaultMessage: 'Firstname',\n    },\n    sortable: true,\n  },\n  {\n    name: 'lastname',\n    label: {\n      id: 'Settings.permissions.users.lastname',\n      defaultMessage: 'Lastname',\n    },\n    sortable: true,\n  },\n  {\n    name: 'email',\n    label: { id: 'Settings.permissions.users.email', defaultMessage: 'Email' },\n    sortable: true,\n  },\n  {\n    name: 'roles',\n    label: {\n      id: 'Settings.permissions.users.roles',\n      defaultMessage: 'Roles',\n    },\n    sortable: false,\n    cellFormatter({ roles }) {\n      return (\n        <Typography textColor=\"neutral800\">{roles.map((role) => role.name).join(',\\n')}</Typography>\n      );\n    },\n  },\n  {\n    name: 'username',\n    label: {\n      id: 'Settings.permissions.users.username',\n      defaultMessage: 'Username',\n    },\n    sortable: true,\n  },\n  {\n    name: 'isActive',\n    label: {\n      id: 'Settings.permissions.users.user-status',\n      defaultMessage: 'User status',\n    },\n    sortable: false,\n    cellFormatter({ isActive }) {\n      return (\n        <Flex>\n          <Status\n            size=\"S\"\n            borderWidth={0}\n            background=\"transparent\"\n            color=\"neutral800\"\n            variant={isActive ? 'success' : 'danger'}\n          >\n            <Typography>{isActive ? 'Active' : 'Inactive'}</Typography>\n          </Status>\n        </Flex>\n      );\n    },\n  },\n];\n\nconst FILTERS = [\n  {\n    name: 'firstname',\n    label: 'Firstname',\n    type: 'string',\n  },\n  {\n    name: 'lastname',\n    label: 'Lastname',\n    type: 'string',\n  },\n  {\n    name: 'email',\n    label: 'Email',\n    type: 'email',\n  },\n  {\n    name: 'username',\n    label: 'Username',\n    type: 'string',\n  },\n  {\n    name: 'isActive',\n    label: 'Active user',\n    type: 'boolean',\n  },\n] satisfies Filters.Filter[];\n\n/* -------------------------------------------------------------------------------------------------\n * ListPage\n * -----------------------------------------------------------------------------------------------*/\n\n// component which determines whether this page should render the CE or EE page\nconst ListPage = () => {\n  const UsersListPage = useEnterprise(\n    ListPageCE,\n    async () =>\n      // eslint-disable-next-line import/no-cycle\n      (await import('../../../../../../ee/admin/src/pages/SettingsPage/pages/Users/ListPage'))\n        .UserListPageEE\n  );\n\n  // block rendering until the EE component is fully loaded\n  if (!UsersListPage) {\n    return null;\n  }\n\n  return <UsersListPage />;\n};\n\n/* -------------------------------------------------------------------------------------------------\n * ProtectedListPage\n * -----------------------------------------------------------------------------------------------*/\n\nconst ProtectedListPage = () => {\n  const permissions = useTypedSelector((state) => state.admin_app.permissions.settings?.users.read);\n\n  return (\n    <Page.Protect permissions={permissions}>\n      <ListPage />\n    </Page.Protect>\n  );\n};\n\nexport { ProtectedListPage, ListPage, ListPageCE };\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAQA,IAAM,iBAAuB,iBAAmD,CAAC,OAAO,QAAQ;AACxF,QAAA,EAAE,cAAc,IAAI,QAAQ;AAGhC,aAAA,wBAAC,QAAO,EAAA,KAAU,eAAW,wBAAC,eAAK,CAAA,CAAA,GAAI,MAAK,KAAK,GAAG,OACjD,UAAc,cAAA;IACb,IAAI;IACJ,gBAAgB;EAAA,CACjB,EACH,CAAA;AAEJ,CAAC;ACiBD,IAAM,YAAY,CAAC,EAAE,SAAA,MAA+B;AAClD,QAAM,CAAC,aAAa,OAAO,IAAU,eAA+B,QAAQ;AAC5E,QAAM,CAAC,mBAAmB,oBAAoB,IAAU,eAAS,EAAE;AAC7D,QAAA,EAAE,cAAc,IAAI,QAAQ;AAC5B,QAAA,EAAE,mBAAmB,IAAI,gBAAgB;AACzC,QAAA;IACJ,yBAAyB;IACzB,iCAAiC;EAAA,IAC/B,mBAAmB;AACvB,QAAM,aAAa;IACjB;IACA,aAEI,MAAM,OACJ,kCACF,GACA;IACJ;MACE,QAAQ,SAAS,SAAS;AACxB,eAAO,CAAC,GAAG,SAAS,GAAG,OAAO;MAAA;MAGhC,cAAc,CAAA;IAAC;EACjB;AAGF,QAAM,gBAAgB;IACpB;IACA,aAEI,MAAM,OACJ,kCACF,GACA;IACJ;MACE,QAAQ,UAAU,UAAU;AACnB,eAAA;UACL,GAAG;UACH,GAAG;QAAA;MACL;MAGF,cAAc;IAAA;EAChB;AAEF,QAAM,YAAY;IAChB;IACA,aAEI,MAAM,OACJ,oCACF,GACA;EAAA;AAGA,QAAA,CAAC,UAAU,IAAI,sBAAsB;AAE3C,QAAM,cAAc,cAAc;IAChC,IAAI;IACJ,gBAAgB;EAAA,CACjB;AAED,QAAM,eAAe,OAAO,MAAmB,EAAE,UAAA,MAA0C;AACnF,UAAA,MAAM,MAAM,WAAW;MAC3B,GAAG;MACH,OAAO,KAAK,SAAS,CAAA;IAAC,CACvB;AAED,QAAI,UAAU,KAAK;AAEb,UAAA,IAAI,KAAK,mBAAmB;AACT,6BAAA,IAAI,KAAK,iBAAiB;MAAA;AAG1C,aAAA;IAAA,OACF;AACc,yBAAA;QACjB,MAAM;QACN,SAAS,eAAe,IAAI,KAAK;MAAA,CAClC;AAED,UAAI,iBAAiB,IAAI,KAAK,KAAK,IAAI,MAAM,SAAS,mBAAmB;AAC7D,kBAAA,uBAAuB,IAAI,KAAK,CAAC;MAAA;IAC7C;EACF;AAGF,QAAM,SAAS,MAAM;AACnB,QAAI,MAAM;AACR,cAAQ,IAAI;IAAA,OACP;AACI,eAAA;IAAA;EACX;AAGF,QAAM,EAAE,mBAAmB,YAAY,KAAK,IAAI,QAAQ,WAAW;AAGnE,MAAI,CAAC,WAAW;AACP,WAAA;EAAA;AAIP,aAAA,wBAAC,MAAM,MAAN,EAAW,aAAW,MAAC,cAAc,UACpC,cAAA,yBAAC,MAAM,SAAN,EACC,UAAA;QAAA,wBAAC,MAAM,QAAN,EAIC,cAAA,wBAAC,aAAY,EAAA,OAAO,aAClB,cAAA,wBAAC,OAAM,EAAA,WAAS,MAAE,UAAA,YAAA,CAAY,EAAA,CAChC,EACF,CAAA;QACA;MAAC;MAAA;QACC,QAAQ,gBAAgB,WAAW,SAAS;QAC5C,eAAe,iBAAiB,CAAA;QAChC,UAAU;QACV,kBAAkB;QAEjB,UAAA,CAAC,EAAE,aAAA,MAAmB;AACrB,qBAEI,yBAAA,6BAAA,EAAA,UAAA;gBAAC,wBAAA,MAAM,MAAN,EACC,cAAC,yBAAA,MAAA,EAAK,WAAU,UAAS,YAAW,WAAU,KAAK,GAChD,UAAA;cAAgB,gBAAA,gBACd,wBAAA,WAAA,EAAU,kBAAsC,CAAA;kBAAA,yBAElD,KACC,EAAA,UAAA;oBAAA,wBAAC,YAAW,EAAA,SAAQ,QAAO,KAAI,MAC5B,UAAc,cAAA;kBACb,IAAI;kBACJ,gBAAgB;gBAAA,CACjB,EACH,CAAA;oBACA,wBAAC,KAAA,EAAI,YAAY,GACf,cAAA,wBAAC,MAAK,EAAA,WAAU,UAAS,YAAW,WAAU,KAAK,GACjD,cAAA,wBAAC,KAAK,MAAL,EAAU,KAAK,GACb,UAAA,YAAY,IAAI,CAAC,QAAQ;AACxB,yBAAO,IAAI,IAAI,CAAC,EAAE,MAAM,GAAG,MAAA,MAAY;AAEnC,+BAAA;sBAAC,KAAK;sBAAL;wBAEC,KAAK;wBACL,WAAU;wBACV,YAAW;wBAEX,cAAA;0BAACA;0BAAA;4BACE,GAAG;4BACJ,UAAU;4BACV,OAAO,cAAc,MAAM,KAAK;4BAChC,aAAa,cAAc,MAAM,WAAW;0BAAA;wBAAA;sBAC9C;sBAVK,MAAM;oBAAA;kBAWb,CAEH;gBAAA,CACF,EACH,CAAA,EAAA,CACF,EACF,CAAA;cAAA,EACF,CAAA;kBAAA,yBACC,KACC,EAAA,UAAA;oBAAA,wBAAC,YAAW,EAAA,SAAQ,QAAO,KAAI,MAC5B,UAAc,cAAA;kBACb,IAAI;kBACJ,gBAAgB;gBAAA,CACjB,EACH,CAAA;oBACA,wBAAC,KAAA,EAAI,YAAY,GACf,cAAA,yBAAC,KAAK,MAAL,EAAU,KAAK,GACd,UAAA;sBAAA,wBAAC,KAAK,MAAL,EAAU,KAAK,GAAG,IAAI,IAAI,WAAU,UAAS,YAAW,WACvD,cAAA,wBAAC,aAAY,EAAA,UAAU,WAAA,CAAY,EACrC,CAAA;kBACC,WAAW,IAAI,CAAC,QAAQ;AACvB,2BAAO,IAAI,IAAI,CAAC,EAAE,MAAM,GAAG,MAAA,MAAY;AAEnC,iCAAA;wBAAC,KAAK;wBAAL;0BAEC,KAAK;0BACL,WAAU;0BACV,YAAW;0BAEX,cAAA;4BAACA;4BAAA;8BACE,GAAG;8BACJ,UAAU;8BACV,OAAO,cAAc,MAAM,KAAK;8BAChC,aACE,MAAM,cACF,cAAc,MAAM,WAAW,IAC/B;8BAEN,MAAM,MAAM,OAAO,cAAc,MAAM,IAAI,IAAI;4BAAA;0BAAA;wBACjD;wBAfK,MAAM;sBAAA;oBAgBb,CAEH;kBAAA,CACF;gBAAA,EAAA,CACH,EACF,CAAA;cAAA,EACF,CAAA;YAAA,EAAA,CACF,EACF,CAAA;gBACA,yBAAC,MAAM,QAAN,EACC,UAAA;kBAAA,wBAAC,QAAA,EAAO,SAAQ,YAAW,SAAS,UAAU,MAAK,UAChD,UAAc,cAAA;gBACb,IAAI;gBACJ,gBAAgB;cAAA,CACjB,EACH,CAAA;cACC,gBAAgB,eACd,wBAAA,QAAA,EAAO,MAAK,UAAS,SAAS,cAC5B,UAAA,cAAc,iBAAiB,EAAA,CAClC,QAEC,wBAAA,QAAA,EAAO,MAAK,UAAS,SAAS,cAAc,SAAS,UACnD,UAAc,cAAA,iBAAiB,EAClC,CAAA;YAAA,EAEJ,CAAA;UAAA,EACF,CAAA;QAAA;MAEJ;IAAA;EACF,EAAA,CACF,EACF,CAAA;AAEJ;AAUA,IAAM,sBAAsB;EAC1B,WAAW;EACX,UAAU;EACV,OAAO;EACP,OAAO,CAAA;AACT;AAEA,IAAM,cAA0B,CAAA;AAEhC,IAAM,cAAc;EAClB;IACE;MACE,OAAO;QACL,IAAI;QACJ,gBAAgB;MAAA;MAElB,MAAM;MACN,aAAa;QACX,IAAI;QACJ,gBAAgB;MAAA;MAElB,MAAM;MACN,MAAM;MACN,UAAU;IAAA;IAEZ;MACE,OAAO;QACL,IAAI;QACJ,gBAAgB;MAAA;MAElB,MAAM;MACN,aAAa;QACX,IAAI;QACJ,gBAAgB;MAAA;MAElB,MAAM;MACN,MAAM;IAAA;EACR;EAEF;IACE;MACE,OAAO;QACL,IAAI;QACJ,gBAAgB;MAAA;MAElB,MAAM;MACN,aAAa;QACX,IAAI;QACJ,gBAAgB;MAAA;MAElB,MAAM;MACN,MAAM;MACN,UAAU;IAAA;EACZ;AAEJ;AAEA,IAAM,cAAkBC,QAAO,EAAE,MAAM;EACrC,WACG,OAAA,EACA,KAAA,EACA,SAAS;IACR,IAAIC,YAAiB,SAAS;IAC9B,gBAAgB;EAAA,CACjB,EACA,SAAS;EACZ,UAAc,OAAO;EACrB,OACG,OAAO,EACP,MAAMA,YAAiB,KAAK,EAC5B,SAAS;IACR,IAAIA,YAAiB,SAAS;IAC9B,gBAAgB;EAAA,CACjB,EACA,SAAS;EACZ,OACGD,QAAM,EACN,IAAI,GAAG;IACN,IAAIC,YAAiB,SAAS;IAC9B,gBAAgB;EAAA,CACjB,EACA,SAAS;IACR,IAAIA,YAAiB,SAAS;IAC9B,gBAAgB;EAAA,CACjB;AACL,CAAC;AAED,IAAM,UAAU;EACd,QAAQ;IACN,mBAAmB;MACjB,IAAI;MACJ,gBAAgB;IAAA;IAElB,YAAY;IACZ,MAAM;EAAA;EAER,cAAc;IACZ,mBAAmB,EAAE,IAAI,iBAAiB,gBAAgB,SAAS;IACnE,YAAY;IACZ,MAAM;EAAA;AAEV;ACrVA,IAAM,aAAa,MAAM;;AACvB,QAAM,EAAE,yBAAyB,eAAe,IAAI,mBAAmB;AACvE,QAAM,CAAC,eAAe,cAAc,IAAU,eAAS,KAAK;AAC5D,QAAM,cAAc,iBAAiB,CAAC,UAAU,MAAM,UAAU,WAAW;AACrE,QAAA;IACJ,gBAAgB,EAAE,WAAW,WAAW,QAAQ;EAAA,IAC9C,SAAQ,iBAAY,aAAZ,mBAAsB,KAAK;AACvC,QAAM,WAAW,YAAY;AACvB,QAAA,EAAE,mBAAmB,IAAI,gBAAgB;AACzC,QAAA,EAAE,cAAc,IAAI,QAAQ;AAC5B,QAAA,EAAE,OAAO,IAAI,YAAY;AAC/B,QAAM,CAAC,wBAAwB,yBAAyB,IAAU,eAAS,KAAK;AAChF,QAAM,CAAC,aAAa,cAAc,IAAU,eAA0C,CAAA,CAAE;AACxF,QAAM,EAAE,MAAM,SAAS,UAAA,IAAc,cAAiB,SAAM,QAAQ,EAAE,mBAAmB,KAAA,CAAM,CAAC;AAEhG,QAAM,EAAE,YAAY,QAAQ,CAAA,EAAG,IAAI,QAAQ,CAAA;AAE3C,QAAM,eAAe;IACnB;IACA,aAEI,MAAM,OACJ,uCACF,GACA;EAAA;AAGN,QAAM,UAAU,cAAc,IAAI,CAAC,YAAY;IAC7C,GAAG;IACH,OAAO,cAAc,OAAO,KAAK;EAAA,EACjC;AAEF,QAAM,QAAQ,cAAc;IAC1B,IAAI;IACJ,gBAAgB;EAAA,CACjB;AAED,QAAM,eAAe,MAAM;AACV,mBAAA,CAAC,SAAS,CAAC,IAAI;EAAA;AAG1B,QAAA,CAAC,SAAS,IAAI,2BAA2B;AACzC,QAAA,kBAAkB,OAAO,QAAyC;AAClE,QAAA;AACF,YAAM,MAAM,MAAM,UAAU,EAAE,IAAA,CAAK;AAEnC,UAAI,WAAW,KAAK;AACC,2BAAA;UACjB,MAAM;UACN,SAAS,eAAe,IAAI,KAAK;QAAA,CAClC;MAAA;IACH,SACO,KAAK;AACO,yBAAA;QACjB,MAAM;QACN,SAAS,cAAc;UACrB,IAAI;UACJ,gBAAgB;QAAA,CACjB;MAAA,CACF;IAAA;EACH;AAGI,QAAA,iBAAiB,CAAC,OAAiC,MAAM;AAC7D,QAAI,SAAS;AACF,eAAA,GAAG,SAAA,CAAU;IAAA;EACxB;AAGI,QAAA,oBAAoB,CAAC,OAAiC,YAAY;AACvD,mBAAA,CAAC,EAAE,CAAC;AACnB,8BAA0B,IAAI;EAAA;AAGhC,QAAM,gBAAgB,YAAY;AAChC,UAAM,gBAAgB,WAAW;AACjC,8BAA0B,KAAK;EAAA;AAIjC,MAAI,CAAC,cAAc;AACV,WAAA;EAAA;AAGT,MAAI,SAAS;AACJ,eAAA,wBAAC,KAAK,OAAL,CAAA,CAAW;EAAA;AAGrB,aACG,yBAAA,KAAK,MAAL,EAAU,aAAW,WACpB,UAAA;QAAC,wBAAA,KAAK,OAAL,EACE,UAAA;MACC,EAAE,IAAI,sBAAsB,gBAAgB,oBAAoB;MAChE;QACE,MAAM;MAAA;IACR,EAEJ,CAAA;QACA;MAAC,QAAQ;MAAR;QACC,eAAe,iBAAc,wBAAA,cAAA,EAAa,SAAS,aAAc,CAAA;QACjE;QACA,UAAU,cAAc;UACtB,IAAI;UACJ,gBAAgB;QAAA,CACjB;MAAA;IAAA;QAEH;MAAC,QAAQ;MAAR;QACC,kBAEI,yBAAA,6BAAA,EAAA,UAAA;cAAA;YAAC;YAAA;cACC,OAAO;gBACL,EAAE,IAAI,8BAA8B,gBAAgB,sBAAsB;gBAC1E,EAAE,QAAQ,MAAM;cAAA;YAClB;UAAA;cAED,yBAAA,QAAQ,MAAR,EAAa,SAAS,SACrB,UAAA;gBAAC,wBAAA,QAAQ,SAAR,CAAA,CAAgB;gBACjB,wBAAC,QAAQ,SAAR,CAAA,CAAgB;gBACjB,wBAAC,QAAQ,MAAR,CAAA,CAAa;UAAA,EAChB,CAAA;QAAA,EACF,CAAA;MAAA;IAAA;QAGJ,yBAAC,QAAQ,SAAR,EACC,UAAA;UAAA,yBAAC,MAAM,MAAN,EAAW,MAAM,OAAO,SACvB,UAAA;YAAC,wBAAA,MAAM,WAAN,CAAA,CAAgB;YACjB,yBAAC,MAAM,SAAN,EACC,UAAA;cAAC,yBAAA,MAAM,MAAN,EACE,UAAA;YAAA,gBAAa,wBAAA,MAAM,oBAAN,CAAA,CAAyB,IAAK;YAC3C,QAAQ,IAAI,CAAC,eACX,wBAAA,MAAM,YAAN,EAAoC,GAAG,OAAA,GAAjB,OAAO,IAAkB,CACjD;UAAA,EACH,CAAA;cACA,wBAAC,MAAM,OAAN,CAAA,CAAY;cACb,wBAAC,MAAM,SAAN,CAAA,CAAc;cAAA,wBACd,MAAM,MAAN,EACE,UAAM,MAAA,IAAI,CAAC,aACV;YAAC,MAAM;YAAN;cAEC,SAAS,eAAe,KAAK,EAAE;cAC/B,QAAQ,UAAU,YAAY;cAE7B,UAAA;gBAAA,gBAAA,wBAAa,MAAM,cAAN,EAAmB,IAAI,KAAK,GAAA,CAAI,IAAK;gBAClD,QAAQ,IAAI,CAAC,EAAE,eAAe,MAAM,GAAG,KAAA,MAAW;AACjD,6BACG,wBAAA,MAAM,MAAN,EACE,UAAO,OAAA,kBAAkB,aACxB,cAAc,MAAM,EAAE,MAAM,GAAG,KAAA,CAAM;;wBAAA,wBAGpC,YAAW,EAAA,WAAU,cAAc,UAAK,KAAA,IAAI,KAAK,IAAI,CAAA;oBAAA,GALzC,IAOjB;gBAAA,CAEH;gBACA,WAAW,gBACT,wBAAA,MAAM,MAAN,EAAW,SAAS,CAAC,MAAM,EAAE,gBAAgB,GAC5C,cAAC,yBAAA,MAAA,EAAK,gBAAe,OAClB,UAAA;kBACC,cAAA;oBAAC;oBAAA;sBACC,KAAK;sBACL,IAAI,KAAK,GAAG,SAAS;sBACrB,OAAO;wBACL,EAAE,IAAI,4BAA4B,gBAAgB,gBAAgB;wBAClE,EAAE,QAAQ,eAAe,IAAI,EAAE;sBAAA;sBAEjC,SAAQ;sBAER,cAAA,wBAAC,eAAO,CAAA,CAAA;oBAAA;kBAAA,IAER;kBACH,gBACC;oBAAC;oBAAA;sBACC,SAAS,kBAAkB,KAAK,EAAE;sBAClC,OAAO;wBACL,EAAE,IAAI,wBAAwB,gBAAgB,kBAAkB;wBAChE,EAAE,QAAQ,eAAe,IAAI,EAAE;sBAAA;sBAEjC,SAAQ;sBAER,cAAA,wBAAC,cAAM,CAAA,CAAA;oBAAA;kBAAA,IAEP;gBAAA,EAAA,CACN,EAAA,CACF,IACE;cAAA;YAAA;YA/CC,KAAK;UAAA,CAiDb,EACH,CAAA;QAAA,EACF,CAAA;MAAA,EACF,CAAA;UACC,yBAAA,WAAW,MAAX,EAAiB,GAAG,YACnB,UAAA;YAAC,wBAAA,WAAW,UAAX,CAAA,CAAoB;YACrB,wBAAC,WAAW,OAAX,CAAA,CAAiB;MAAA,EACpB,CAAA;IAAA,EACF,CAAA;IACC,qBAAiB,wBAAC,WAAU,EAAA,UAAU,aAAc,CAAA;QACpD,wBAAA,OAAO,MAAP,EAAY,MAAM,wBAAwB,cAAc,2BACvD,cAAC,wBAAA,eAAA,EAAc,WAAW,cAAA,CAAe,EAC3C,CAAA;EAAA,EACF,CAAA;AAEJ;AAEA,IAAM,gBAEF;EACF;IACE,MAAM;IACN,OAAO;MACL,IAAI;MACJ,gBAAgB;IAAA;IAElB,UAAU;EAAA;EAEZ;IACE,MAAM;IACN,OAAO;MACL,IAAI;MACJ,gBAAgB;IAAA;IAElB,UAAU;EAAA;EAEZ;IACE,MAAM;IACN,OAAO,EAAE,IAAI,oCAAoC,gBAAgB,QAAQ;IACzE,UAAU;EAAA;EAEZ;IACE,MAAM;IACN,OAAO;MACL,IAAI;MACJ,gBAAgB;IAAA;IAElB,UAAU;IACV,cAAc,EAAE,MAAA,GAAS;AACvB,iBACG,wBAAA,YAAA,EAAW,WAAU,cAAc,UAAM,MAAA,IAAI,CAAC,SAAS,KAAK,IAAI,EAAE,KAAK,KAAK,EAAE,CAAA;IAAA;EAEnF;EAEF;IACE,MAAM;IACN,OAAO;MACL,IAAI;MACJ,gBAAgB;IAAA;IAElB,UAAU;EAAA;EAEZ;IACE,MAAM;IACN,OAAO;MACL,IAAI;MACJ,gBAAgB;IAAA;IAElB,UAAU;IACV,cAAc,EAAE,SAAA,GAAY;AAC1B,iBAAA,wBACG,MACC,EAAA,cAAA;QAAC;QAAA;UACC,MAAK;UACL,aAAa;UACb,YAAW;UACX,OAAM;UACN,SAAS,WAAW,YAAY;UAEhC,cAAC,wBAAA,YAAA,EAAY,UAAW,WAAA,WAAW,WAAW,CAAA;QAAA;MAAA,EAElD,CAAA;IAAA;EAEJ;AAEJ;AAEA,IAAM,UAAU;EACd;IACE,MAAM;IACN,OAAO;IACP,MAAM;EAAA;EAER;IACE,MAAM;IACN,OAAO;IACP,MAAM;EAAA;EAER;IACE,MAAM;IACN,OAAO;IACP,MAAM;EAAA;EAER;IACE,MAAM;IACN,OAAO;IACP,MAAM;EAAA;EAER;IACE,MAAM;IACN,OAAO;IACP,MAAM;EAAA;AAEV;AAOA,IAAM,WAAW,MAAM;AACrB,QAAM,gBAAgB;IACpB;IACA;;OAEG,MAAM,OAAO,iCAAwE,GACnF;;EAAA;AAIP,MAAI,CAAC,eAAe;AACX,WAAA;EAAA;AAGT,aAAA,wBAAQ,eAAc,CAAA,CAAA;AACxB;AAMA,IAAM,oBAAoB,MAAM;AACxB,QAAA,cAAc,iBAAiB,CAAC,UAAA;;AAAU,uBAAM,UAAU,YAAY,aAA5B,mBAAsC,MAAM;GAAI;AAEhG,aAAA,wBACG,KAAK,SAAL,EAAa,aACZ,cAAA,wBAAC,UAAA,CAAA,CAAS,EACZ,CAAA;AAEJ;",
  "names": ["InputRenderer", "create", "translatedErrors"]
}
