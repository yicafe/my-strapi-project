{
  "version": 3,
  "sources": ["../../../@strapi/content-manager/admin/src/components/ConfigurationForm/EditFieldForm.tsx", "../../../@strapi/content-manager/admin/src/components/ConfigurationForm/Fields.tsx", "../../../@strapi/content-manager/admin/src/components/ConfigurationForm/Form.tsx"],
  "sourcesContent": ["import {\n  useNotification,\n  InputRenderer,\n  Form,\n  InputProps,\n  useField,\n} from '@strapi/admin/strapi-admin';\nimport { Button, Flex, Grid, Modal } from '@strapi/design-system';\nimport { useIntl } from 'react-intl';\nimport * as yup from 'yup';\n\nimport { ATTRIBUTE_TYPES_THAT_CANNOT_BE_MAIN_FIELD } from '../../constants/attributes';\nimport { useGetInitialDataQuery } from '../../services/init';\nimport { capitalise } from '../../utils/strings';\nimport { getTranslation } from '../../utils/translations';\nimport { FieldTypeIcon } from '../FieldTypeIcon';\n\nimport { TEMP_FIELD_NAME } from './Fields';\n\nimport type { ConfigurationFormData } from './Form';\nimport type { Schema } from '@strapi/types';\n\n/* -------------------------------------------------------------------------------------------------\n * Constants\n * -----------------------------------------------------------------------------------------------*/\n\nconst FIELD_SCHEMA = yup.object().shape({\n  label: yup.string().required().nullable(),\n  description: yup.string(),\n  editable: yup.boolean(),\n  size: yup.number().required(),\n});\n\n/* -------------------------------------------------------------------------------------------------\n * EditFieldForm\n * -----------------------------------------------------------------------------------------------*/\n\ninterface EditFieldFormProps {\n  attribute?: Schema.Attribute.AnyAttribute;\n  name: string;\n  onClose: () => void;\n}\n\nconst EditFieldForm = ({ attribute, name, onClose }: EditFieldFormProps) => {\n  const { formatMessage } = useIntl();\n  const { toggleNotification } = useNotification();\n\n  const { value, onChange } =\n    useField<ConfigurationFormData['layout'][number]['children'][number]>(name);\n\n  const { data: mainFieldOptions } = useGetInitialDataQuery(undefined, {\n    selectFromResult: (res) => {\n      if (attribute?.type !== 'relation' || !res.data) {\n        return { data: [] };\n      }\n\n      if ('targetModel' in attribute && typeof attribute.targetModel === 'string') {\n        const targetSchema = res.data.contentTypes.find(\n          (schema) => schema.uid === attribute.targetModel\n        );\n\n        if (targetSchema) {\n          return {\n            data: Object.entries(targetSchema.attributes).reduce<\n              Array<{ label: string; value: string }>\n            >((acc, [key, attribute]) => {\n              /**\n               * Create the list of attributes from the schema as to which can\n               * be our `mainField` and dictate the display name of the schema\n               * we're editing.\n               */\n              if (!ATTRIBUTE_TYPES_THAT_CANNOT_BE_MAIN_FIELD.includes(attribute.type)) {\n                acc.push({\n                  label: key,\n                  value: key,\n                });\n              }\n\n              return acc;\n            }, []),\n          };\n        }\n      }\n\n      return { data: [] };\n    },\n    skip: attribute?.type !== 'relation',\n  });\n\n  if (!value || value.name === TEMP_FIELD_NAME || !attribute) {\n    // This is very unlikely to happen, but it ensures the form is not opened without a value.\n    console.error(\n      \"You've opened a field to edit without it being part of the form, this is likely a bug with Strapi. Please open an issue.\"\n    );\n\n    toggleNotification({\n      message: formatMessage({\n        id: 'content-manager.containers.edit-settings.modal-form.error',\n        defaultMessage: 'An error occurred while trying to open the form.',\n      }),\n      type: 'danger',\n    });\n\n    return null;\n  }\n\n  return (\n    <Modal.Content>\n      <Form\n        method=\"PUT\"\n        initialValues={value}\n        validationSchema={FIELD_SCHEMA}\n        onSubmit={(data) => {\n          onChange(name, data);\n          onClose();\n        }}\n      >\n        <Modal.Header>\n          <Flex gap={3}>\n            <FieldTypeIcon type={attribute.type} />\n            <Modal.Title>\n              {formatMessage(\n                {\n                  id: 'content-manager.containers.edit-settings.modal-form.label',\n                  defaultMessage: 'Edit {fieldName}',\n                },\n                { fieldName: capitalise(value.name) }\n              )}\n            </Modal.Title>\n          </Flex>\n        </Modal.Header>\n        <Modal.Body>\n          <Grid.Root gap={4}>\n            {[\n              {\n                name: 'label',\n                label: formatMessage({\n                  id: getTranslation('containers.edit-settings.modal-form.label'),\n                  defaultMessage: 'Label',\n                }),\n                size: 6,\n                type: 'string' as const,\n              },\n              {\n                name: 'description',\n                label: formatMessage({\n                  id: getTranslation('containers.edit-settings.modal-form.description'),\n                  defaultMessage: 'Description',\n                }),\n                size: 6,\n                type: 'string' as const,\n              },\n              {\n                name: 'placeholder',\n                label: formatMessage({\n                  id: getTranslation('containers.edit-settings.modal-form.placeholder'),\n                  defaultMessage: 'Placeholder',\n                }),\n                size: 6,\n                type: 'string' as const,\n              },\n              {\n                name: 'editable',\n                label: formatMessage({\n                  id: getTranslation('containers.edit-settings.modal-form.editable'),\n                  defaultMessage: 'Editable',\n                }),\n                size: 6,\n                type: 'boolean' as const,\n              },\n              {\n                name: 'mainField',\n                label: formatMessage({\n                  id: getTranslation('containers.edit-settings.modal-form.mainField'),\n                  defaultMessage: 'Entry title',\n                }),\n                hint: formatMessage({\n                  id: getTranslation(\n                    'containers.SettingPage.edit-settings.modal-form.mainField.hint'\n                  ),\n                  defaultMessage: 'Set the displayed field',\n                }),\n                size: 6,\n                options: mainFieldOptions,\n                type: 'enumeration' as const,\n              },\n              {\n                name: 'size',\n                label: formatMessage({\n                  id: getTranslation('containers.ListSettingsView.modal-form.size'),\n                  defaultMessage: 'Size',\n                }),\n                size: 6,\n                options: [\n                  { value: '4', label: '33%' },\n                  { value: '6', label: '50%' },\n                  { value: '8', label: '66%' },\n                  { value: '12', label: '100%' },\n                ],\n                type: 'enumeration' as const,\n              },\n            ]\n              .filter(filterFieldsBasedOnAttributeType(attribute.type))\n              .map(({ size, ...field }) => (\n                <Grid.Item key={field.name} col={size} direction=\"column\" alignItems=\"stretch\">\n                  <InputRenderer {...field} />\n                </Grid.Item>\n              ))}\n          </Grid.Root>\n        </Modal.Body>\n        <Modal.Footer>\n          <Modal.Close>\n            <Button variant=\"tertiary\">\n              {formatMessage({ id: 'app.components.Button.cancel', defaultMessage: 'Cancel' })}\n            </Button>\n          </Modal.Close>\n          <Button type=\"submit\">\n            {formatMessage({ id: 'global.finish', defaultMessage: 'Finish' })}\n          </Button>\n        </Modal.Footer>\n      </Form>\n    </Modal.Content>\n  );\n};\n\n/**\n * @internal\n * @description not all edit fields have the same editable properties, it depends on the type\n * e.g. a dynamic zone can only change it's label.\n */\nconst filterFieldsBasedOnAttributeType = (type: Schema.Attribute.Kind) => (field: InputProps) => {\n  switch (type) {\n    case 'blocks':\n    case 'richtext':\n      return field.name !== 'size' && field.name !== 'mainField';\n    case 'boolean':\n    case 'media':\n      return field.name !== 'placeholder' && field.name !== 'mainField';\n    case 'component':\n    case 'dynamiczone':\n      return field.name === 'label' || field.name === 'editable';\n    case 'json':\n      return field.name !== 'placeholder' && field.name !== 'mainField' && field.name !== 'size';\n    case 'relation':\n      return true;\n    default:\n      return field.name !== 'mainField';\n  }\n};\n\nexport { EditFieldForm };\nexport type { EditFieldFormProps };\n", "import * as React from 'react';\n\nimport { useField, useForm } from '@strapi/admin/strapi-admin';\nimport {\n  Modal,\n  Box,\n  Flex,\n  Grid,\n  IconButton,\n  IconButtonComponent,\n  Typography,\n  useComposedRefs,\n  Link,\n  Menu,\n} from '@strapi/design-system';\nimport { Cog, Cross, Drag, Pencil, Plus } from '@strapi/icons';\nimport { generateNKeysBetween as generateNKeysBetweenImpl } from 'fractional-indexing';\nimport { getEmptyImage } from 'react-dnd-html5-backend';\nimport { useIntl } from 'react-intl';\nimport { NavLink } from 'react-router-dom';\nimport { styled } from 'styled-components';\n\nimport { ItemTypes } from '../../constants/dragAndDrop';\nimport { type UseDragAndDropOptions, useDragAndDrop } from '../../hooks/useDragAndDrop';\nimport { getTranslation } from '../../utils/translations';\nimport { ComponentIcon } from '../ComponentIcon';\n\nimport { EditFieldForm, EditFieldFormProps } from './EditFieldForm';\n\nimport type { ConfigurationFormData, EditFieldSpacerLayout } from './Form';\nimport type { EditLayout } from '../../hooks/useDocumentLayout';\n\ntype FormField = ConfigurationFormData['layout'][number]['children'][number];\ntype Field = Omit<ConfigurationFormData['layout'][number]['children'][number], '__temp_key__'>;\n\n/* -------------------------------------------------------------------------------------------------\n * Fields\n * -----------------------------------------------------------------------------------------------*/\n\ninterface FieldsProps extends Pick<EditLayout, 'metadatas'>, Pick<FieldProps, 'components'> {\n  attributes: {\n    [key: string]: FieldProps['attribute'];\n  };\n  fieldSizes: Record<string, number>;\n  components: EditLayout['components'];\n}\n\nconst Fields = ({ attributes, fieldSizes, components, metadatas = {} }: FieldsProps) => {\n  const { formatMessage } = useIntl();\n\n  const layout = useForm<ConfigurationFormData['layout']>(\n    'Fields',\n    (state) => state.values.layout ?? []\n  );\n  const onChange = useForm('Fields', (state) => state.onChange);\n  const addFieldRow = useForm('Fields', (state) => state.addFieldRow);\n  const removeFieldRow = useForm('Fields', (state) => state.removeFieldRow);\n\n  const existingFields = layout.map((row) => row.children.map((field) => field.name)).flat();\n\n  /**\n   * Get the fields that are not already in the layout\n   * But also check that they are visible before we give users\n   * the option to display them. e.g. `id` is not visible.\n   */\n  const remainingFields = Object.entries(metadatas).reduce<Field[]>((acc, current) => {\n    const [name, { visible, ...field }] = current;\n\n    if (!existingFields.includes(name) && visible === true) {\n      const type = attributes[name]?.type;\n      const size = type ? fieldSizes[type] : 12;\n\n      acc.push({\n        ...field,\n        label: field.label ?? name,\n        name,\n        size,\n      });\n    }\n\n    return acc;\n  }, []);\n\n  const handleMoveField: FieldProps['onMoveField'] = (\n    [newRowIndex, newFieldIndex],\n    [currentRowIndex, currentFieldIndex]\n  ) => {\n    /**\n     * Because this view has the constraint that the sum of field sizes cannot be greater\n     * than 12, we don't use the form's method to move field rows, instead, we calculate\n     * the new layout and set the entire form.\n     */\n    const newLayout = structuredClone(layout);\n\n    /**\n     * Remove field from the current layout space using splice so we have the item\n     */\n    const [field] = newLayout[currentRowIndex].children.splice(currentFieldIndex, 1);\n\n    if (!field || field.name === TEMP_FIELD_NAME) {\n      return;\n    }\n\n    const newRow = newLayout[newRowIndex].children;\n    const [newFieldKey] = generateNKeysBetween(newRow, 1, currentFieldIndex, newFieldIndex);\n\n    /**\n     * Next we inject the field into it's new row at it's specified index, we then remove the spaces\n     * if they exist and recalculate into potentially two arrays ONLY if the sizing is now over 12,\n     * the row and the rest of the row that couldn't fit.\n     *\n     * for example, if i have a row of `[{size: 4}, {size: 6}]` and i add `{size: 8}` a index 0,\n     * the new array will look like `[{size: 8}, {size: 4}, {size: 6}]` which breaks the limit of 12,\n     * so instead we make two arrays for the new rows `[[{size: 8}, {size: 4}], [{size: 6}]]` which we\n     * then inject at the original row point with spacers included.\n     */\n    newRow.splice(newFieldIndex, 0, { ...field, __temp_key__: newFieldKey });\n\n    if (newLayout[newRowIndex].children.reduce((acc, curr) => acc + curr.size, 0) > 12) {\n      const recalculatedRows = chunkArray(\n        newLayout[newRowIndex].children.filter((field) => field.name !== TEMP_FIELD_NAME)\n      );\n\n      const rowKeys = generateNKeysBetween(\n        newLayout,\n        recalculatedRows.length,\n        currentRowIndex,\n        newRowIndex\n      );\n\n      newLayout.splice(\n        newRowIndex,\n        1,\n        ...recalculatedRows.map((row, index) => ({\n          __temp_key__: rowKeys[index],\n          children: row,\n        }))\n      );\n    }\n\n    /**\n     * Now we remove our spacers from the rows so we can understand what dead rows exist:\n     * - if there's only spacers left\n     * - there's nothing in the row, e.g. a size 12 field left it.\n     * These rows are then filtered out.\n     * After that, we recalculate the spacers for the rows that need them.\n     */\n    const newLayoutWithSpacers = newLayout\n      .map((row) => ({\n        ...row,\n        children: row.children.filter((field) => field.name !== TEMP_FIELD_NAME),\n      }))\n      .filter((row) => row.children.length > 0)\n      .map((row) => {\n        const totalSpaceTaken = row.children.reduce((acc, curr) => acc + curr.size, 0);\n\n        if (totalSpaceTaken < 12) {\n          const [spacerKey] = generateNKeysBetweenImpl(\n            row.children.at(-1)?.__temp_key__,\n            undefined,\n            1\n          );\n\n          return {\n            ...row,\n            children: [\n              ...row.children,\n              {\n                name: TEMP_FIELD_NAME,\n                size: 12 - totalSpaceTaken,\n                __temp_key__: spacerKey,\n              } satisfies EditFieldSpacerLayout,\n            ],\n          };\n        }\n\n        return row;\n      });\n\n    onChange('layout', newLayoutWithSpacers);\n  };\n\n  const handleRemoveField =\n    (rowIndex: number, fieldIndex: number): FieldProps['onRemoveField'] =>\n    () => {\n      if (layout[rowIndex].children.length === 1) {\n        removeFieldRow(`layout`, rowIndex);\n      } else {\n        onChange(`layout.${rowIndex}.children`, [\n          ...layout[rowIndex].children.slice(0, fieldIndex),\n          ...layout[rowIndex].children.slice(fieldIndex + 1),\n        ]);\n      }\n    };\n\n  const handleAddField = (field: Field) => () => {\n    addFieldRow('layout', { children: [field] });\n  };\n\n  return (\n    <Flex paddingTop={6} direction=\"column\" alignItems=\"stretch\" gap={4}>\n      <Flex alignItems=\"flex-start\" direction=\"column\" justifyContent=\"space-between\">\n        <Typography fontWeight=\"bold\">\n          {formatMessage({\n            id: getTranslation('containers.list.displayedFields'),\n            defaultMessage: 'Displayed fields',\n          })}\n        </Typography>\n        <Typography variant=\"pi\" textColor=\"neutral600\">\n          {formatMessage({\n            id: 'containers.SettingPage.editSettings.description',\n            defaultMessage: 'Drag & drop the fields to build the layout',\n          })}\n        </Typography>\n      </Flex>\n      <Box padding={4} hasRadius borderStyle=\"dashed\" borderWidth=\"1px\" borderColor=\"neutral300\">\n        <Flex direction=\"column\" alignItems=\"stretch\" gap={2}>\n          {layout.map((row, rowIndex) => (\n            <Grid.Root gap={2} key={row.__temp_key__}>\n              {row.children.map(({ size, ...field }, fieldIndex) => (\n                <Grid.Item key={field.name} col={size} direction=\"column\" alignItems=\"stretch\">\n                  <Field\n                    attribute={attributes[field.name]}\n                    components={components}\n                    index={[rowIndex, fieldIndex]}\n                    name={`layout.${rowIndex}.children.${fieldIndex}`}\n                    onMoveField={handleMoveField}\n                    onRemoveField={handleRemoveField(rowIndex, fieldIndex)}\n                  />\n                </Grid.Item>\n              ))}\n            </Grid.Root>\n          ))}\n          <Menu.Root>\n            <Menu.Trigger\n              startIcon={<Plus />}\n              endIcon={null}\n              disabled={remainingFields.length === 0}\n              fullWidth\n              variant=\"secondary\"\n            >\n              {formatMessage({\n                id: getTranslation('containers.SettingPage.add.field'),\n                defaultMessage: 'Insert another field',\n              })}\n            </Menu.Trigger>\n            <Menu.Content>\n              {remainingFields.map((field) => (\n                <Menu.Item key={field.name} onSelect={handleAddField(field)}>\n                  {field.label}\n                </Menu.Item>\n              ))}\n            </Menu.Content>\n          </Menu.Root>\n        </Flex>\n      </Box>\n    </Flex>\n  );\n};\n\n/**\n * @internal\n * @description Small abstraction to solve within an array of fields where you can\n * add a field to the beginning or start, move back and forth what it's index range\n * should be when calculating it's new temp key\n */\nconst generateNKeysBetween = <Field extends { __temp_key__: string }>(\n  field: Field[],\n  count: number,\n  currInd: number,\n  newInd: number\n) => {\n  const startKey = currInd > newInd ? field[newInd - 1]?.__temp_key__ : field[newInd]?.__temp_key__;\n  const endKey = currInd > newInd ? field[newInd]?.__temp_key__ : field[newInd + 1]?.__temp_key__;\n\n  return generateNKeysBetweenImpl(startKey, endKey, count);\n};\n\n/**\n * @internal\n * @description chunks a row of layouts by the max size we allow, 12. It does not add the\n * spacers again, that should be added separately.\n */\nconst chunkArray = (array: FormField[]) => {\n  const result: Array<FormField[]> = [];\n  let temp: FormField[] = [];\n\n  array.reduce((acc, field) => {\n    if (acc + field.size > 12) {\n      result.push(temp);\n      temp = [field];\n      return field.size;\n    } else {\n      temp.push(field);\n      return acc + field.size;\n    }\n  }, 0);\n\n  if (temp.length > 0) {\n    result.push(temp);\n  }\n\n  return result;\n};\n\n/* -------------------------------------------------------------------------------------------------\n * Field\n * -----------------------------------------------------------------------------------------------*/\n\ninterface FieldProps extends Pick<EditFieldFormProps, 'name' | 'attribute'> {\n  components: EditLayout['components'];\n  index: [row: number, index: number];\n  onMoveField: UseDragAndDropOptions<number[]>['onMoveItem'];\n  onRemoveField: React.MouseEventHandler<HTMLButtonElement>;\n}\n\nconst TEMP_FIELD_NAME = '_TEMP_';\n\n/**\n * Displays a field in the layout with drag options, also\n * opens a modal  to edit the details of said field.\n */\nconst Field = ({ attribute, components, name, index, onMoveField, onRemoveField }: FieldProps) => {\n  const [isModalOpen, setIsModalOpen] = React.useState(false);\n  const { formatMessage } = useIntl();\n\n  const { value } = useField<FormField>(name);\n\n  const [{ isDragging }, objectRef, dropRef, dragRef, dragPreviewRef] = useDragAndDrop<\n    Array<number>\n  >(true, {\n    dropSensitivity: 'immediate',\n    type: ItemTypes.EDIT_FIELD,\n    item: { index, label: value?.label, name },\n    index,\n    onMoveItem: onMoveField,\n  });\n\n  React.useEffect(() => {\n    dragPreviewRef(getEmptyImage(), { captureDraggingState: false });\n  }, [dragPreviewRef]);\n\n  const composedRefs = useComposedRefs<HTMLSpanElement>(dragRef, objectRef);\n\n  const handleRemoveField: React.MouseEventHandler<HTMLButtonElement> = (e) => {\n    e.preventDefault();\n    e.stopPropagation();\n    onRemoveField(e);\n  };\n\n  const onEditFieldMeta: React.MouseEventHandler<HTMLButtonElement> = (e) => {\n    e.preventDefault();\n    e.stopPropagation();\n    setIsModalOpen(true);\n  };\n\n  const tempRefs = useComposedRefs<HTMLSpanElement>(dropRef, objectRef);\n\n  if (!value) {\n    return null;\n  }\n\n  if (value.name === TEMP_FIELD_NAME) {\n    return <Flex tag=\"span\" height=\"100%\" style={{ opacity: 0 }} ref={tempRefs} />;\n  }\n\n  return (\n    <Modal.Root open={isModalOpen} onOpenChange={setIsModalOpen}>\n      <Flex\n        borderColor=\"neutral150\"\n        background=\"neutral100\"\n        hasRadius\n        style={{ opacity: isDragging ? 0.5 : 1 }}\n        ref={dropRef}\n        gap={3}\n        cursor=\"pointer\"\n        onClick={() => {\n          setIsModalOpen(true);\n        }}\n      >\n        <DragButton\n          tag=\"span\"\n          withTooltip={false}\n          label={formatMessage(\n            {\n              id: getTranslation('components.DraggableCard.move.field'),\n              defaultMessage: 'Move {item}',\n            },\n            { item: value.label }\n          )}\n          onClick={(e) => e.stopPropagation()}\n          ref={composedRefs}\n        >\n          <Drag />\n        </DragButton>\n        <Flex direction=\"column\" alignItems=\"flex-start\" grow={1} overflow=\"hidden\">\n          <Flex gap={3} justifyContent=\"space-between\" width=\"100%\">\n            <Typography ellipsis fontWeight=\"bold\">\n              {value.label}\n            </Typography>\n            <Flex>\n              <IconButton\n                type=\"button\"\n                variant=\"ghost\"\n                background=\"transparent\"\n                onClick={onEditFieldMeta}\n                withTooltip={false}\n                label={formatMessage(\n                  {\n                    id: getTranslation('components.DraggableCard.edit.field'),\n                    defaultMessage: 'Edit {item}',\n                  },\n                  { item: value.label }\n                )}\n              >\n                <Pencil />\n              </IconButton>\n              <IconButton\n                type=\"button\"\n                variant=\"ghost\"\n                onClick={handleRemoveField}\n                background=\"transparent\"\n                withTooltip={false}\n                label={formatMessage(\n                  {\n                    id: getTranslation('components.DraggableCard.delete.field'),\n                    defaultMessage: 'Delete {item}',\n                  },\n                  { item: value.label }\n                )}\n              >\n                <Cross />\n              </IconButton>\n            </Flex>\n          </Flex>\n          {attribute?.type === 'component' ? (\n            <Flex\n              paddingTop={3}\n              paddingRight={3}\n              paddingBottom={3}\n              paddingLeft={0}\n              alignItems=\"flex-start\"\n              direction=\"column\"\n              gap={2}\n              width=\"100%\"\n            >\n              <Grid.Root gap={4} width=\"100%\">\n                {components[attribute.component].layout.map((row) =>\n                  row.map(({ size, ...field }) => (\n                    <Grid.Item key={field.name} col={size} direction=\"column\" alignItems=\"stretch\">\n                      <Flex\n                        alignItems=\"center\"\n                        background=\"neutral0\"\n                        paddingTop={2}\n                        paddingBottom={2}\n                        paddingLeft={3}\n                        paddingRight={3}\n                        hasRadius\n                        borderColor=\"neutral200\"\n                      >\n                        <Typography textColor=\"neutral800\">{field.name}</Typography>\n                      </Flex>\n                    </Grid.Item>\n                  ))\n                )}\n              </Grid.Root>\n              <Link\n                // used to stop the edit form from appearing when we click here.\n                onClick={(e) => e.stopPropagation()}\n                startIcon={<Cog />}\n                tag={NavLink}\n                to={`../components/${attribute.component}/configurations/edit`}\n              >\n                {formatMessage({\n                  id: getTranslation('components.FieldItem.linkToComponentLayout'),\n                  defaultMessage: \"Set the component's layout\",\n                })}\n              </Link>\n            </Flex>\n          ) : null}\n          {attribute?.type === 'dynamiczone' ? (\n            <Flex\n              paddingTop={3}\n              paddingRight={3}\n              paddingBottom={3}\n              paddingLeft={0}\n              alignItems=\"flex-start\"\n              gap={2}\n              width=\"100%\"\n            >\n              {attribute?.components.map((uid) => (\n                <ComponentLink\n                  // used to stop the edit form from appearing when we click here.\n                  onClick={(e) => e.stopPropagation()}\n                  key={uid}\n                  to={`../components/${uid}/configurations/edit`}\n                >\n                  <ComponentIcon icon={components[uid].settings.icon} />\n                  <Typography fontSize={1} textColor=\"neutral600\" fontWeight=\"bold\">\n                    {components[uid].settings.displayName}\n                  </Typography>\n                </ComponentLink>\n              ))}\n            </Flex>\n          ) : null}\n        </Flex>\n      </Flex>\n      {value.name !== TEMP_FIELD_NAME && (\n        <EditFieldForm attribute={attribute} name={name} onClose={() => setIsModalOpen(false)} />\n      )}\n    </Modal.Root>\n  );\n};\n\nconst DragButton = styled<IconButtonComponent<'span'>>(IconButton)`\n  height: unset;\n  align-self: stretch;\n  display: flex;\n  align-items: center;\n  padding: 0;\n  border: none;\n  background-color: transparent;\n  border-radius: 0px;\n  border-right: 1px solid ${({ theme }) => theme.colors.neutral150};\n  cursor: all-scroll;\n\n  svg {\n    width: 1.2rem;\n    height: 1.2rem;\n  }\n`;\n\nconst ComponentLink = styled(NavLink)`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: ${({ theme }) => theme.spaces[1]};\n  padding: ${(props) => props.theme.spaces[2]};\n  border: 1px solid ${({ theme }) => theme.colors.neutral200};\n  background: ${({ theme }) => theme.colors.neutral0};\n  width: 14rem;\n  border-radius: ${({ theme }) => theme.borderRadius};\n  text-decoration: none;\n\n  &:focus,\n  &:hover {\n    ${({ theme }) => `\n      background-color: ${theme.colors.primary100};\n      border-color: ${theme.colors.primary200};\n\n      ${Typography} {\n          color: ${theme.colors.primary600};\n      }\n    `}\n\n    /* > ComponentIcon */\n    > div:first-child {\n      background: ${({ theme }) => theme.colors.primary200};\n      color: ${({ theme }) => theme.colors.primary600};\n\n      svg {\n        path {\n          fill: ${({ theme }) => theme.colors.primary600};\n        }\n      }\n    }\n  }\n`;\n\nexport { Fields, TEMP_FIELD_NAME };\nexport type { FieldsProps };\n", "import * as React from 'react';\n\nimport {\n  Form,\n  FormProps,\n  useForm,\n  InputRenderer,\n  BackButton,\n  Layouts,\n} from '@strapi/admin/strapi-admin';\nimport { Button, Divider, Flex, Grid, Main, Typography } from '@strapi/design-system';\nimport { generateNKeysBetween } from 'fractional-indexing';\nimport pipe from 'lodash/fp/pipe';\nimport { useIntl } from 'react-intl';\n\nimport { ATTRIBUTE_TYPES_THAT_CANNOT_BE_MAIN_FIELD } from '../../constants/attributes';\nimport { capitalise } from '../../utils/strings';\nimport { getTranslation } from '../../utils/translations';\n\nimport { Fields, FieldsProps, TEMP_FIELD_NAME } from './Fields';\n\nimport type { EditFieldLayout, EditLayout } from '../../hooks/useDocumentLayout';\n\n/* -------------------------------------------------------------------------------------------------\n * ConfigurationForm\n * -----------------------------------------------------------------------------------------------*/\n\ninterface ConfigurationFormProps extends Pick<FieldsProps, 'attributes' | 'fieldSizes'> {\n  layout: EditLayout;\n  onSubmit: FormProps<ConfigurationFormData>['onSubmit'];\n}\n\n/**\n * Every key in EditFieldLayout is turned to optional never and then we overwrite the ones we are using.\n */\n\ntype EditFieldSpacerLayout = {\n  [key in keyof Omit<EditFieldLayout, 'name' | 'size'>]?: never;\n} & {\n  description?: never;\n  editable?: never;\n  name: '_TEMP_';\n  size: number;\n  __temp_key__: string;\n};\n\ninterface ConfigurationFormData extends Pick<EditLayout, 'settings'> {\n  layout: Array<{\n    __temp_key__: string;\n    children: Array<\n      | (Pick<EditFieldLayout, 'label' | 'size' | 'name' | 'placeholder' | 'mainField'> & {\n          description: EditFieldLayout['hint'];\n          editable: EditFieldLayout['disabled'];\n          __temp_key__: string;\n        })\n      | EditFieldSpacerLayout\n    >;\n  }>;\n}\n\nconst ConfigurationForm = ({\n  attributes,\n  fieldSizes,\n  layout: editLayout,\n  onSubmit,\n}: ConfigurationFormProps) => {\n  const { components, settings, layout, metadatas } = editLayout;\n\n  const { formatMessage } = useIntl();\n\n  const initialValues: ConfigurationFormData = React.useMemo(() => {\n    const transformations = pipe(\n      flattenPanels,\n      replaceMainFieldWithNameOnly,\n      extractMetadata,\n      addTmpSpaceToLayout,\n      addTmpKeysToLayout\n    );\n\n    return {\n      layout: transformations(layout),\n      settings,\n    };\n  }, [layout, settings]);\n\n  return (\n    <Layouts.Root>\n      <Main>\n        <Form initialValues={initialValues} onSubmit={onSubmit} method=\"PUT\">\n          <Header name={settings.displayName ?? ''} />\n          <Layouts.Content>\n            <Flex\n              alignItems=\"stretch\"\n              background=\"neutral0\"\n              direction=\"column\"\n              gap={6}\n              hasRadius\n              shadow=\"tableShadow\"\n              paddingTop={6}\n              paddingBottom={6}\n              paddingLeft={7}\n              paddingRight={7}\n            >\n              <Typography variant=\"delta\" tag=\"h2\">\n                {formatMessage({\n                  id: getTranslation('containers.SettingPage.settings'),\n                  defaultMessage: 'Settings',\n                })}\n              </Typography>\n              <Grid.Root>\n                <Grid.Item col={6} s={12} direction=\"column\" alignItems=\"stretch\">\n                  <InputRenderer\n                    type=\"enumeration\"\n                    label={formatMessage({\n                      id: getTranslation('containers.SettingPage.editSettings.entry.title'),\n                      defaultMessage: 'Entry title',\n                    })}\n                    hint={formatMessage({\n                      id: getTranslation(\n                        'containers.SettingPage.editSettings.entry.title.description'\n                      ),\n                      defaultMessage: 'Set the display field of your entry',\n                    })}\n                    name=\"settings.mainField\"\n                    options={Object.entries(attributes).reduce<\n                      Array<{ label: string; value: string }>\n                    >((acc, [key, attribute]) => {\n                      if (!attribute) {\n                        return acc;\n                      }\n\n                      /**\n                       * Create the list of attributes from the schema as to which can\n                       * be our `mainField` and dictate the display name of the schema\n                       * we're editing.\n                       */\n                      if (!ATTRIBUTE_TYPES_THAT_CANNOT_BE_MAIN_FIELD.includes(attribute.type)) {\n                        acc.push({\n                          label: key,\n                          value: key,\n                        });\n                      }\n\n                      return acc;\n                    }, [])}\n                  />\n                </Grid.Item>\n                <Grid.Item\n                  paddingTop={6}\n                  paddingBottom={6}\n                  col={12}\n                  s={12}\n                  direction=\"column\"\n                  alignItems=\"stretch\"\n                >\n                  <Divider />\n                </Grid.Item>\n                <Grid.Item col={12} s={12} direction=\"column\" alignItems=\"stretch\">\n                  <Typography variant=\"delta\" tag=\"h3\">\n                    {formatMessage({\n                      id: getTranslation('containers.SettingPage.view'),\n                      defaultMessage: 'View',\n                    })}\n                  </Typography>\n                </Grid.Item>\n                <Grid.Item col={12} s={12} direction=\"column\" alignItems=\"stretch\">\n                  <Fields\n                    attributes={attributes}\n                    components={components}\n                    fieldSizes={fieldSizes}\n                    metadatas={metadatas}\n                  />\n                </Grid.Item>\n              </Grid.Root>\n            </Flex>\n          </Layouts.Content>\n        </Form>\n      </Main>\n    </Layouts.Root>\n  );\n};\n\n/**\n * @internal\n * @description Panels don't exist in the layout, so we flatten by one.\n */\nconst flattenPanels = (layout: EditLayout['layout']): EditLayout['layout'][number] =>\n  layout.flat(1);\n\n/**\n * @internal\n * @description We don't need the mainField object in the layout, we only need the name.\n */\nconst replaceMainFieldWithNameOnly = (layout: EditLayout['layout'][number]) =>\n  layout.map((row) =>\n    row.map((field) => ({\n      ...field,\n      mainField: field.mainField?.name,\n    }))\n  );\n\n/**\n * @internal\n * @description We extract the metadata values from the field layout, because these are editable by the user.\n */\nconst extractMetadata = (\n  layout: EditLayout['layout'][number]\n): Array<Exclude<ConfigurationFormData['layout'], { name: '_TEMP_' }>[number]['children']> => {\n  return layout.map((row) =>\n    row.map(({ label, disabled, hint, placeholder, size, name, mainField }) => ({\n      label,\n      editable: !disabled,\n      description: hint,\n      mainField,\n      placeholder,\n      size,\n      name,\n      __temp_key__: '',\n    }))\n  );\n};\n\n/**\n * @internal\n * @description Each row of the layout has a max size of 12 (based on bootstrap grid system)\n * So in order to offer a better drop zone we add the _TEMP_ div to complete the remaining substract (12 - existing)\n */\nconst addTmpSpaceToLayout = (\n  layout: ReturnType<typeof extractMetadata>\n): Array<ConfigurationFormData['layout'][number]['children']> => [\n  ...layout.map((row) => {\n    const totalSpaceTaken = row.reduce((acc, field) => acc + field.size, 0);\n\n    if (totalSpaceTaken < 12) {\n      return [\n        ...row,\n        {\n          name: TEMP_FIELD_NAME,\n          size: 12 - totalSpaceTaken,\n          __temp_key__: '',\n        } satisfies EditFieldSpacerLayout,\n      ];\n    }\n\n    return row;\n  }),\n];\n\n/**\n * @internal\n * @description At this point of the transformations we have Field[][], but each row for the form should have a __temp_key__\n * applied. This means we need to change it so `Field` is nested under the children property.\n */\nconst addTmpKeysToLayout = (\n  layout: ReturnType<typeof addTmpSpaceToLayout>\n): ConfigurationFormData['layout'] => {\n  const keys = generateNKeysBetween(undefined, undefined, layout.length);\n\n  return layout.map((row, rowIndex) => {\n    const fieldKeys = generateNKeysBetween(undefined, undefined, row.length);\n\n    return {\n      __temp_key__: keys[rowIndex],\n      children: row.map((field, fieldIndex) => {\n        return {\n          ...field,\n          __temp_key__: fieldKeys[fieldIndex],\n        };\n      }),\n    };\n  });\n};\n\n/* -------------------------------------------------------------------------------------------------\n * Header\n * -----------------------------------------------------------------------------------------------*/\n\ninterface HeaderProps {\n  name: string;\n}\n\nconst Header = ({ name }: HeaderProps) => {\n  const { formatMessage } = useIntl();\n  const modified = useForm('Header', (state) => state.modified);\n  const isSubmitting = useForm('Header', (state) => state.isSubmitting);\n\n  return (\n    <Layouts.Header\n      title={formatMessage(\n        {\n          id: getTranslation('components.SettingsViewWrapper.pluginHeader.title'),\n          defaultMessage: `Configure the view - {name}`,\n        },\n        { name: capitalise(name) }\n      )}\n      subtitle={formatMessage({\n        id: getTranslation('components.SettingsViewWrapper.pluginHeader.description.edit-settings'),\n        defaultMessage: 'Customize how the edit view will look like.',\n      })}\n      navigationAction={<BackButton />}\n      primaryAction={\n        <Button disabled={!modified} loading={isSubmitting} type=\"submit\">\n          {formatMessage({ id: 'global.save', defaultMessage: 'Save' })}\n        </Button>\n      }\n    />\n  );\n};\n\nexport { ConfigurationForm };\nexport type { ConfigurationFormProps, ConfigurationFormData, EditFieldSpacerLayout };\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0BA,IAAM,eAAmBA,QAAO,EAAE,MAAM;EACtC,OAAWA,QAAS,EAAA,SAAA,EAAW,SAAS;EACxC,aAAiBA,QAAO;EACxB,UAAc,OAAQ;EACtB,MAAUA,QAAO,EAAE,SAAS;AAC9B,CAAC;AAYD,IAAM,gBAAgB,CAAC,EAAE,WAAW,MAAM,QAAA,MAAkC;AACpE,QAAA,EAAE,cAAc,IAAI,QAAQ;AAC5B,QAAA,EAAE,mBAAmB,IAAI,gBAAgB;AAE/C,QAAM,EAAE,OAAO,SAAA,IACb,SAAsE,IAAI;AAE5E,QAAM,EAAE,MAAM,iBAAiB,IAAI,uBAAuB,QAAW;IACnE,kBAAkB,CAAC,QAAQ;AACzB,WAAI,uCAAW,UAAS,cAAc,CAAC,IAAI,MAAM;AACxC,eAAA,EAAE,MAAM,CAAA,EAAG;MAAA;AAGpB,UAAI,iBAAiB,aAAa,OAAO,UAAU,gBAAgB,UAAU;AACrE,cAAA,eAAe,IAAI,KAAK,aAAa;UACzC,CAAC,WAAW,OAAO,QAAQ,UAAU;QACvC;AAEA,YAAI,cAAc;AACT,iBAAA;YACL,MAAM,OAAO,QAAQ,aAAa,UAAU,EAAE,OAE5C,CAAC,KAAK,CAAC,KAAKC,UAAS,MAAM;AAM3B,kBAAI,CAAC,0CAA0C,SAASA,WAAU,IAAI,GAAG;AACvE,oBAAI,KAAK;kBACP,OAAO;kBACP,OAAO;gBAAA,CACR;cAAA;AAGI,qBAAA;YAAA,GACN,CAAE,CAAA;UACP;QAAA;MACF;AAGK,aAAA,EAAE,MAAM,CAAA,EAAG;IACpB;IACA,OAAM,uCAAW,UAAS;EAAA,CAC3B;AAED,MAAI,CAAC,SAAS,MAAM,SAAS,mBAAmB,CAAC,WAAW;AAElD,YAAA;MACN;IACF;AAEmB,uBAAA;MACjB,SAAS,cAAc;QACrB,IAAI;QACJ,gBAAgB;MAAA,CACjB;MACD,MAAM;IAAA,CACP;AAEM,WAAA;EAAA;AAIP,aAAA,wBAAC,MAAM,SAAN,EACC,cAAA;IAAC;IAAA;MACC,QAAO;MACP,eAAe;MACf,kBAAkB;MAClB,UAAU,CAAC,SAAS;AAClB,iBAAS,MAAM,IAAI;AACX,gBAAA;MACV;MAEA,UAAA;YAAA,wBAAC,MAAM,QAAN,EACC,cAAC,yBAAA,MAAA,EAAK,KAAK,GACT,UAAA;cAAC,wBAAA,eAAA,EAAc,MAAM,UAAU,KAAM,CAAA;cACrC,wBAAC,MAAM,OAAN,EACE,UAAA;YACC;cACE,IAAI;cACJ,gBAAgB;YAClB;YACA,EAAE,WAAW,WAAW,MAAM,IAAI,EAAE;UAAA,EAExC,CAAA;QAAA,EAAA,CACF,EACF,CAAA;YACA,wBAAC,MAAM,MAAN,EACC,cAAA,wBAAC,KAAK,MAAL,EAAU,KAAK,GACb,UAAA;UACC;YACE,MAAM;YACN,OAAO,cAAc;cACnB,IAAI,eAAe,2CAA2C;cAC9D,gBAAgB;YAAA,CACjB;YACD,MAAM;YACN,MAAM;UACR;UACA;YACE,MAAM;YACN,OAAO,cAAc;cACnB,IAAI,eAAe,iDAAiD;cACpE,gBAAgB;YAAA,CACjB;YACD,MAAM;YACN,MAAM;UACR;UACA;YACE,MAAM;YACN,OAAO,cAAc;cACnB,IAAI,eAAe,iDAAiD;cACpE,gBAAgB;YAAA,CACjB;YACD,MAAM;YACN,MAAM;UACR;UACA;YACE,MAAM;YACN,OAAO,cAAc;cACnB,IAAI,eAAe,8CAA8C;cACjE,gBAAgB;YAAA,CACjB;YACD,MAAM;YACN,MAAM;UACR;UACA;YACE,MAAM;YACN,OAAO,cAAc;cACnB,IAAI,eAAe,+CAA+C;cAClE,gBAAgB;YAAA,CACjB;YACD,MAAM,cAAc;cAClB,IAAI;gBACF;cACF;cACA,gBAAgB;YAAA,CACjB;YACD,MAAM;YACN,SAAS;YACT,MAAM;UACR;UACA;YACE,MAAM;YACN,OAAO,cAAc;cACnB,IAAI,eAAe,6CAA6C;cAChE,gBAAgB;YAAA,CACjB;YACD,MAAM;YACN,SAAS;cACP,EAAE,OAAO,KAAK,OAAO,MAAM;cAC3B,EAAE,OAAO,KAAK,OAAO,MAAM;cAC3B,EAAE,OAAO,KAAK,OAAO,MAAM;cAC3B,EAAE,OAAO,MAAM,OAAO,OAAO;YAC/B;YACA,MAAM;UAAA;QACR,EAEC,OAAO,iCAAiC,UAAU,IAAI,CAAC,EACvD,IAAI,CAAC,EAAE,MAAM,GAAG,MAAA,UACd,wBAAA,KAAK,MAAL,EAA2B,KAAK,MAAM,WAAU,UAAS,YAAW,WACnE,cAAA,wBAAC,uBAAe,EAAA,GAAG,MAAA,CAAO,EADZ,GAAA,MAAM,IAEtB,CACD,EACL,CAAA,EAAA,CACF;YACA,yBAAC,MAAM,QAAN,EACC,UAAA;cAAA,wBAAC,MAAM,OAAN,EACC,cAAA,wBAAC,QAAA,EAAO,SAAQ,YACb,UAAc,cAAA,EAAE,IAAI,gCAAgC,gBAAgB,SAAU,CAAA,EACjF,CAAA,EAAA,CACF;cACA,wBAAC,QAAO,EAAA,MAAK,UACV,UAAA,cAAc,EAAE,IAAI,iBAAiB,gBAAgB,SAAU,CAAA,EAClE,CAAA;QAAA,EACF,CAAA;MAAA;IAAA;EAAA,EAAA,CAEJ;AAEJ;AAOA,IAAM,mCAAmC,CAAC,SAAgC,CAAC,UAAsB;AAC/F,UAAQ,MAAM;IACZ,KAAK;IACL,KAAK;AACH,aAAO,MAAM,SAAS,UAAU,MAAM,SAAS;IACjD,KAAK;IACL,KAAK;AACH,aAAO,MAAM,SAAS,iBAAiB,MAAM,SAAS;IACxD,KAAK;IACL,KAAK;AACH,aAAO,MAAM,SAAS,WAAW,MAAM,SAAS;IAClD,KAAK;AACH,aAAO,MAAM,SAAS,iBAAiB,MAAM,SAAS,eAAe,MAAM,SAAS;IACtF,KAAK;AACI,aAAA;IACT;AACE,aAAO,MAAM,SAAS;EAAA;AAE5B;ACzMA,IAAM,SAAS,CAAC,EAAE,YAAY,YAAY,YAAY,YAAY,CAAA,EAAA,MAAsB;AAChF,QAAA,EAAE,cAAc,IAAI,QAAQ;AAElC,QAAM,SAAS;IACb;IACA,CAAC,UAAU,MAAM,OAAO,UAAU,CAAA;EACpC;AACA,QAAM,WAAW,QAAQ,UAAU,CAAC,UAAU,MAAM,QAAQ;AAC5D,QAAM,cAAc,QAAQ,UAAU,CAAC,UAAU,MAAM,WAAW;AAClE,QAAM,iBAAiB,QAAQ,UAAU,CAAC,UAAU,MAAM,cAAc;AAExE,QAAM,iBAAiB,OAAO,IAAI,CAAC,QAAQ,IAAI,SAAS,IAAI,CAAC,UAAU,MAAM,IAAI,CAAC,EAAE,KAAK;AAOnF,QAAA,kBAAkB,OAAO,QAAQ,SAAS,EAAE,OAAgB,CAAC,KAAK,YAAY;;AAClF,UAAM,CAAC,MAAM,EAAE,SAAS,GAAG,MAAA,CAAO,IAAI;AAEtC,QAAI,CAAC,eAAe,SAAS,IAAI,KAAK,YAAY,MAAM;AAChD,YAAA,QAAO,gBAAW,IAAI,MAAf,mBAAkB;AAC/B,YAAM,OAAO,OAAO,WAAW,IAAI,IAAI;AAEvC,UAAI,KAAK;QACP,GAAG;QACH,OAAO,MAAM,SAAS;QACtB;QACA;MAAA,CACD;IAAA;AAGI,WAAA;EACT,GAAG,CAAA,CAAE;AAEC,QAAA,kBAA6C,CACjD,CAAC,aAAa,aAAa,GAC3B,CAAC,iBAAiB,iBAAiB,MAChC;AAMG,UAAA,YAAY,gBAAgB,MAAM;AAKlC,UAAA,CAAC,KAAK,IAAI,UAAU,eAAe,EAAE,SAAS,OAAO,mBAAmB,CAAC;AAE/E,QAAI,CAAC,SAAS,MAAM,SAAS,iBAAiB;AAC5C;IAAA;AAGI,UAAA,SAAS,UAAU,WAAW,EAAE;AACtC,UAAM,CAAC,WAAW,IAAIC,sBAAqB,QAAQ,GAAG,mBAAmB,aAAa;AAY/E,WAAA,OAAO,eAAe,GAAG,EAAE,GAAG,OAAO,cAAc,YAAA,CAAa;AAEvE,QAAI,UAAU,WAAW,EAAE,SAAS,OAAO,CAAC,KAAK,SAAS,MAAM,KAAK,MAAM,CAAC,IAAI,IAAI;AAClF,YAAM,mBAAmB;QACvB,UAAU,WAAW,EAAE,SAAS,OAAO,CAACC,WAAUA,OAAM,SAAS,eAAe;MAClF;AAEA,YAAM,UAAUD;QACd;QACA,iBAAiB;QACjB;QACA;MACF;AAEU,gBAAA;QACR;QACA;QACA,GAAG,iBAAiB,IAAI,CAAC,KAAK,WAAW;UACvC,cAAc,QAAQ,KAAK;UAC3B,UAAU;QAAA,EACV;MACJ;IAAA;AAUF,UAAM,uBAAuB,UAC1B,IAAI,CAAC,SAAS;MACb,GAAG;MACH,UAAU,IAAI,SAAS,OAAO,CAACC,WAAUA,OAAM,SAAS,eAAe;IACvE,EAAA,EACD,OAAO,CAAC,QAAQ,IAAI,SAAS,SAAS,CAAC,EACvC,IAAI,CAAC,QAAQ;;AACN,YAAA,kBAAkB,IAAI,SAAS,OAAO,CAAC,KAAK,SAAS,MAAM,KAAK,MAAM,CAAC;AAE7E,UAAI,kBAAkB,IAAI;AAClB,cAAA,CAAC,SAAS,IAAIC;WAClB,SAAI,SAAS,GAAG,EAAE,MAAlB,mBAAqB;UACrB;UACA;QACF;AAEO,eAAA;UACL,GAAG;UACH,UAAU;YACR,GAAG,IAAI;YACP;cACE,MAAM;cACN,MAAM,KAAK;cACX,cAAc;YAAA;UAChB;QAEJ;MAAA;AAGK,aAAA;IAAA,CACR;AAEH,aAAS,UAAU,oBAAoB;EACzC;AAEA,QAAM,oBACJ,CAAC,UAAkB,eACnB,MAAM;AACJ,QAAI,OAAO,QAAQ,EAAE,SAAS,WAAW,GAAG;AAC1C,qBAAe,UAAU,QAAQ;IAAA,OAC5B;AACI,eAAA,UAAU,QAAQ,aAAa;QACtC,GAAG,OAAO,QAAQ,EAAE,SAAS,MAAM,GAAG,UAAU;QAChD,GAAG,OAAO,QAAQ,EAAE,SAAS,MAAM,aAAa,CAAC;MAAA,CAClD;IAAA;EAEL;AAEI,QAAA,iBAAiB,CAAC,UAAiB,MAAM;AAC7C,gBAAY,UAAU,EAAE,UAAU,CAAC,KAAK,EAAA,CAAG;EAC7C;AAGE,aAAA,yBAAC,MAAA,EAAK,YAAY,GAAG,WAAU,UAAS,YAAW,WAAU,KAAK,GAChE,UAAA;QAAA,yBAAC,MAAA,EAAK,YAAW,cAAa,WAAU,UAAS,gBAAe,iBAC9D,UAAA;UAAC,wBAAA,YAAA,EAAW,YAAW,QACpB,UAAc,cAAA;QACb,IAAI,eAAe,iCAAiC;QACpD,gBAAgB;MACjB,CAAA,EAAA,CACH;UAAA,wBACC,YAAW,EAAA,SAAQ,MAAK,WAAU,cAChC,UAAc,cAAA;QACb,IAAI;QACJ,gBAAgB;MAAA,CACjB,EACH,CAAA;IAAA,EAAA,CACF;QAAA,wBACC,KAAI,EAAA,SAAS,GAAG,WAAS,MAAC,aAAY,UAAS,aAAY,OAAM,aAAY,cAC5E,cAAA,yBAAC,MAAK,EAAA,WAAU,UAAS,YAAW,WAAU,KAAK,GAChD,UAAA;MAAA,OAAO,IAAI,CAAC,KAAK,iBACf,wBAAA,KAAK,MAAL,EAAU,KAAK,GACb,UAAI,IAAA,SAAS,IAAI,CAAC,EAAE,MAAM,GAAG,MAAA,GAAS,mBACpC,wBAAA,KAAK,MAAL,EAA2B,KAAK,MAAM,WAAU,UAAS,YAAW,WACnE,cAAA;QAAC;QAAA;UACC,WAAW,WAAW,MAAM,IAAI;UAChC;UACA,OAAO,CAAC,UAAU,UAAU;UAC5B,MAAM,UAAU,QAAQ,aAAa,UAAU;UAC/C,aAAa;UACb,eAAe,kBAAkB,UAAU,UAAU;QAAA;MAAA,EAAA,GAPzC,MAAM,IAStB,CACD,EAZqB,GAAA,IAAI,YAa5B,CACD;UACD,yBAAC,KAAK,MAAL,EACC,UAAA;YAAA;UAAC,KAAK;UAAL;YACC,eAAA,wBAAY,eAAK,CAAA,CAAA;YACjB,SAAS;YACT,UAAU,gBAAgB,WAAW;YACrC,WAAS;YACT,SAAQ;YAEP,UAAc,cAAA;cACb,IAAI,eAAe,kCAAkC;cACrD,gBAAgB;YACjB,CAAA;UAAA;QACH;YACA,wBAAC,KAAK,SAAL,EACE,UAAA,gBAAgB,IAAI,CAAC,cACnB,wBAAA,KAAK,MAAL,EAA2B,UAAU,eAAe,KAAK,GACvD,UAAA,MAAM,MAAA,GADO,MAAM,IAEtB,CACD,EACH,CAAA;MAAA,EACF,CAAA;IAAA,EAAA,CACF,EACF,CAAA;EAAA,EAAA,CACF;AAEJ;AAQA,IAAMF,wBAAuB,CAC3B,OACA,OACA,SACA,WACG;;AACG,QAAA,WAAW,UAAU,UAAS,WAAM,SAAS,CAAC,MAAhB,mBAAmB,gBAAe,WAAM,MAAM,MAAZ,mBAAe;AAC/E,QAAA,SAAS,UAAU,UAAS,WAAM,MAAM,MAAZ,mBAAe,gBAAe,WAAM,SAAS,CAAC,MAAhB,mBAAmB;AAE5E,SAAAE,qBAAyB,UAAU,QAAQ,KAAK;AACzD;AAOA,IAAM,aAAa,CAAC,UAAuB;AACzC,QAAM,SAA6B,CAAC;AACpC,MAAI,OAAoB,CAAC;AAEnB,QAAA,OAAO,CAAC,KAAK,UAAU;AACvB,QAAA,MAAM,MAAM,OAAO,IAAI;AACzB,aAAO,KAAK,IAAI;AAChB,aAAO,CAAC,KAAK;AACb,aAAO,MAAM;IAAA,OACR;AACL,WAAK,KAAK,KAAK;AACf,aAAO,MAAM,MAAM;IAAA;EAAA,GAEpB,CAAC;AAEA,MAAA,KAAK,SAAS,GAAG;AACnB,WAAO,KAAK,IAAI;EAAA;AAGX,SAAA;AACT;AAaA,IAAM,kBAAkB;AAMxB,IAAM,QAAQ,CAAC,EAAE,WAAW,YAAY,MAAM,OAAO,aAAa,cAAA,MAAgC;AAChG,QAAM,CAAC,aAAa,cAAc,IAAU,eAAS,KAAK;AACpD,QAAA,EAAE,cAAc,IAAI,QAAQ;AAElC,QAAM,EAAE,MAAA,IAAU,SAAoB,IAAI;AAEpC,QAAA,CAAC,EAAE,WAAc,GAAA,WAAW,SAAS,SAAS,cAAc,IAAI,eAEpE,MAAM;IACN,iBAAiB;IACjB,MAAM,UAAU;IAChB,MAAM,EAAE,OAAO,OAAO,+BAAO,OAAO,KAAK;IACzC;IACA,YAAY;EAAA,CACb;AAED,EAAM,gBAAU,MAAM;AACpB,mBAAe,cAAc,GAAG,EAAE,sBAAsB,MAAA,CAAO;EAAA,GAC9D,CAAC,cAAc,CAAC;AAEb,QAAA,eAAe,gBAAiC,SAAS,SAAS;AAElE,QAAA,oBAAgE,CAAC,MAAM;AAC3E,MAAE,eAAe;AACjB,MAAE,gBAAgB;AAClB,kBAAc,CAAC;EACjB;AAEM,QAAA,kBAA8D,CAAC,MAAM;AACzE,MAAE,eAAe;AACjB,MAAE,gBAAgB;AAClB,mBAAe,IAAI;EACrB;AAEM,QAAA,WAAW,gBAAiC,SAAS,SAAS;AAEpE,MAAI,CAAC,OAAO;AACH,WAAA;EAAA;AAGL,MAAA,MAAM,SAAS,iBAAiB;AAClC,eAAQ,wBAAA,MAAA,EAAK,KAAI,QAAO,QAAO,QAAO,OAAO,EAAE,SAAS,EAAK,GAAA,KAAK,SAAU,CAAA;EAAA;AAG9E,aAAA,yBACG,MAAM,MAAN,EAAW,MAAM,aAAa,cAAc,gBAC3C,UAAA;QAAA;MAAC;MAAA;QACC,aAAY;QACZ,YAAW;QACX,WAAS;QACT,OAAO,EAAE,SAAS,aAAa,MAAM,EAAE;QACvC,KAAK;QACL,KAAK;QACL,QAAO;QACP,SAAS,MAAM;AACb,yBAAe,IAAI;QACrB;QAEA,UAAA;cAAA;YAAC;YAAA;cACC,KAAI;cACJ,aAAa;cACb,OAAO;gBACL;kBACE,IAAI,eAAe,qCAAqC;kBACxD,gBAAgB;gBAClB;gBACA,EAAE,MAAM,MAAM,MAAM;cACtB;cACA,SAAS,CAAC,MAAM,EAAE,gBAAgB;cAClC,KAAK;cAEL,cAAA,wBAAC,eAAK,CAAA,CAAA;YAAA;UACR;cACA,yBAAC,MAAA,EAAK,WAAU,UAAS,YAAW,cAAa,MAAM,GAAG,UAAS,UACjE,UAAA;gBAAA,yBAAC,MAAA,EAAK,KAAK,GAAG,gBAAe,iBAAgB,OAAM,QACjD,UAAA;kBAAA,wBAAC,YAAA,EAAW,UAAQ,MAAC,YAAW,QAC7B,UAAA,MAAM,MAAA,CACT;kBAAA,yBACC,MACC,EAAA,UAAA;oBAAA;kBAAC;kBAAA;oBACC,MAAK;oBACL,SAAQ;oBACR,YAAW;oBACX,SAAS;oBACT,aAAa;oBACb,OAAO;sBACL;wBACE,IAAI,eAAe,qCAAqC;wBACxD,gBAAgB;sBAClB;sBACA,EAAE,MAAM,MAAM,MAAM;oBACtB;oBAEA,cAAA,wBAAC,eAAO,CAAA,CAAA;kBAAA;gBACV;oBACA;kBAAC;kBAAA;oBACC,MAAK;oBACL,SAAQ;oBACR,SAAS;oBACT,YAAW;oBACX,aAAa;oBACb,OAAO;sBACL;wBACE,IAAI,eAAe,uCAAuC;wBAC1D,gBAAgB;sBAClB;sBACA,EAAE,MAAM,MAAM,MAAM;oBACtB;oBAEA,cAAA,wBAAC,eAAM,CAAA,CAAA;kBAAA;gBAAA;cACT,EACF,CAAA;YAAA,EAAA,CACF;aACC,uCAAW,UAAS,kBACnB;cAAC;cAAA;gBACC,YAAY;gBACZ,cAAc;gBACd,eAAe;gBACf,aAAa;gBACb,YAAW;gBACX,WAAU;gBACV,KAAK;gBACL,OAAM;gBAEN,UAAA;sBAAC,wBAAA,KAAK,MAAL,EAAU,KAAK,GAAG,OAAM,QACtB,UAAW,WAAA,UAAU,SAAS,EAAE,OAAO;oBAAI,CAAC,QAC3C,IAAI,IAAI,CAAC,EAAE,MAAM,GAAG,MAAA,UACjB,wBAAA,KAAK,MAAL,EAA2B,KAAK,MAAM,WAAU,UAAS,YAAW,WACnE,cAAA;sBAAC;sBAAA;wBACC,YAAW;wBACX,YAAW;wBACX,YAAY;wBACZ,eAAe;wBACf,aAAa;wBACb,cAAc;wBACd,WAAS;wBACT,aAAY;wBAEZ,cAAC,wBAAA,YAAA,EAAW,WAAU,cAAc,UAAA,MAAM,KAAK,CAAA;sBAAA;oBAAA,EACjD,GAZc,MAAM,IAatB,CACD;kBAAA,EAAA,CAEL;sBACA;oBAAC;oBAAA;sBAEC,SAAS,CAAC,MAAM,EAAE,gBAAgB;sBAClC,eAAA,wBAAY,eAAI,CAAA,CAAA;sBAChB,KAAK;sBACL,IAAI,iBAAiB,UAAU,SAAS;sBAEvC,UAAc,cAAA;wBACb,IAAI,eAAe,4CAA4C;wBAC/D,gBAAgB;sBACjB,CAAA;oBAAA;kBAAA;gBACH;cAAA;YAAA,IAEA;aACH,uCAAW,UAAS,oBACnB;cAAC;cAAA;gBACC,YAAY;gBACZ,cAAc;gBACd,eAAe;gBACf,aAAa;gBACb,YAAW;gBACX,KAAK;gBACL,OAAM;gBAEL,UAAW,uCAAA,WAAW,IAAI,CAAC,YAC1B;kBAAC;kBAAA;oBAEC,SAAS,CAAC,MAAM,EAAE,gBAAgB;oBAElC,IAAI,iBAAiB,GAAG;oBAExB,UAAA;0BAAA,wBAAC,eAAA,EAAc,MAAM,WAAW,GAAG,EAAE,SAAS,KAAA,CAAM;0BACnD,wBAAA,YAAA,EAAW,UAAU,GAAG,WAAU,cAAa,YAAW,QACxD,UAAW,WAAA,GAAG,EAAE,SAAS,YAC5B,CAAA;oBAAA;kBAAA;kBANK;gBAQR;cAAA;YAAA,IAED;UAAA,EACN,CAAA;QAAA;MAAA;IACF;IACC,MAAM,SAAS,uBACb,wBAAA,eAAA,EAAc,WAAsB,MAAY,SAAS,MAAM,eAAe,KAAK,EAAG,CAAA;EAAA,EAAA,CAE3F;AAEJ;AAEA,IAAM,aAAa,GAAoC,UAAU;;;;;;;;;4BASrC,CAAC,EAAE,MAAA,MAAY,MAAM,OAAO,UAAU;;;;;;;;AASlE,IAAM,gBAAgB,GAAO,OAAO;;;;SAI3B,CAAC,EAAE,MAAA,MAAY,MAAM,OAAO,CAAC,CAAC;aAC1B,CAAC,UAAU,MAAM,MAAM,OAAO,CAAC,CAAC;sBACvB,CAAC,EAAE,MAAA,MAAY,MAAM,OAAO,UAAU;gBAC5C,CAAC,EAAE,MAAA,MAAY,MAAM,OAAO,QAAQ;;mBAEjC,CAAC,EAAE,MAAA,MAAY,MAAM,YAAY;;;;;MAK9C,CAAC,EAAE,MAAA,MAAY;0BACK,MAAM,OAAO,UAAU;sBAC3B,MAAM,OAAO,UAAU;;QAErC,UAAU;mBACC,MAAM,OAAO,UAAU;;KAErC;;;;oBAIe,CAAC,EAAE,MAAA,MAAY,MAAM,OAAO,UAAU;eAC3C,CAAC,EAAE,MAAA,MAAY,MAAM,OAAO,UAAU;;;;kBAInC,CAAC,EAAE,MAAA,MAAY,MAAM,OAAO,UAAU;;;;;;ACtfxD,IAAM,oBAAoB,CAAC;EACzB;EACA;EACA,QAAQ;EACR;AACF,MAA8B;AAC5B,QAAM,EAAE,YAAY,UAAU,QAAQ,UAAc,IAAA;AAE9C,QAAA,EAAE,cAAc,IAAI,QAAQ;AAE5B,QAAA,gBAA6C,cAAQ,MAAM;AAC/D,UAAM,sBAAkB,YAAAC;MACtB;MACA;MACA;MACA;MACA;IACF;AAEO,WAAA;MACL,QAAQ,gBAAgB,MAAM;MAC9B;IACF;EAAA,GACC,CAAC,QAAQ,QAAQ,CAAC;AAGnB,aAAA,wBAAC,QAAQ,MAAR,EACC,cAAA,wBAAC,MACC,EAAA,cAAA,yBAAC,MAAK,EAAA,eAA8B,UAAoB,QAAO,OAC7D,UAAA;QAAA,wBAAC,QAAO,EAAA,MAAM,SAAS,eAAe,GAAA,CAAI;QAC1C,wBAAC,QAAQ,SAAR,EACC,cAAA;MAAC;MAAA;QACC,YAAW;QACX,YAAW;QACX,WAAU;QACV,KAAK;QACL,WAAS;QACT,QAAO;QACP,YAAY;QACZ,eAAe;QACf,aAAa;QACb,cAAc;QAEd,UAAA;cAAA,wBAAC,YAAW,EAAA,SAAQ,SAAQ,KAAI,MAC7B,UAAc,cAAA;YACb,IAAI,eAAe,iCAAiC;YACpD,gBAAgB;UACjB,CAAA,EAAA,CACH;cACA,yBAAC,KAAK,MAAL,EACC,UAAA;gBAAC,wBAAA,KAAK,MAAL,EAAU,KAAK,GAAG,GAAG,IAAI,WAAU,UAAS,YAAW,WACtD,cAAA;cAAC;cAAA;gBACC,MAAK;gBACL,OAAO,cAAc;kBACnB,IAAI,eAAe,iDAAiD;kBACpE,gBAAgB;gBAAA,CACjB;gBACD,MAAM,cAAc;kBAClB,IAAI;oBACF;kBACF;kBACA,gBAAgB;gBAAA,CACjB;gBACD,MAAK;gBACL,SAAS,OAAO,QAAQ,UAAU,EAAE,OAElC,CAAC,KAAK,CAAC,KAAK,SAAS,MAAM;AAC3B,sBAAI,CAAC,WAAW;AACP,2BAAA;kBAAA;AAQT,sBAAI,CAAC,0CAA0C,SAAS,UAAU,IAAI,GAAG;AACvE,wBAAI,KAAK;sBACP,OAAO;sBACP,OAAO;oBAAA,CACR;kBAAA;AAGI,yBAAA;gBAAA,GACN,CAAE,CAAA;cAAA;YAAA,EAAA,CAET;gBACA;cAAC,KAAK;cAAL;gBACC,YAAY;gBACZ,eAAe;gBACf,KAAK;gBACL,GAAG;gBACH,WAAU;gBACV,YAAW;gBAEX,cAAA,wBAAC,SAAQ,CAAA,CAAA;cAAA;YACX;gBAAA,wBACC,KAAK,MAAL,EAAU,KAAK,IAAI,GAAG,IAAI,WAAU,UAAS,YAAW,WACvD,cAAC,wBAAA,YAAA,EAAW,SAAQ,SAAQ,KAAI,MAC7B,UAAc,cAAA;cACb,IAAI,eAAe,6BAA6B;cAChD,gBAAgB;YAAA,CACjB,EAAA,CACH,EACF,CAAA;gBACA,wBAAC,KAAK,MAAL,EAAU,KAAK,IAAI,GAAG,IAAI,WAAU,UAAS,YAAW,WACvD,cAAA;cAAC;cAAA;gBACC;gBACA;gBACA;gBACA;cAAA;YAAA,EAEJ,CAAA;UAAA,EACF,CAAA;QAAA;MAAA;IAAA,EAEJ,CAAA;EAAA,EACF,CAAA,EACF,CAAA,EAAA,CACF;AAEJ;AAMA,IAAM,gBAAgB,CAAC,WACrB,OAAO,KAAK,CAAC;AAMf,IAAM,+BAA+B,CAAC,WACpC,OAAO;EAAI,CAAC,QACV,IAAI,IAAI,CAAC,UAAA;;AAAW;MAClB,GAAG;MACH,YAAW,WAAM,cAAN,mBAAiB;IAAA;GAC5B;AACJ;AAMF,IAAM,kBAAkB,CACtB,WAC4F;AAC5F,SAAO,OAAO;IAAI,CAAC,QACjB,IAAI,IAAI,CAAC,EAAE,OAAO,UAAU,MAAM,aAAa,MAAM,MAAM,UAAA,OAAiB;MAC1E;MACA,UAAU,CAAC;MACX,aAAa;MACb;MACA;MACA;MACA;MACA,cAAc;IAAA,EACd;EACJ;AACF;AAOA,IAAM,sBAAsB,CAC1B,WAC+D;EAC/D,GAAG,OAAO,IAAI,CAAC,QAAQ;AACf,UAAA,kBAAkB,IAAI,OAAO,CAAC,KAAK,UAAU,MAAM,MAAM,MAAM,CAAC;AAEtE,QAAI,kBAAkB,IAAI;AACjB,aAAA;QACL,GAAG;QACH;UACE,MAAM;UACN,MAAM,KAAK;UACX,cAAc;QAAA;MAElB;IAAA;AAGK,WAAA;EACR,CAAA;AACH;AAOA,IAAM,qBAAqB,CACzB,WACoC;AACpC,QAAM,OAAOH,qBAAqB,QAAW,QAAW,OAAO,MAAM;AAErE,SAAO,OAAO,IAAI,CAAC,KAAK,aAAa;AACnC,UAAM,YAAYA,qBAAqB,QAAW,QAAW,IAAI,MAAM;AAEhE,WAAA;MACL,cAAc,KAAK,QAAQ;MAC3B,UAAU,IAAI,IAAI,CAAC,OAAO,eAAe;AAChC,eAAA;UACL,GAAG;UACH,cAAc,UAAU,UAAU;QACpC;MACD,CAAA;IACH;EAAA,CACD;AACH;AAUA,IAAM,SAAS,CAAC,EAAE,KAAA,MAAwB;AAClC,QAAA,EAAE,cAAc,IAAI,QAAQ;AAClC,QAAM,WAAW,QAAQ,UAAU,CAAC,UAAU,MAAM,QAAQ;AAC5D,QAAM,eAAe,QAAQ,UAAU,CAAC,UAAU,MAAM,YAAY;AAGlE,aAAA;IAAC,QAAQ;IAAR;MACC,OAAO;QACL;UACE,IAAI,eAAe,mDAAmD;UACtE,gBAAgB;QAClB;QACA,EAAE,MAAM,WAAW,IAAI,EAAE;MAC3B;MACA,UAAU,cAAc;QACtB,IAAI,eAAe,uEAAuE;QAC1F,gBAAgB;MAAA,CACjB;MACD,sBAAA,wBAAmB,YAAW,CAAA,CAAA;MAC9B,mBACG,wBAAA,QAAA,EAAO,UAAU,CAAC,UAAU,SAAS,cAAc,MAAK,UACtD,UAAA,cAAc,EAAE,IAAI,eAAe,gBAAgB,OAAA,CAAQ,EAC9D,CAAA;IAAA;EAEJ;AAEJ;",
  "names": ["create", "attribute", "generateNKeysBetween", "field", "generateNKeysBetweenImpl", "pipe"]
}
