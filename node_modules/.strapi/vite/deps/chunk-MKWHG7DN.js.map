{
  "version": 3,
  "sources": ["../../../lodash/transform.js", "../../../@strapi/admin/admin/src/pages/Settings/pages/Roles/hooks/usePermissionsDataManager.ts", "../../../@strapi/admin/admin/src/pages/Settings/pages/Roles/utils/difference.ts", "../../../@strapi/admin/admin/src/utils/arrays.ts", "../../../@strapi/admin/admin/src/pages/Settings/pages/Roles/utils/createArrayOfValues.ts", "../../../@strapi/admin/admin/src/pages/Settings/pages/Roles/utils/permissions.ts", "../../../@strapi/admin/admin/src/pages/Settings/pages/Roles/utils/forms.ts", "../../../@strapi/admin/admin/src/pages/Settings/pages/Roles/utils/layouts.ts", "../../../@strapi/admin/admin/src/pages/Settings/pages/Roles/utils/updateConditionsToFalse.ts", "../../../@strapi/admin/admin/src/pages/Settings/pages/Roles/utils/updateValues.ts", "../../../@strapi/admin/admin/src/pages/Settings/pages/Roles/utils/constants.ts", "../../../@strapi/admin/admin/src/pages/Settings/pages/Roles/utils/removeConditionKeyFromData.ts", "../../../@strapi/admin/admin/src/pages/Settings/pages/Roles/utils/getCheckboxState.ts", "../../../@strapi/admin/admin/src/pages/Settings/pages/Roles/components/CollapseLabel.tsx", "../../../@strapi/admin/admin/src/pages/Settings/pages/Roles/components/HiddenAction.tsx", "../../../@strapi/admin/admin/src/pages/Settings/pages/Roles/components/RequiredSign.tsx", "../../../@strapi/admin/admin/src/pages/Settings/pages/Roles/components/RowLabelWithCheckbox.tsx", "../../../@strapi/admin/admin/src/pages/Settings/pages/Roles/components/CollapsePropertyMatrix.tsx", "../../../@strapi/admin/admin/src/pages/Settings/pages/Roles/components/ConditionsButton.tsx", "../../../@strapi/admin/admin/src/pages/Settings/pages/Roles/components/ConditionsModal.tsx", "../../../@strapi/admin/admin/src/pages/Settings/pages/Roles/components/ContentTypeCollapses.tsx", "../../../@strapi/admin/admin/src/pages/Settings/pages/Roles/components/GlobalActions.tsx", "../../../@strapi/admin/admin/src/pages/Settings/pages/Roles/components/ContentTypes.tsx", "../../../@strapi/admin/admin/src/pages/Settings/pages/Roles/components/PluginsAndSettings.tsx", "../../../@strapi/admin/admin/src/pages/Settings/pages/Roles/components/Permissions.tsx"],
  "sourcesContent": ["var arrayEach = require('./_arrayEach'),\n    baseCreate = require('./_baseCreate'),\n    baseForOwn = require('./_baseForOwn'),\n    baseIteratee = require('./_baseIteratee'),\n    getPrototype = require('./_getPrototype'),\n    isArray = require('./isArray'),\n    isBuffer = require('./isBuffer'),\n    isFunction = require('./isFunction'),\n    isObject = require('./isObject'),\n    isTypedArray = require('./isTypedArray');\n\n/**\n * An alternative to `_.reduce`; this method transforms `object` to a new\n * `accumulator` object which is the result of running each of its own\n * enumerable string keyed properties thru `iteratee`, with each invocation\n * potentially mutating the `accumulator` object. If `accumulator` is not\n * provided, a new object with the same `[[Prototype]]` will be used. The\n * iteratee is invoked with four arguments: (accumulator, value, key, object).\n * Iteratee functions may exit iteration early by explicitly returning `false`.\n *\n * @static\n * @memberOf _\n * @since 1.3.0\n * @category Object\n * @param {Object} object The object to iterate over.\n * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n * @param {*} [accumulator] The custom accumulator value.\n * @returns {*} Returns the accumulated value.\n * @example\n *\n * _.transform([2, 3, 4], function(result, n) {\n *   result.push(n *= n);\n *   return n % 2 == 0;\n * }, []);\n * // => [4, 9]\n *\n * _.transform({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {\n *   (result[value] || (result[value] = [])).push(key);\n * }, {});\n * // => { '1': ['a', 'c'], '2': ['b'] }\n */\nfunction transform(object, iteratee, accumulator) {\n  var isArr = isArray(object),\n      isArrLike = isArr || isBuffer(object) || isTypedArray(object);\n\n  iteratee = baseIteratee(iteratee, 4);\n  if (accumulator == null) {\n    var Ctor = object && object.constructor;\n    if (isArrLike) {\n      accumulator = isArr ? new Ctor : [];\n    }\n    else if (isObject(object)) {\n      accumulator = isFunction(Ctor) ? baseCreate(getPrototype(object)) : {};\n    }\n    else {\n      accumulator = {};\n    }\n  }\n  (isArrLike ? arrayEach : baseForOwn)(object, function(value, index, object) {\n    return iteratee(accumulator, value, index, object);\n  });\n  return accumulator;\n}\n\nmodule.exports = transform;\n", "import { createContext } from '@radix-ui/react-context';\n\nimport { Condition } from '../../../../../../../shared/contracts/permissions';\n\nimport type {\n  OnChangeCollectionTypeGlobalActionCheckboxAction,\n  OnChangeCollectionTypeRowLeftCheckboxAction,\n  OnChangeConditionsAction,\n  State,\n} from '../components/Permissions';\n\n// Note: I had to guess most of these types based on the name and usage, but I actually don't\n// know if they are correct, because the usage is very generic. Feel free to correct them if\n// they create problems.\nexport interface PermissionsDataManagerContextValue extends Pick<State, 'modifiedData'> {\n  availableConditions: Condition[];\n  onChangeCollectionTypeLeftActionRowCheckbox: (\n    pathToCollectionType: OnChangeCollectionTypeRowLeftCheckboxAction['pathToCollectionType'],\n    propertyName: OnChangeCollectionTypeRowLeftCheckboxAction['propertyName'],\n    rowName: OnChangeCollectionTypeRowLeftCheckboxAction['rowName'],\n    value: OnChangeCollectionTypeRowLeftCheckboxAction['value']\n  ) => void;\n  onChangeConditions: (conditions: OnChangeConditionsAction['conditions']) => void;\n  onChangeSimpleCheckbox: (event: { target: { name: string; value: boolean } }) => void;\n  onChangeParentCheckbox: (event: { target: { name: string; value: boolean } }) => void;\n  onChangeCollectionTypeGlobalActionCheckbox: (\n    collectionTypeKind: OnChangeCollectionTypeGlobalActionCheckboxAction['collectionTypeKind'],\n    actionId: OnChangeCollectionTypeGlobalActionCheckboxAction['actionId'],\n    value: OnChangeCollectionTypeGlobalActionCheckboxAction['value']\n  ) => void;\n}\n\nconst [PermissionsDataManagerProvider, usePermissionsDataManagerContext] =\n  createContext<PermissionsDataManagerContextValue>('PermissionsDataManager');\n\nexport const usePermissionsDataManager = () =>\n  usePermissionsDataManagerContext('usePermissionsDataManager');\n\nexport { PermissionsDataManagerProvider };\n", "import isEqual from 'lodash/isEqual';\nimport isObject from 'lodash/isObject';\nimport transform from 'lodash/transform';\n\ntype ObjectDiff<T> = {\n  [P in keyof T]?: T[P] extends Record<string, unknown> ? ObjectDiff<T[P]> : T[P];\n};\n\nfunction difference<T extends Record<string, unknown>>(object: T, base: T): ObjectDiff<T> {\n  function changes(object: T, base: T): ObjectDiff<T> {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return transform(object, (result, value: any, key: keyof ObjectDiff<T>) => {\n      if (!isEqual(value, base[key])) {\n        result[key] =\n          isObject(value) && isObject(base[key]) ? changes(value as T, base[key] as T) : value;\n      }\n      return result;\n    });\n  }\n\n  return changes(object, base);\n}\n\nexport { difference };\n", "/**\n * @internal\n * @description Mutates a value to be a union of flat values, no arrays allowed.\n */\ntype Flat<T> = T extends string ? T : T extends ArrayLike<any> ? never : T;\n\n/**\n * @internal\n */\ninterface RecursiveArray<T> extends Array<T | RecursiveArray<T>> {}\n/**\n * @internal\n */\ninterface ArrayOfRecursiveArraysOrValues<T> extends ArrayLike<T | RecursiveArray<T>> {}\n\n/**\n * @internal\n *\n * @description Flattens an array recursively.\n */\nconst flattenDeep = <T>(\n  array?: ArrayOfRecursiveArraysOrValues<T> | null | undefined\n): Array<Flat<T>> => {\n  if (Array.isArray(array)) {\n    return array.reduce(\n      (acc, value) => {\n        if (Array.isArray(value)) {\n          acc.push(...flattenDeep(value));\n        } else {\n          acc.push(value);\n        }\n\n        return acc;\n      },\n      [] as Array<Flat<T>>\n    );\n  } else {\n    return [];\n  }\n};\n\nexport { flattenDeep };\nexport type { Flat, RecursiveArray, ArrayOfRecursiveArraysOrValues };\n", "import { Flat, flattenDeep } from '../../../../../utils/arrays';\nimport { isObject } from '../../../../../utils/objects';\n\nconst createArrayOfValues = <TData>(obj: unknown): Array<Flat<TData>> => {\n  if (!isObject(obj)) {\n    return [];\n  }\n\n  return flattenDeep(\n    Object.values(obj).map((value) => {\n      if (isObject(value)) {\n        return createArrayOfValues(value);\n      }\n\n      return value;\n    })\n  );\n};\n\nexport { createArrayOfValues };\n", "import { isObject } from '../../../../../utils/objects';\n\nimport { createArrayOfValues } from './createArrayOfValues';\n\nimport type { ConditionForm, Form, PropertyChildForm } from './forms';\nimport type { UpdatePermissions } from '../../../../../../../shared/contracts/roles';\nimport type { Permission } from '../../../../../../../shared/contracts/shared';\nimport type { PermissionsDataManagerContextValue } from '../hooks/usePermissionsDataManager';\n\ntype PermissionApiBody = UpdatePermissions.Request['body']['permissions'];\n\n/**\n * @description Given a users permissions array we find the first one that matches a provided subject & action\n */\nconst findMatchingPermission = (\n  permissions: Permission[],\n  action: string,\n  subject: string | null\n) => permissions.find((perm) => perm.action === action && perm.subject === subject);\n\nconst formatPermissionsForAPI = (\n  modifiedData: PermissionsDataManagerContextValue['modifiedData']\n): PermissionApiBody => {\n  const pluginsPermissions = formatSettingsPermissions(modifiedData.plugins);\n  const settingsPermissions = formatSettingsPermissions(modifiedData.settings);\n  const collectionTypesPermissions = formatContentTypesPermissions(modifiedData.collectionTypes);\n  const singleTypesPermissions = formatContentTypesPermissions(modifiedData.singleTypes);\n\n  return [\n    ...pluginsPermissions,\n    ...settingsPermissions,\n    ...collectionTypesPermissions,\n    ...singleTypesPermissions,\n  ];\n};\n\nconst formatSettingsPermissions = (\n  settingsPermissionsObject:\n    | PermissionsDataManagerContextValue['modifiedData']['plugins']\n    | PermissionsDataManagerContextValue['modifiedData']['settings']\n): PermissionApiBody => {\n  return Object.values(settingsPermissionsObject).reduce<PermissionApiBody>((formAcc, form) => {\n    const currentCategoryPermissions = Object.values(form).reduce<PermissionApiBody>(\n      (childFormAcc, childForm) => {\n        const permissions = Object.entries(childForm).reduce<PermissionApiBody>(\n          (\n            responsesAcc,\n            [\n              actionName,\n              {\n                conditions,\n                properties: { enabled },\n              },\n            ]\n          ) => {\n            if (!enabled) {\n              return responsesAcc;\n            }\n\n            responsesAcc.push({\n              action: actionName,\n              subject: null,\n              conditions: createConditionsArray(conditions),\n              properties: {},\n            });\n\n            return responsesAcc;\n          },\n          []\n        );\n\n        return [...childFormAcc, ...permissions];\n      },\n      []\n    );\n\n    return [...formAcc, ...currentCategoryPermissions];\n  }, []);\n};\n\nconst formatContentTypesPermissions = (contentTypesPermissions: Form): PermissionApiBody => {\n  const permissions = Object.entries(contentTypesPermissions).reduce<PermissionApiBody>(\n    (allPermissions, current) => {\n      const [subject, currentSubjectActions] = current;\n\n      const permissions = Object.entries(currentSubjectActions).reduce<PermissionApiBody>(\n        (acc, current) => {\n          const [actionName, permissions] = current;\n          const shouldCreatePermission = createArrayOfValues(permissions).some((val) => val);\n\n          if (!shouldCreatePermission) {\n            return acc;\n          }\n\n          if (!permissions?.properties?.enabled) {\n            const createdPermissionsArray = Object.entries(permissions.properties).reduce<\n              PermissionApiBody[number]\n            >(\n              (acc, current) => {\n                const [propertyName, propertyValue] = current;\n\n                // @ts-expect-error – `propertyValue` can be boolean or an object, but we don't account for it...\n                acc.properties[propertyName] = createPropertyArray(propertyValue);\n\n                return acc;\n              },\n              {\n                action: actionName,\n                subject,\n                conditions: createConditionsArray(permissions.conditions),\n                properties: {},\n              }\n            );\n\n            return [...acc, createdPermissionsArray];\n          }\n\n          if (!permissions.properties.enabled) {\n            return acc;\n          }\n\n          acc.push({\n            action: actionName,\n            subject,\n            properties: {},\n            conditions: createConditionsArray(permissions.conditions),\n          });\n\n          return acc;\n        },\n        []\n      );\n\n      return [...allPermissions, ...permissions];\n    },\n    []\n  );\n\n  return permissions;\n};\n\nconst createPropertyArray = (propertyValue: PropertyChildForm, prefix = ''): string[] => {\n  return Object.entries(propertyValue).reduce<string[]>((acc, current) => {\n    const [name, value] = current;\n\n    if (isObject(value)) {\n      return [...acc, ...createPropertyArray(value, `${prefix}${name}.`)];\n    }\n\n    if (value && !isObject(value)) {\n      acc.push(`${prefix}${name}`);\n    }\n\n    return acc;\n  }, []);\n};\n\nconst createConditionsArray = (conditions: ConditionForm) =>\n  Object.entries(conditions)\n    .filter(([, conditionValue]) => {\n      return conditionValue;\n    })\n    .map(([conditionName]) => conditionName);\n\nexport { findMatchingPermission, formatPermissionsForAPI };\n", "import isEmpty from 'lodash/isEmpty';\nimport merge from 'lodash/merge';\n\nimport { findMatchingPermission } from './permissions';\n\nimport type { GenericLayout } from './layouts';\nimport type {\n  Condition,\n  SettingPermission,\n  ContentPermission,\n  Subject,\n  SubjectProperty,\n} from '../../../../../../../shared/contracts/permissions';\nimport type { Permission } from '../../../../../../../shared/contracts/shared';\n\ntype ConditionForm = Record<string, boolean>;\n\n/**\n * Creates the default condition form: { [conditionId]: false }\n */\nconst createDefaultConditionsForm = (\n  conditions: Condition[],\n  initialConditions: Permission['conditions'] = []\n): ConditionForm =>\n  conditions.reduce<ConditionForm>((acc, current) => {\n    acc[current.id] = initialConditions.indexOf(current.id) !== -1;\n\n    return acc;\n  }, {});\n\ninterface SubCategoryForm {\n  properties: {\n    enabled: boolean;\n  };\n  conditions: ConditionForm;\n}\n\ntype ChildrenForm = Record<\n  string,\n  SubCategoryForm | (Omit<SubCategoryForm, 'properties'> & PropertyForm)\n>;\n\ntype Form = Record<string, ChildrenForm>;\n\nconst createDefaultForm = <TLayout extends Omit<SettingPermission, 'category'>>(\n  layout: GenericLayout<TLayout>[],\n  conditions: Condition[],\n  initialPermissions: Permission[] = []\n) => {\n  return layout.reduce<Record<string, Form>>((acc, { categoryId, childrenForm }) => {\n    const childrenDefaultForm = childrenForm.reduce<Form>((acc, current) => {\n      acc[current.subCategoryId] = current.actions.reduce<ChildrenForm>((acc, current) => {\n        const foundMatchingPermission = findMatchingPermission(\n          initialPermissions,\n          current.action,\n          null\n        );\n\n        acc[current.action] = {\n          properties: {\n            enabled: foundMatchingPermission !== undefined,\n          },\n          conditions: createDefaultConditionsForm(\n            conditions,\n            foundMatchingPermission?.conditions ?? []\n          ),\n        };\n\n        return acc;\n      }, {});\n\n      return acc;\n    }, {});\n\n    acc[categoryId] = childrenDefaultForm;\n\n    return acc;\n  }, {});\n};\n\ninterface PropertyChildForm extends Record<string, boolean | PropertyChildForm> {}\n\ninterface PropertyForm {\n  properties: PropertyChildForm;\n}\n\n/**\n * Creates the default form for all the properties found in a content type's layout\n */\nconst createDefaultPropertiesForm = (\n  properties: string[],\n  subject: Subject,\n  matchingPermission?: Permission\n): PropertyForm => {\n  const recursivelyCreatePropertyForm = (\n    { children = [] }: SubjectProperty,\n    propertyValues: string[],\n    prefix = ''\n  ): PropertyChildForm => {\n    return children.reduce<PropertyChildForm>((acc, current) => {\n      if (current.children) {\n        return {\n          ...acc,\n          [current.value]: recursivelyCreatePropertyForm(\n            current,\n            propertyValues,\n            `${prefix}${current.value}.`\n          ),\n        };\n      }\n\n      const hasProperty = propertyValues.indexOf(`${prefix}${current.value}`) !== -1;\n\n      acc[current.value] = hasProperty;\n\n      return acc;\n    }, {});\n  };\n\n  return properties.reduce<PropertyForm>(\n    (acc, currentPropertyName) => {\n      const foundProperty = subject.properties.find(({ value }) => value === currentPropertyName);\n\n      if (foundProperty) {\n        const matchingPermissionPropertyValues =\n          matchingPermission?.properties[foundProperty.value] ?? [];\n\n        const propertyForm = recursivelyCreatePropertyForm(\n          foundProperty,\n          matchingPermissionPropertyValues\n        );\n\n        acc.properties[currentPropertyName] = propertyForm;\n      }\n\n      return acc;\n    },\n    { properties: {} }\n  );\n};\n\n/**\n * Creates the default for for a content type\n */\nconst createDefaultCTForm = (\n  { subjects, actions = [] }: ContentPermission,\n  conditions: Condition[],\n  initialPermissions: Permission[] = []\n) => {\n  return actions.reduce<Form>((defaultForm, action) => {\n    type SubjectLayouts = Record<string, Subject>;\n\n    const subjectLayouts = action.subjects.reduce<SubjectLayouts>((acc, current) => {\n      const foundLayout = subjects.find(({ uid }) => uid === current) || null;\n\n      if (foundLayout) {\n        acc[current] = foundLayout;\n      }\n\n      return acc;\n    }, {});\n\n    // This can happen when an action is not related to a content type\n    // for instance the D&P permission is applied only with the cts that\n    // have the D&P features enabled\n    if (isEmpty(subjectLayouts)) {\n      return defaultForm;\n    }\n\n    // The object has the following shape: { [ctUID]: { [actionId]: { [property]: { enabled: false } } } }\n    const contentTypesActions = Object.keys(subjectLayouts).reduce<Form>((acc, currentCTUID) => {\n      const { actionId, applyToProperties } = action;\n      const currentSubjectLayout = subjectLayouts[currentCTUID];\n      const properties = currentSubjectLayout.properties.map(({ value }) => value);\n      const doesNothaveProperty = properties.every(\n        (property) => (applyToProperties || []).indexOf(property) === -1\n      );\n\n      const matchingPermission = findMatchingPermission(initialPermissions, actionId, currentCTUID);\n      const conditionsForm = createDefaultConditionsForm(\n        conditions,\n        matchingPermission?.conditions ?? []\n      );\n\n      if (!acc[currentCTUID]) {\n        acc[currentCTUID] = {};\n      }\n\n      if (isEmpty(applyToProperties) || doesNothaveProperty) {\n        acc[currentCTUID][actionId] = {\n          properties: {\n            enabled: matchingPermission !== undefined,\n          },\n          conditions: conditionsForm,\n        };\n\n        return acc;\n      }\n\n      const propertiesForm = createDefaultPropertiesForm(\n        applyToProperties,\n        subjectLayouts[currentCTUID],\n        matchingPermission\n      );\n\n      acc[currentCTUID][actionId] = { ...propertiesForm, conditions: conditionsForm };\n\n      return acc;\n    }, {});\n\n    return merge(defaultForm, contentTypesActions);\n  }, {});\n};\n\nexport { createDefaultConditionsForm, createDefaultForm, createDefaultCTForm };\nexport type { ConditionForm, Form, PropertyForm, SubCategoryForm, ChildrenForm, PropertyChildForm };\n", "import groupBy from 'lodash/groupBy';\n\nimport { SettingPermission } from '../../../../../../../shared/contracts/permissions';\n\ninterface GenericLayout<TLayout> {\n  category: string;\n  categoryId: string;\n  childrenForm: Array<{\n    subCategoryName: string;\n    subCategoryId: string;\n    actions: TLayout[];\n  }>;\n}\n\nconst formatLayout = <TLayout extends Omit<SettingPermission, 'category'>>(\n  layout: TLayout[],\n  groupByKey: keyof TLayout\n): GenericLayout<TLayout>[] => {\n  return Object.entries(groupBy(layout, groupByKey)).map(([itemName, item]) => ({\n    category: itemName,\n    categoryId: itemName.split(' ').join('-'),\n    childrenForm: Object.entries(groupBy(item, 'subCategory')).map(\n      ([subCategoryName, actions]) => ({\n        subCategoryName,\n        subCategoryId: subCategoryName.split(' ').join('-'),\n        actions,\n      })\n    ),\n  }));\n};\n\nexport { formatLayout };\nexport type { GenericLayout };\n", "import has from 'lodash/has';\nimport omit from 'lodash/omit';\n\nimport { isObject } from '../../../../../utils/objects';\n\nimport { createArrayOfValues } from './createArrayOfValues';\n/**\n * Changes all the conditions leaf when the properties are all falsy\n */\nconst updateConditionsToFalse = (obj: object): object => {\n  return Object.keys(obj).reduce((acc, current) => {\n    // @ts-expect-error – TODO: type better\n    const currentValue = obj[current];\n\n    if (isObject(currentValue) && !has(currentValue, 'conditions')) {\n      return { ...acc, [current]: updateConditionsToFalse(currentValue) };\n    }\n\n    if (isObject(currentValue) && has(currentValue, 'conditions')) {\n      const isActionEnabled = createArrayOfValues(omit(currentValue, 'conditions')).some(\n        (val) => val\n      );\n\n      if (!isActionEnabled) {\n        // @ts-expect-error – TODO: type better\n        const updatedConditions = Object.keys(currentValue.conditions).reduce((acc1, current) => {\n          // @ts-expect-error – TODO: type better\n          acc1[current] = false;\n\n          return acc1;\n        }, {});\n\n        return { ...acc, [current]: { ...currentValue, conditions: updatedConditions } };\n      }\n    }\n\n    // @ts-expect-error – TODO: type better\n    acc[current] = currentValue;\n\n    return acc;\n  }, {});\n};\n\nexport { updateConditionsToFalse };\n", "import { isObject } from '../../../../../utils/objects';\n\n/**\n * Sets all the none object values of an object to the given one\n * It preserves the shape of the object, it only modifies the leafs\n * of an object.\n * This utility is very helpful when dealing with parent<>children checkboxes\n */\nconst updateValues = (obj: object, valueToSet: boolean, isFieldUpdate = false): object => {\n  return Object.keys(obj).reduce((acc, current) => {\n    const currentValue = obj[current as keyof object];\n\n    if (current === 'conditions' && !isFieldUpdate) {\n      // @ts-expect-error – TODO: type better\n      acc[current] = currentValue;\n\n      return acc;\n    }\n\n    if (isObject(currentValue)) {\n      return { ...acc, [current]: updateValues(currentValue, valueToSet, current === 'fields') };\n    }\n\n    // @ts-expect-error – TODO: type better\n    acc[current] = valueToSet;\n\n    return acc;\n  }, {});\n};\n\nexport { updateValues };\n", "export const cellWidth = `12rem`;\nexport const firstRowWidth = `20rem`;\nexport const rowHeight = `5.3rem`;\n", "type DataWithoutCondition<TData extends { conditions?: unknown }> = Omit<TData, 'conditions'>;\n\nconst removeConditionKeyFromData = <TData extends { conditions?: unknown }>(\n  obj?: TData\n): DataWithoutCondition<TData> | null => {\n  if (!obj) {\n    return null;\n  }\n\n  return Object.entries(obj).reduce((acc, [key, value]) => {\n    if (key !== 'conditions') {\n      // @ts-expect-error – TODO: fix this type error correctly.\n      acc[key] = value;\n    }\n\n    return acc;\n  }, {} as DataWithoutCondition<TData>);\n};\n\nexport { removeConditionKeyFromData };\nexport type { DataWithoutCondition };\n", "import { createArrayOfValues } from './createArrayOfValues';\nimport { removeConditionKeyFromData } from './removeConditionKeyFromData';\n\ninterface RecursiveRecordOfBooleans extends Record<string, boolean | RecursiveRecordOfBooleans> {}\n\nconst getCheckboxState = (dataObj: RecursiveRecordOfBooleans) => {\n  const dataWithoutCondition = removeConditionKeyFromData(dataObj);\n\n  const arrayOfValues = createArrayOfValues(dataWithoutCondition);\n\n  if (!arrayOfValues.length) {\n    return { hasAllActionsSelected: false, hasSomeActionsSelected: false };\n  }\n\n  const hasAllActionsSelected = arrayOfValues.every((val) => val);\n  const hasSomeActionsSelected = arrayOfValues.some((val) => val) && !hasAllActionsSelected;\n\n  return { hasAllActionsSelected, hasSomeActionsSelected };\n};\n\nexport { getCheckboxState };\nexport type { RecursiveRecordOfBooleans };\n", "import { Flex, FlexComponent } from '@strapi/design-system';\nimport { styled } from 'styled-components';\n\nconst CollapseLabel = styled<FlexComponent>(Flex)<{ $isCollapsable: boolean }>`\n  padding-right: ${({ theme }) => theme.spaces[2]};\n  overflow: hidden;\n  flex: 1;\n  ${({ $isCollapsable }) => $isCollapsable && 'cursor: pointer;'}\n`;\n\nexport { CollapseLabel };\n", "import { styled } from 'styled-components';\n\nimport { cellWidth } from '../utils/constants';\n\nconst HiddenAction = styled.div`\n  width: ${cellWidth};\n`;\n\nexport { HiddenAction };\n", "import { Box } from '@strapi/design-system';\n\nconst RequiredSign = () => (\n  <Box color=\"danger700\" paddingLeft={1}>\n    *\n  </Box>\n);\n\nexport { RequiredSign };\n", "import * as React from 'react';\n\nimport { Checkbox, Box, Flex, Typography } from '@strapi/design-system';\nimport { useIntl } from 'react-intl';\n\nimport { PermissionsDataManagerContextValue } from '../hooks/usePermissionsDataManager';\nimport { firstRowWidth } from '../utils/constants';\n\nimport { CollapseLabel } from './CollapseLabel';\n\ninterface RowLabelWithCheckboxProps {\n  children: React.ReactNode;\n  checkboxName?: string;\n  isActive?: boolean;\n  isCollapsable?: boolean;\n  isFormDisabled?: boolean;\n  label: string;\n  onChange: PermissionsDataManagerContextValue['onChangeParentCheckbox'];\n  onClick: () => void;\n  someChecked?: boolean;\n  value: boolean;\n}\n\nconst RowLabelWithCheckbox = ({\n  checkboxName = '',\n  children,\n  isActive = false,\n  isCollapsable = false,\n  isFormDisabled = false,\n  label,\n  onChange,\n  onClick,\n  someChecked = false,\n  value,\n}: RowLabelWithCheckboxProps) => {\n  const { formatMessage } = useIntl();\n\n  const collapseLabelProps = {\n    title: label,\n    alignItems: 'center',\n    $isCollapsable: isCollapsable,\n  };\n\n  if (isCollapsable) {\n    Object.assign(collapseLabelProps, {\n      onClick,\n      'aria-expanded': isActive,\n      onKeyDown({ key }: React.KeyboardEvent<HTMLDivElement>) {\n        if (key === 'Enter' || key === ' ') {\n          onClick();\n        }\n      },\n      tabIndex: 0,\n      role: 'button',\n    });\n  }\n\n  return (\n    <Flex alignItems=\"center\" paddingLeft={6} width={firstRowWidth} shrink={0}>\n      <Box paddingRight={2}>\n        <Checkbox\n          name={checkboxName}\n          aria-label={formatMessage(\n            {\n              id: `Settings.permissions.select-all-by-permission`,\n              defaultMessage: 'Select all {label} permissions',\n            },\n            { label }\n          )}\n          disabled={isFormDisabled}\n          // Keep same signature as packages/core/admin/admin/src/components/Roles/Permissions/index.js l.91\n          onCheckedChange={(value) =>\n            onChange({\n              target: {\n                name: checkboxName,\n                value: !!value,\n              },\n            })\n          }\n          checked={someChecked ? 'indeterminate' : value}\n        />\n      </Box>\n      <CollapseLabel {...collapseLabelProps}>\n        <Typography ellipsis>{label}</Typography>\n        {children}\n      </CollapseLabel>\n    </Flex>\n  );\n};\n\nexport { RowLabelWithCheckbox };\nexport type { RowLabelWithCheckboxProps };\n", "import * as React from 'react';\n\nimport {\n  Checkbox,\n  Box,\n  BoxComponent,\n  Flex,\n  FlexComponent,\n  Typography,\n  TypographyComponent,\n} from '@strapi/design-system';\nimport { CaretDown } from '@strapi/icons';\nimport get from 'lodash/get';\nimport { useIntl } from 'react-intl';\nimport { styled, DefaultTheme, css } from 'styled-components';\n\nimport { Action, SubjectProperty } from '../../../../../../../shared/contracts/permissions';\nimport {\n  PermissionsDataManagerContextValue,\n  usePermissionsDataManager,\n} from '../hooks/usePermissionsDataManager';\nimport { cellWidth, firstRowWidth, rowHeight } from '../utils/constants';\nimport { getCheckboxState } from '../utils/getCheckboxState';\n\nimport { CollapseLabel } from './CollapseLabel';\nimport { HiddenAction } from './HiddenAction';\nimport { RequiredSign } from './RequiredSign';\nimport { RowLabelWithCheckbox, RowLabelWithCheckboxProps } from './RowLabelWithCheckbox';\n\n/* -------------------------------------------------------------------------------------------------\n * CollapsePropertyMatrix\n * -----------------------------------------------------------------------------------------------*/\n\ninterface CollapsePropertyMatrixProps\n  extends Pick<\n    ActionRowProps,\n    'childrenForm' | 'isFormDisabled' | 'label' | 'pathToData' | 'propertyName'\n  > {\n  availableActions?: Array<Action & { isDisplayed: boolean }>;\n}\n\ninterface PropertyAction {\n  label: string;\n  actionId: string;\n  isActionRelatedToCurrentProperty: boolean;\n}\n\nconst CollapsePropertyMatrix = ({\n  availableActions = [],\n  childrenForm = [],\n  isFormDisabled,\n  label,\n  pathToData,\n  propertyName,\n}: CollapsePropertyMatrixProps) => {\n  const propertyActions = React.useMemo(\n    () =>\n      availableActions.map((action) => {\n        const isActionRelatedToCurrentProperty =\n          Array.isArray(action.applyToProperties) &&\n          action.applyToProperties.indexOf(propertyName) !== -1 &&\n          action.isDisplayed;\n\n        return { label: action.label, actionId: action.actionId, isActionRelatedToCurrentProperty };\n      }) satisfies PropertyAction[],\n    [availableActions, propertyName]\n  );\n\n  return (\n    <Flex display=\"inline-flex\" direction=\"column\" alignItems=\"stretch\" minWidth={0}>\n      <Header label={label} headers={propertyActions} />\n      <Box>\n        {childrenForm.map(({ children: childrenForm, label, value, required }, i) => (\n          <ActionRow\n            childrenForm={childrenForm}\n            key={value}\n            label={label}\n            isFormDisabled={isFormDisabled}\n            name={value}\n            required={required}\n            propertyActions={propertyActions}\n            pathToData={pathToData}\n            propertyName={propertyName}\n            isOdd={i % 2 === 0}\n          />\n        ))}\n      </Box>\n    </Flex>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * ActionRow\n * -----------------------------------------------------------------------------------------------*/\n\ninterface ActionRowProps\n  extends Pick<\n    SubActionRowProps,\n    'childrenForm' | 'isFormDisabled' | 'propertyActions' | 'propertyName'\n  > {\n  label: string;\n  name: string;\n  required?: boolean;\n  pathToData: string;\n  isOdd?: boolean;\n}\n\nconst ActionRow = ({\n  childrenForm = [],\n  label,\n  isFormDisabled = false,\n  name,\n  required = false,\n  pathToData,\n  propertyActions,\n  propertyName,\n  isOdd = false,\n}: ActionRowProps) => {\n  const { formatMessage } = useIntl();\n  const [rowToOpen, setRowToOpen] = React.useState<string | null>(null);\n  const {\n    modifiedData,\n    onChangeCollectionTypeLeftActionRowCheckbox,\n    onChangeParentCheckbox,\n    onChangeSimpleCheckbox,\n  } = usePermissionsDataManager();\n\n  const isActive = rowToOpen === name;\n\n  const recursiveChildren = React.useMemo(() => {\n    if (!Array.isArray(childrenForm)) {\n      return [];\n    }\n\n    return childrenForm;\n  }, [childrenForm]);\n\n  const isCollapsable = recursiveChildren.length > 0;\n\n  const handleClick = React.useCallback(() => {\n    if (isCollapsable) {\n      setRowToOpen((prev) => {\n        if (prev === name) {\n          return null;\n        }\n\n        return name;\n      });\n    }\n  }, [isCollapsable, name]);\n\n  const handleChangeLeftRowCheckbox: RowLabelWithCheckboxProps['onChange'] = ({\n    target: { value },\n  }) => {\n    onChangeCollectionTypeLeftActionRowCheckbox(pathToData, propertyName, name, value);\n  };\n\n  const { hasAllActionsSelected, hasSomeActionsSelected } = React.useMemo(() => {\n    return getRowLabelCheckboxState(propertyActions, modifiedData, pathToData, propertyName, name);\n  }, [propertyActions, modifiedData, pathToData, propertyName, name]);\n\n  return (\n    <>\n      <Wrapper\n        alignItems=\"center\"\n        $isCollapsable={isCollapsable}\n        $isActive={isActive}\n        background={isOdd ? 'neutral100' : 'neutral0'}\n      >\n        <Flex>\n          <RowLabelWithCheckbox\n            onChange={handleChangeLeftRowCheckbox}\n            onClick={handleClick}\n            isCollapsable={isCollapsable}\n            isFormDisabled={isFormDisabled}\n            label={label}\n            someChecked={hasSomeActionsSelected}\n            value={hasAllActionsSelected}\n            isActive={isActive}\n          >\n            {required && <RequiredSign />}\n            <CarretIcon $isActive={isActive} />\n          </RowLabelWithCheckbox>\n          <Flex>\n            {propertyActions.map(({ label, isActionRelatedToCurrentProperty, actionId }) => {\n              if (!isActionRelatedToCurrentProperty) {\n                return <HiddenAction key={label} />;\n              }\n\n              const checkboxName = [\n                ...pathToData.split('..'),\n                actionId,\n                'properties',\n                propertyName,\n                name,\n              ];\n\n              if (!isCollapsable) {\n                const checkboxValue = get(modifiedData, checkboxName, false);\n\n                return (\n                  <Flex\n                    key={actionId}\n                    width={cellWidth}\n                    position=\"relative\"\n                    justifyContent=\"center\"\n                    alignItems=\"center\"\n                  >\n                    <Checkbox\n                      disabled={isFormDisabled}\n                      name={checkboxName.join('..')}\n                      aria-label={formatMessage(\n                        {\n                          id: `Settings.permissions.select-by-permission`,\n                          defaultMessage: 'Select {label} permission',\n                        },\n                        { label: `${name} ${label}` }\n                      )}\n                      onCheckedChange={(value) => {\n                        onChangeSimpleCheckbox({\n                          target: {\n                            name: checkboxName.join('..'),\n                            value: !!value,\n                          },\n                        });\n                      }}\n                      checked={checkboxValue}\n                    />\n                  </Flex>\n                );\n              }\n\n              const data = get(modifiedData, checkboxName, {});\n\n              const { hasAllActionsSelected, hasSomeActionsSelected } = getCheckboxState(data);\n\n              return (\n                <Flex\n                  key={label}\n                  width={cellWidth}\n                  position=\"relative\"\n                  justifyContent=\"center\"\n                  alignItems=\"center\"\n                >\n                  <Checkbox\n                    disabled={isFormDisabled}\n                    name={checkboxName.join('..')}\n                    onCheckedChange={(value) => {\n                      onChangeParentCheckbox({\n                        target: {\n                          name: checkboxName.join('..'),\n                          value: !!value,\n                        },\n                      });\n                    }}\n                    aria-label={formatMessage(\n                      {\n                        id: `Settings.permissions.select-by-permission`,\n                        defaultMessage: 'Select {label} permission',\n                      },\n                      { label: `${name} ${label}` }\n                    )}\n                    checked={hasSomeActionsSelected ? 'indeterminate' : hasAllActionsSelected}\n                  />\n                </Flex>\n              );\n            })}\n          </Flex>\n        </Flex>\n      </Wrapper>\n      {isActive && (\n        <SubActionRow\n          childrenForm={recursiveChildren}\n          isFormDisabled={isFormDisabled}\n          parentName={name}\n          pathToDataFromActionRow={pathToData}\n          propertyName={propertyName}\n          propertyActions={propertyActions}\n          recursiveLevel={0}\n        />\n      )}\n    </>\n  );\n};\n\n/**\n *\n * Returns the state of the left checkbox of a ActionRow main checkbox\n */\nconst getRowLabelCheckboxState = (\n  propertyActions: PropertyAction[],\n  modifiedData: PermissionsDataManagerContextValue['modifiedData'],\n  pathToContentType: string,\n  propertyToCheck: string,\n  targetKey: string\n) => {\n  const actionIds = propertyActions.reduce<string[]>((acc, current) => {\n    if (current.isActionRelatedToCurrentProperty) {\n      acc.push(current.actionId);\n    }\n\n    return acc;\n  }, []);\n\n  const data = actionIds.reduce<Record<string, boolean>>((acc, current) => {\n    const mainData = get(\n      modifiedData,\n      [...pathToContentType.split('..'), current, 'properties', propertyToCheck, targetKey],\n      false\n    );\n\n    acc[current] = mainData;\n\n    return acc;\n  }, {});\n\n  return getCheckboxState(data);\n};\n\nconst Wrapper = styled<FlexComponent>(Flex)<{ $isCollapsable?: boolean; $isActive?: boolean }>`\n  height: ${rowHeight};\n  flex: 1;\n\n  &:hover {\n    ${({ $isCollapsable, theme }) => $isCollapsable && activeStyle(theme)}\n  }\n\n  ${({ $isCollapsable }) =>\n    $isCollapsable &&\n    `\n      ${CarretIcon} {\n        display: flex;\n      }\n  `}\n  ${({ $isActive, theme }) => $isActive && activeStyle(theme)};\n`;\n\nconst CarretIcon = styled(CaretDown)<{ $isActive: boolean }>`\n  display: none;\n\n  svg {\n    width: 1.4rem;\n  }\n\n  path {\n    fill: ${({ theme }) => theme.colors.neutral200};\n  }\n\n  transform: rotate(${({ $isActive }) => ($isActive ? '180' : '0')}deg);\n  margin-left: ${({ theme }) => theme.spaces[2]};\n`;\n\n/* -------------------------------------------------------------------------------------------------\n * SubActionRow\n * -----------------------------------------------------------------------------------------------*/\n\ninterface SubActionRowProps {\n  childrenForm: SubjectProperty['children'];\n  isFormDisabled?: boolean;\n  parentName: string;\n  pathToDataFromActionRow: string;\n  propertyActions: PropertyAction[];\n  propertyName: string;\n  recursiveLevel: number;\n}\n\nconst SubActionRow = ({\n  childrenForm = [],\n  isFormDisabled,\n  recursiveLevel,\n  pathToDataFromActionRow,\n  propertyActions,\n  parentName,\n  propertyName,\n}: SubActionRowProps) => {\n  const { formatMessage } = useIntl();\n  const { modifiedData, onChangeParentCheckbox, onChangeSimpleCheckbox } =\n    usePermissionsDataManager();\n  const [rowToOpen, setRowToOpen] = React.useState<string | null>(null);\n\n  const handleClickToggleSubLevel = (name: string) => {\n    setRowToOpen((prev) => {\n      if (prev === name) {\n        return null;\n      }\n\n      return name;\n    });\n  };\n\n  const displayedRecursiveChildren = React.useMemo(() => {\n    if (!rowToOpen) {\n      return null;\n    }\n\n    return childrenForm.find(({ value }) => value === rowToOpen);\n  }, [rowToOpen, childrenForm]);\n\n  return (\n    <Box paddingLeft={`3.2rem`}>\n      <TopTimeline />\n      {childrenForm.map(({ label, value, required, children: subChildrenForm }, index) => {\n        const isVisible = index + 1 < childrenForm.length;\n        const isArrayType = Array.isArray(subChildrenForm);\n        const isActive = rowToOpen === value;\n\n        return (\n          <LeftBorderTimeline key={value} $isVisible={isVisible}>\n            <Flex height={rowHeight}>\n              <StyledBox>\n                <Svg\n                  width=\"20\"\n                  height=\"23\"\n                  viewBox=\"0 0 20 23\"\n                  fill=\"none\"\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                  $color=\"primary200\"\n                >\n                  <path\n                    fillRule=\"evenodd\"\n                    clipRule=\"evenodd\"\n                    d=\"M7.02477 14.7513C8.65865 17.0594 11.6046 18.6059 17.5596 18.8856C18.6836 18.9384 19.5976 19.8435 19.5976 20.9688V20.9688C19.5976 22.0941 18.6841 23.0125 17.5599 22.9643C10.9409 22.6805 6.454 20.9387 3.75496 17.1258C0.937988 13.1464 0.486328 7.39309 0.486328 0.593262H4.50974C4.50974 7.54693 5.06394 11.9813 7.02477 14.7513Z\"\n                    fill=\"#D9D8FF\"\n                  />\n                </Svg>\n              </StyledBox>\n              <Flex style={{ flex: 1 }}>\n                <RowStyle $level={recursiveLevel} $isActive={isActive} $isCollapsable={isArrayType}>\n                  <CollapseLabel\n                    alignItems=\"center\"\n                    $isCollapsable={isArrayType}\n                    {...(isArrayType && {\n                      onClick: () => handleClickToggleSubLevel(value),\n                      'aria-expanded': isActive,\n                      onKeyDown: ({ key }: React.KeyboardEvent<HTMLDivElement>) =>\n                        (key === 'Enter' || key === ' ') && handleClickToggleSubLevel(value),\n                      tabIndex: 0,\n                      role: 'button',\n                    })}\n                    title={label}\n                  >\n                    <RowLabel ellipsis>{label}</RowLabel>\n                    {required && <RequiredSign />}\n                    <CarretIcon $isActive={isActive} />\n                  </CollapseLabel>\n                </RowStyle>\n                <Flex style={{ flex: 1 }}>\n                  {propertyActions.map(\n                    ({ actionId, label: propertyLabel, isActionRelatedToCurrentProperty }) => {\n                      if (!isActionRelatedToCurrentProperty) {\n                        return <HiddenAction key={actionId} />;\n                      }\n                      /*\n                       * Usually we use a 'dot' in order to know the key path of an object for which we want to change the value.\n                       * Since an action and a subject are both separated by '.' or '::' we chose to use the '..' separators\n                       */\n                      const checkboxName = [\n                        ...pathToDataFromActionRow.split('..'),\n                        actionId,\n                        'properties',\n                        propertyName,\n                        ...parentName.split('..'),\n                        value,\n                      ];\n\n                      const checkboxValue = get(modifiedData, checkboxName, false);\n\n                      if (!subChildrenForm) {\n                        return (\n                          <Flex\n                            key={propertyLabel}\n                            position=\"relative\"\n                            width={cellWidth}\n                            justifyContent=\"center\"\n                            alignItems=\"center\"\n                          >\n                            <Checkbox\n                              disabled={isFormDisabled}\n                              name={checkboxName.join('..')}\n                              aria-label={formatMessage(\n                                {\n                                  id: `Settings.permissions.select-by-permission`,\n                                  defaultMessage: 'Select {label} permission',\n                                },\n                                { label: `${parentName} ${label} ${propertyLabel}` }\n                              )}\n                              onCheckedChange={(value) => {\n                                onChangeSimpleCheckbox({\n                                  target: {\n                                    name: checkboxName.join('..'),\n                                    value: !!value,\n                                  },\n                                });\n                              }}\n                              checked={checkboxValue}\n                            />\n                          </Flex>\n                        );\n                      }\n\n                      const { hasAllActionsSelected, hasSomeActionsSelected } =\n                        getCheckboxState(checkboxValue);\n\n                      return (\n                        <Flex\n                          key={propertyLabel}\n                          position=\"relative\"\n                          width={cellWidth}\n                          justifyContent=\"center\"\n                          alignItems=\"center\"\n                        >\n                          <Checkbox\n                            key={propertyLabel}\n                            disabled={isFormDisabled}\n                            name={checkboxName.join('..')}\n                            aria-label={formatMessage(\n                              {\n                                id: `Settings.permissions.select-by-permission`,\n                                defaultMessage: 'Select {label} permission',\n                              },\n                              { label: `${parentName} ${label} ${propertyLabel}` }\n                            )}\n                            // Keep same signature as packages/core/admin/admin/src/components/Roles/Permissions/index.js l.91\n                            onCheckedChange={(value) => {\n                              onChangeParentCheckbox({\n                                target: {\n                                  name: checkboxName.join('..'),\n                                  value: !!value,\n                                },\n                              });\n                            }}\n                            checked={\n                              hasSomeActionsSelected ? 'indeterminate' : hasAllActionsSelected\n                            }\n                          />\n                        </Flex>\n                      );\n                    }\n                  )}\n                </Flex>\n              </Flex>\n            </Flex>\n            {displayedRecursiveChildren && isActive && (\n              <Box paddingBottom={2}>\n                <SubActionRow\n                  isFormDisabled={isFormDisabled}\n                  parentName={`${parentName}..${value}`}\n                  pathToDataFromActionRow={pathToDataFromActionRow}\n                  propertyActions={propertyActions}\n                  propertyName={propertyName}\n                  recursiveLevel={recursiveLevel + 1}\n                  childrenForm={displayedRecursiveChildren.children}\n                />\n              </Box>\n            )}\n          </LeftBorderTimeline>\n        );\n      })}\n    </Box>\n  );\n};\n\nconst LeftBorderTimeline = styled<BoxComponent>(Box)<{ $isVisible?: boolean }>`\n  border-left: ${({ $isVisible, theme }) =>\n    $isVisible ? `4px solid ${theme.colors.primary200}` : '4px solid transparent'};\n`;\n\nconst RowStyle = styled<FlexComponent>(Flex)<{\n  $level: number;\n  $isCollapsable?: boolean;\n  $isActive?: boolean;\n}>`\n  padding-left: ${({ theme }) => theme.spaces[4]};\n  width: ${({ $level }) => 145 - $level * 36}px;\n\n  &:hover {\n    ${({ $isCollapsable, theme }) => $isCollapsable && activeStyle(theme)}\n  }\n\n  ${({ $isCollapsable }) =>\n    $isCollapsable &&\n    `\n      ${CarretIcon} {\n        display: flex;\n      }\n  `}\n  ${({ $isActive, theme }) => $isActive && activeStyle(theme)};\n`;\n\nconst RowLabel = styled<TypographyComponent>(Typography)``;\n\nconst TopTimeline = styled.div`\n  padding-top: ${({ theme }) => theme.spaces[2]};\n  margin-top: ${({ theme }) => theme.spaces[2]};\n  width: 0.4rem;\n  background-color: ${({ theme }) => theme.colors.primary200};\n  border-top-left-radius: 2px;\n  border-top-right-radius: 2px;\n`;\n\nconst StyledBox = styled<BoxComponent>(Box)`\n  transform: translate(-4px, -12px);\n\n  &:before {\n    content: '';\n    width: 0.4rem;\n    height: 1.2rem;\n    background: ${({ theme }) => theme.colors.primary200};\n    display: block;\n  }\n`;\n\nconst Svg = styled.svg<{ $color: keyof DefaultTheme['colors'] }>`\n  position: relative;\n  flex-shrink: 0;\n  transform: translate(-0.5px, -1px);\n\n  * {\n    fill: ${({ theme, $color }) => theme.colors[$color]};\n  }\n`;\n\n/* -------------------------------------------------------------------------------------------------\n * Header\n * -----------------------------------------------------------------------------------------------*/\n\ninterface HeaderProps {\n  headers?: PropertyAction[];\n  label: string;\n}\n\nconst Header = ({ headers = [], label }: HeaderProps) => {\n  const { formatMessage } = useIntl();\n\n  return (\n    <Flex>\n      <Flex width={firstRowWidth} height={rowHeight} shrink={0} alignItems=\"center\" paddingLeft={6}>\n        <Typography variant=\"sigma\" textColor=\"neutral500\">\n          {formatMessage(\n            {\n              id: 'Settings.roles.form.permission.property-label',\n              defaultMessage: '{label} permissions',\n            },\n            { label }\n          )}\n        </Typography>\n      </Flex>\n      {headers.map((header) => {\n        if (!header.isActionRelatedToCurrentProperty) {\n          return <Flex width={cellWidth} shrink={0} key={header.label} />;\n        }\n\n        return (\n          <Flex width={cellWidth} shrink={0} justifyContent=\"center\" key={header.label}>\n            <Typography variant=\"sigma\" textColor=\"neutral500\">\n              {formatMessage({\n                id: `Settings.roles.form.permissions.${header.label.toLowerCase()}`,\n                defaultMessage: header.label,\n              })}\n            </Typography>\n          </Flex>\n        );\n      })}\n    </Flex>\n  );\n};\n\nconst activeStyle = (theme: DefaultTheme) => css`\n  color: ${theme.colors.primary600};\n  font-weight: ${theme.fontWeights.bold};\n\n  ${CarretIcon} {\n    path {\n      fill: ${theme.colors.primary600};\n    }\n  }\n`;\n\nexport { CollapsePropertyMatrix };\n", "import * as React from 'react';\n\nimport { Box, BoxComponent, Button, ButtonProps } from '@strapi/design-system';\nimport { Cog } from '@strapi/icons';\nimport { useIntl } from 'react-intl';\nimport { styled } from 'styled-components';\n\ninterface ConditionsButtonProps extends Pick<ButtonProps, 'className' | 'onClick' | 'variant'> {\n  hasConditions?: boolean;\n}\n\nconst ConditionsButtonImpl = React.forwardRef<HTMLButtonElement, ConditionsButtonProps>(\n  ({ onClick, className, hasConditions = false, variant = 'tertiary' }, ref) => {\n    const { formatMessage } = useIntl();\n\n    return (\n      <ButtonContainer $hasConditions={hasConditions} className={className}>\n        <Button variant={variant} startIcon={<Cog />} onClick={onClick} ref={ref} type=\"button\">\n          {formatMessage({\n            id: 'global.settings',\n            defaultMessage: 'Settings',\n          })}\n        </Button>\n      </ButtonContainer>\n    );\n  }\n);\n\nconst ButtonContainer = styled<BoxComponent>(Box)<{ $hasConditions?: boolean }>`\n  ${({ $hasConditions, theme }) =>\n    $hasConditions &&\n    `\n    &:before {\n      content: '';\n      position: absolute;\n      top: -3px;\n      left: -10px;\n      width: 6px;\n      height: 6px;\n      border-radius: 2rem;\n      background: ${theme.colors.primary600};\n    }\n  `}\n`;\n\n/**\n * We reference the component directly in other styled-components\n * and as such we need it to have a className already assigned.\n * Therefore we wrapped the implementation in a styled function.\n */\nconst ConditionsButton = styled(ConditionsButtonImpl)``;\n\nexport { ConditionsButton };\nexport type { ConditionsButtonProps };\n", "import * as React from 'react';\n\nimport {\n  Box,\n  Button,\n  Flex,\n  Modal,\n  MultiSelectNested,\n  MultiSelectNestedProps,\n  Typography,\n  Breadcrumbs,\n  Crumb,\n} from '@strapi/design-system';\nimport { produce } from 'immer';\nimport get from 'lodash/get';\nimport groupBy from 'lodash/groupBy';\nimport upperFirst from 'lodash/upperFirst';\nimport { useIntl } from 'react-intl';\n\nimport { capitalise } from '../../../../../utils/strings';\nimport {\n  PermissionsDataManagerContextValue,\n  usePermissionsDataManager,\n} from '../hooks/usePermissionsDataManager';\n\nimport type { HiddenCheckboxAction, VisibleCheckboxAction } from './ContentTypeCollapses';\nimport type { ConditionForm } from '../utils/forms';\n\n/* -------------------------------------------------------------------------------------------------\n * ConditionsModal\n * -----------------------------------------------------------------------------------------------*/\n\ninterface ConditionAction extends Pick<ActionRowProps, 'label'> {\n  actionId: string;\n  isDisplayed: boolean;\n  hasSomeActionsSelected?: boolean;\n  hasAllActionsSelected?: boolean;\n  pathToConditionsObject: string[];\n}\n\ninterface ConditionsModalProps extends Pick<ActionRowProps, 'isFormDisabled'> {\n  actions?: Array<ConditionAction | HiddenCheckboxAction | VisibleCheckboxAction>;\n  headerBreadCrumbs?: string[];\n  onClose?: () => void;\n}\n\nconst ConditionsModal = ({\n  actions = [],\n  headerBreadCrumbs = [],\n  isFormDisabled,\n  onClose,\n}: ConditionsModalProps) => {\n  const { formatMessage } = useIntl();\n  const { availableConditions, modifiedData, onChangeConditions } = usePermissionsDataManager();\n\n  const arrayOfOptionsGroupedByCategory = React.useMemo(() => {\n    return Object.entries(groupBy(availableConditions, 'category'));\n  }, [availableConditions]);\n\n  const actionsToDisplay = actions.filter<VisibleCheckboxAction | ConditionAction>(\n    // @ts-expect-error – TODO: fix this type issue\n    ({ isDisplayed, hasSomeActionsSelected, hasAllActionsSelected }) =>\n      isDisplayed && Boolean(hasSomeActionsSelected || hasAllActionsSelected)\n  );\n\n  const [state, setState] = React.useState(\n    createDefaultConditionsForm(actionsToDisplay, modifiedData, arrayOfOptionsGroupedByCategory)\n  );\n\n  const handleChange = (name: string, values: ConditionForm) => {\n    setState(\n      produce((draft) => {\n        if (!draft[name]) {\n          draft[name] = {};\n        }\n\n        if (!draft[name].default) {\n          draft[name].default = {};\n        }\n\n        draft[name].default = values;\n      })\n    );\n  };\n\n  const handleSubmit = () => {\n    const conditionsWithoutCategory = Object.entries(state).reduce<Record<string, ConditionForm>>(\n      (acc, current) => {\n        const [key, value] = current;\n\n        const merged = Object.values(value).reduce((acc1, current1) => {\n          return { ...acc1, ...current1 };\n        }, {});\n\n        acc[key] = merged;\n\n        return acc;\n      },\n      {}\n    );\n\n    onChangeConditions(conditionsWithoutCategory);\n    onClose && onClose();\n  };\n\n  const onCloseModal = () => {\n    setState(\n      createDefaultConditionsForm(actionsToDisplay, modifiedData, arrayOfOptionsGroupedByCategory)\n    );\n\n    onClose && onClose();\n  };\n\n  return (\n    <Modal.Content>\n      <Modal.Header>\n        <Breadcrumbs id=\"condition-modal-breadcrumbs\" label={headerBreadCrumbs.join(', ')}>\n          {headerBreadCrumbs.map((label, index, arr) => (\n            <Crumb isCurrent={index === arr.length - 1} key={label}>\n              {upperFirst(\n                formatMessage({\n                  id: label,\n                  defaultMessage: label,\n                })\n              )}\n            </Crumb>\n          ))}\n        </Breadcrumbs>\n      </Modal.Header>\n      <Modal.Body>\n        {actionsToDisplay.length === 0 && (\n          <Typography>\n            {formatMessage({\n              id: 'Settings.permissions.conditions.no-actions',\n              defaultMessage:\n                'You first need to select actions (create, read, update, ...) before defining conditions on them.',\n            })}\n          </Typography>\n        )}\n        <ul>\n          {actionsToDisplay.map(({ actionId, label, pathToConditionsObject }, index) => {\n            const name = pathToConditionsObject.join('..');\n\n            return (\n              <ActionRow\n                key={actionId}\n                arrayOfOptionsGroupedByCategory={arrayOfOptionsGroupedByCategory}\n                label={label}\n                isFormDisabled={isFormDisabled}\n                isGrey={index % 2 === 0}\n                name={name}\n                onChange={handleChange}\n                value={get(state, name, {})}\n              />\n            );\n          })}\n        </ul>\n      </Modal.Body>\n      <Modal.Footer>\n        <Button variant=\"tertiary\" onClick={() => onCloseModal()}>\n          {formatMessage({ id: 'app.components.Button.cancel', defaultMessage: 'Cancel' })}\n        </Button>\n        <Button onClick={handleSubmit}>\n          {formatMessage({\n            id: 'Settings.permissions.conditions.apply',\n            defaultMessage: 'Apply',\n          })}\n        </Button>\n      </Modal.Footer>\n    </Modal.Content>\n  );\n};\n\nconst createDefaultConditionsForm = (\n  actionsToDisplay: Array<ConditionAction | VisibleCheckboxAction>,\n  modifiedData: PermissionsDataManagerContextValue['modifiedData'],\n  arrayOfOptionsGroupedByCategory: ActionRowProps['arrayOfOptionsGroupedByCategory']\n) => {\n  return actionsToDisplay.reduce<Record<string, Record<string, ConditionForm>>>((acc, current) => {\n    const valueFromModifiedData: ConditionForm = get(\n      modifiedData,\n      [...current.pathToConditionsObject, 'conditions'],\n      {}\n    );\n\n    const categoryDefaultForm = arrayOfOptionsGroupedByCategory.reduce<\n      Record<string, ConditionForm>\n    >((acc, current) => {\n      const [categoryName, relatedConditions] = current;\n\n      const conditionsForm = relatedConditions.reduce<ConditionForm>((acc, current) => {\n        acc[current.id] = get(valueFromModifiedData, current.id, false);\n\n        return acc;\n      }, {});\n\n      acc[categoryName] = conditionsForm;\n\n      return acc;\n    }, {});\n\n    acc[current.pathToConditionsObject.join('..')] = categoryDefaultForm;\n\n    return acc;\n  }, {});\n};\n\n/* -------------------------------------------------------------------------------------------------\n * ActionRow\n * -----------------------------------------------------------------------------------------------*/\n\ninterface ActionRowProps {\n  arrayOfOptionsGroupedByCategory: Array<\n    [string, PermissionsDataManagerContextValue['availableConditions']]\n  >;\n  isFormDisabled?: boolean;\n  isGrey?: boolean;\n  label: string;\n  name: string;\n  onChange?: (name: string, values: Record<string, boolean>) => void;\n  value: Record<string, ConditionForm>;\n}\n\nconst ActionRow = ({\n  arrayOfOptionsGroupedByCategory,\n  isFormDisabled = false,\n  isGrey = false,\n  label,\n  name,\n  onChange,\n  value,\n}: ActionRowProps) => {\n  const { formatMessage } = useIntl();\n\n  const handleChange: MultiSelectNestedProps['onChange'] = (val) => {\n    if (onChange) {\n      onChange(name, getNewStateFromChangedValues(arrayOfOptionsGroupedByCategory, val));\n    }\n  };\n\n  return (\n    <Flex\n      tag=\"li\"\n      background={isGrey ? 'neutral100' : 'neutral0'}\n      paddingBottom={3}\n      paddingTop={3}\n      justifyContent={'space-evenly'}\n    >\n      <Flex style={{ width: 180 }}>\n        <Typography variant=\"sigma\" textColor=\"neutral600\">\n          {formatMessage({\n            id: 'Settings.permissions.conditions.can',\n            defaultMessage: 'Can',\n          })}\n          &nbsp;\n        </Typography>\n        <Typography variant=\"sigma\" title={label} textColor=\"primary600\" ellipsis>\n          {formatMessage({\n            id: `Settings.roles.form.permissions.${label.toLowerCase()}`,\n            defaultMessage: label,\n          })}\n        </Typography>\n        <Typography variant=\"sigma\" textColor=\"neutral600\">\n          &nbsp;\n          {formatMessage({\n            id: 'Settings.permissions.conditions.when',\n            defaultMessage: 'When',\n          })}\n        </Typography>\n      </Flex>\n      <Box style={{ maxWidth: 430, width: '100%' }}>\n        <MultiSelectNested\n          id={name}\n          customizeContent={(values = []) => `${values.length} currently selected`}\n          onChange={handleChange}\n          value={getSelectedValues(value)}\n          options={getNestedOptions(arrayOfOptionsGroupedByCategory)}\n          disabled={isFormDisabled}\n        />\n      </Box>\n    </Flex>\n  );\n};\n\nconst getSelectedValues = (rawValue: Record<string, ConditionForm>): string[] =>\n  Object.values(rawValue)\n    .map((x) =>\n      Object.entries(x)\n        .filter(([, value]) => value)\n        .map(([key]) => key)\n    )\n    .flat();\n\nconst getNestedOptions = (options: ActionRowProps['arrayOfOptionsGroupedByCategory']) =>\n  options.reduce<MultiSelectNestedProps['options']>((acc, [label, children]) => {\n    acc.push({\n      label: capitalise(label),\n      children: children.map((child) => ({\n        label: child.displayName,\n        value: child.id,\n      })),\n    });\n\n    return acc;\n  }, []);\n\nconst getNewStateFromChangedValues = (\n  options: ActionRowProps['arrayOfOptionsGroupedByCategory'],\n  changedValues: string[]\n) =>\n  options\n    .map(([, values]) => values)\n    .flat()\n    .reduce<Record<string, boolean>>(\n      (acc, curr) => ({ [curr.id]: changedValues.includes(curr.id), ...acc }),\n      {}\n    );\n\nexport { ConditionsModal };\nexport type { ConditionsModalProps };\n", "import * as React from 'react';\n\nimport { Checkbox, Box, BoxComponent, Flex, FlexComponent, Modal } from '@strapi/design-system';\nimport { ChevronDown, ChevronUp } from '@strapi/icons';\nimport get from 'lodash/get';\nimport isEmpty from 'lodash/isEmpty';\nimport omit from 'lodash/omit';\nimport { useIntl } from 'react-intl';\nimport { styled, DefaultTheme } from 'styled-components';\n\nimport { Action, Subject } from '../../../../../../../shared/contracts/permissions';\nimport { capitalise } from '../../../../../utils/strings';\nimport {\n  PermissionsDataManagerContextValue,\n  usePermissionsDataManager,\n} from '../hooks/usePermissionsDataManager';\nimport { cellWidth, rowHeight } from '../utils/constants';\nimport { createArrayOfValues } from '../utils/createArrayOfValues';\nimport { ConditionForm } from '../utils/forms';\nimport { getCheckboxState } from '../utils/getCheckboxState';\n\nimport { CollapsePropertyMatrix } from './CollapsePropertyMatrix';\nimport { ConditionsButton } from './ConditionsButton';\nimport { ConditionsModal } from './ConditionsModal';\nimport { HiddenAction } from './HiddenAction';\nimport { RowLabelWithCheckbox, RowLabelWithCheckboxProps } from './RowLabelWithCheckbox';\n\n/* -------------------------------------------------------------------------------------------------\n * ContentTypeCollapses\n * -----------------------------------------------------------------------------------------------*/\n\ninterface ContentTypeCollapsesProps extends Pick<CollapseProps, 'pathToData'> {\n  actions?: Action[];\n  isFormDisabled?: boolean;\n  subjects?: Subject[];\n}\n\nconst ContentTypeCollapses = ({\n  actions = [],\n  isFormDisabled,\n  pathToData,\n  subjects = [],\n}: ContentTypeCollapsesProps) => {\n  const [collapseToOpen, setCollapseToOpen] = React.useState<string | null>(null);\n\n  const handleClickToggleCollapse = (collapseName: string) => () => {\n    const nextCollapseToOpen = collapseToOpen === collapseName ? null : collapseName;\n\n    setCollapseToOpen(nextCollapseToOpen);\n  };\n\n  return (\n    <>\n      {subjects.map(({ uid, label, properties }, index) => {\n        const isActive = collapseToOpen === uid;\n        const availableActions = actions.map((action) => ({\n          ...action,\n          isDisplayed: Array.isArray(action.subjects) && action.subjects.indexOf(uid) !== -1,\n        }));\n        return (\n          <Flex\n            key={uid}\n            direction=\"column\"\n            display=\"inline-flex\"\n            alignItems=\"stretch\"\n            minWidth=\"100%\"\n            borderColor={isActive ? 'primary600' : undefined}\n          >\n            <Collapse\n              availableActions={availableActions}\n              isActive={isActive}\n              isGrey={index % 2 === 0}\n              isFormDisabled={isFormDisabled}\n              label={label}\n              onClickToggle={handleClickToggleCollapse(uid)}\n              pathToData={[pathToData, uid].join('..')}\n            />\n            {isActive &&\n              properties.map(({ label: propertyLabel, value, children: childrenForm }) => {\n                return (\n                  <CollapsePropertyMatrix\n                    availableActions={availableActions}\n                    childrenForm={childrenForm}\n                    isFormDisabled={isFormDisabled}\n                    label={propertyLabel}\n                    pathToData={[pathToData, uid].join('..')}\n                    propertyName={value}\n                    key={value}\n                  />\n                );\n              })}\n          </Flex>\n        );\n      })}\n    </>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * Collapse\n * -----------------------------------------------------------------------------------------------*/\n\ninterface CollapseProps\n  extends Pick<RowLabelWithCheckboxProps, 'isActive' | 'isFormDisabled' | 'label'> {\n  availableActions?: Array<Action & { isDisplayed: boolean }>;\n  isGrey?: boolean;\n  onClickToggle: RowLabelWithCheckboxProps['onClick'];\n  pathToData: string;\n}\n\nconst Collapse = ({\n  availableActions = [],\n  isActive = false,\n  isGrey = false,\n  isFormDisabled = false,\n  label,\n  onClickToggle,\n  pathToData,\n}: CollapseProps) => {\n  const { formatMessage } = useIntl();\n  const { modifiedData, onChangeParentCheckbox, onChangeSimpleCheckbox } =\n    usePermissionsDataManager();\n  const [isConditionModalOpen, setIsConditionModalOpen] = React.useState(false);\n\n  // This corresponds to the data related to the CT left checkbox\n  // modifiedData: { collectionTypes: { [ctuid]: {create: {properties: { fields: {f1: true} }, update: {}, ... } } } }\n  const mainData = get(modifiedData, pathToData.split('..'), {});\n  // The utils we are using: getCheckboxState, retrieves all the boolean leafs of an object in order\n  // to return the state of checkbox. Since the conditions are not related to the property we need to remove the key from the object.\n  const dataWithoutCondition = React.useMemo(() => {\n    return Object.keys(mainData).reduce<Record<string, ConditionForm>>((acc, current) => {\n      acc[current] = omit(mainData[current], 'conditions');\n\n      return acc;\n    }, {});\n  }, [mainData]);\n\n  const { hasAllActionsSelected, hasSomeActionsSelected } = getCheckboxState(dataWithoutCondition);\n\n  // Here we create an array of <checkbox>, since the state of each one of them is used in\n  // order to know if whether or not we need to display the associated action in\n  // the <ConditionsModal />\n  const checkboxesActions = React.useMemo(() => {\n    return generateCheckboxesActions(availableActions, modifiedData, pathToData);\n  }, [availableActions, modifiedData, pathToData]);\n\n  // @ts-expect-error – hasConditions does not exist on all versions of checkboxesActions.\n  const doesConditionButtonHasConditions = checkboxesActions.some((action) => action.hasConditions);\n\n  return (\n    <BoxWrapper $isActive={isActive}>\n      <Wrapper\n        height={rowHeight}\n        flex={1}\n        alignItems=\"center\"\n        background={isGrey ? 'neutral100' : 'neutral0'}\n      >\n        <RowLabelWithCheckbox\n          isCollapsable\n          isFormDisabled={isFormDisabled}\n          label={capitalise(label)}\n          checkboxName={pathToData}\n          onChange={onChangeParentCheckbox}\n          onClick={onClickToggle}\n          someChecked={hasSomeActionsSelected}\n          value={hasAllActionsSelected}\n          isActive={isActive}\n        >\n          <Chevron paddingLeft={2}>{isActive ? <ChevronUp /> : <ChevronDown />}</Chevron>\n        </RowLabelWithCheckbox>\n\n        <Flex style={{ flex: 1 }}>\n          {checkboxesActions.map(\n            ({ actionId, hasSomeActionsSelected, isDisplayed, ...restAction }) => {\n              if (!isDisplayed) {\n                return <HiddenAction key={actionId} />;\n              }\n\n              const {\n                hasConditions,\n                hasAllActionsSelected,\n                isParentCheckbox,\n                checkboxName,\n                label: permissionLabel,\n              } = restAction as VisibleCheckboxAction;\n\n              if (isParentCheckbox) {\n                return (\n                  <Cell key={actionId} justifyContent=\"center\" alignItems=\"center\">\n                    {hasConditions && (\n                      <Box\n                        tag=\"span\"\n                        position=\"absolute\"\n                        top=\"-6px\"\n                        left=\"37px\"\n                        width=\"6px\"\n                        height=\"6px\"\n                        borderRadius=\"20px\"\n                        background=\"primary600\"\n                      />\n                    )}\n                    <Checkbox\n                      disabled={isFormDisabled}\n                      name={checkboxName}\n                      aria-label={formatMessage(\n                        {\n                          id: `Settings.permissions.select-by-permission`,\n                          defaultMessage: 'Select {label} permission',\n                        },\n                        { label: `${permissionLabel} ${label}` }\n                      )}\n                      // Keep same signature as packages/core/admin/admin/src/components/Roles/Permissions/index.js l.91\n                      onCheckedChange={(value) => {\n                        onChangeParentCheckbox({\n                          target: {\n                            name: checkboxName,\n                            value: !!value,\n                          },\n                        });\n                      }}\n                      checked={hasSomeActionsSelected ? 'indeterminate' : hasAllActionsSelected}\n                    />\n                  </Cell>\n                );\n              }\n\n              return (\n                <Cell key={actionId} justifyContent=\"center\" alignItems=\"center\">\n                  {hasConditions && (\n                    <Box\n                      tag=\"span\"\n                      position=\"absolute\"\n                      top=\"-6px\"\n                      left=\"37px\"\n                      width=\"6px\"\n                      height=\"6px\"\n                      borderRadius=\"20px\"\n                      background=\"primary600\"\n                    />\n                  )}\n                  <Checkbox\n                    disabled={isFormDisabled}\n                    name={checkboxName}\n                    // Keep same signature as packages/core/admin/admin/src/components/Roles/Permissions/index.js l.91\n                    onCheckedChange={(value) => {\n                      onChangeSimpleCheckbox({\n                        target: {\n                          name: checkboxName,\n                          value: !!value,\n                        },\n                      });\n                    }}\n                    checked={hasConditions ? 'indeterminate' : hasAllActionsSelected}\n                  />\n                </Cell>\n              );\n            }\n          )}\n        </Flex>\n      </Wrapper>\n      <Box bottom=\"10px\" right=\"9px\" position=\"absolute\">\n        <Modal.Root\n          open={isConditionModalOpen}\n          onOpenChange={() => {\n            setIsConditionModalOpen((prev) => !prev);\n          }}\n        >\n          <Modal.Trigger>\n            <ConditionsButton hasConditions={doesConditionButtonHasConditions} />\n          </Modal.Trigger>\n          <ConditionsModal\n            headerBreadCrumbs={[label, 'Settings.permissions.conditions.conditions']}\n            actions={checkboxesActions}\n            isFormDisabled={isFormDisabled}\n            onClose={() => {\n              setIsConditionModalOpen(false);\n            }}\n          />\n        </Modal.Root>\n      </Box>\n    </BoxWrapper>\n  );\n};\n\ninterface VisibleCheckboxAction {\n  actionId: string;\n  hasAllActionsSelected: boolean;\n  hasSomeActionsSelected: boolean;\n  isDisplayed: true;\n  isParentCheckbox: boolean;\n  checkboxName: string;\n  label: string;\n  hasConditions: boolean;\n  pathToConditionsObject: string[];\n}\n\ninterface HiddenCheckboxAction {\n  actionId: string;\n  isDisplayed: false;\n  hasAllActionsSelected?: never;\n  hasSomeActionsSelected: boolean;\n}\n\nconst generateCheckboxesActions = (\n  availableActions: Array<Action & { isDisplayed: boolean }>,\n  modifiedData: PermissionsDataManagerContextValue['modifiedData'],\n  pathToData: string\n): Array<VisibleCheckboxAction | HiddenCheckboxAction> => {\n  return availableActions.map(({ actionId, isDisplayed, applyToProperties, label }) => {\n    if (!isDisplayed) {\n      return { actionId, hasSomeActionsSelected: false, isDisplayed };\n    }\n\n    const baseCheckboxNameArray = [...pathToData.split('..'), actionId];\n    const checkboxNameArray = isEmpty(applyToProperties)\n      ? [...baseCheckboxNameArray, 'properties', 'enabled']\n      : baseCheckboxNameArray;\n    const conditionsValue = get(modifiedData, [...baseCheckboxNameArray, 'conditions'], null);\n\n    const baseCheckboxAction = {\n      actionId,\n      checkboxName: checkboxNameArray.join('..'),\n      hasConditions: createArrayOfValues(conditionsValue).some((val) => val),\n      isDisplayed,\n      label,\n      pathToConditionsObject: baseCheckboxNameArray,\n    };\n\n    if (isEmpty(applyToProperties)) {\n      const value = get(modifiedData, checkboxNameArray, false);\n\n      // Since applyToProperties is empty it is not a parent checkbox, therefore hasAllActionsSelected is\n      // equal to hasSomeActionsSelected\n      return {\n        ...baseCheckboxAction,\n        hasAllActionsSelected: value,\n        hasSomeActionsSelected: value,\n        isParentCheckbox: false,\n      };\n    }\n\n    const mainData = get(modifiedData, checkboxNameArray, null);\n\n    const { hasAllActionsSelected, hasSomeActionsSelected } = getCheckboxState(mainData);\n\n    return {\n      ...baseCheckboxAction,\n      hasAllActionsSelected,\n      hasSomeActionsSelected,\n      isParentCheckbox: true,\n    };\n  });\n};\n\nconst activeRowStyle = (theme: DefaultTheme, isActive?: boolean): string => `\n  ${Wrapper} {\n    background-color: ${theme.colors.primary100};\n    color: ${theme.colors.primary600};\n    border-radius: ${isActive ? '2px 2px 0 0' : '2px'};\n    font-weight: ${theme.fontWeights.bold};\n  }\n\n  ${Chevron} {\n    display: flex;\n  }\n  ${ConditionsButton} {\n    display: block;\n  }\n\n  &:focus-within {\n    ${() => activeRowStyle(theme, isActive)}\n  }\n`;\n\nconst Wrapper = styled<FlexComponent>(Flex)`\n  border: 1px solid transparent;\n`;\n\nconst BoxWrapper = styled.div<{ $isActive: boolean }>`\n  display: inline-flex;\n  min-width: 100%;\n  position: relative;\n\n  ${ConditionsButton} {\n    display: none;\n  }\n\n  ${({ $isActive, theme }) => $isActive && activeRowStyle(theme, $isActive)}\n\n  &:hover {\n    ${({ theme, $isActive }) => activeRowStyle(theme, $isActive)}\n  }\n`;\n\nconst Cell = styled<FlexComponent>(Flex)`\n  width: ${cellWidth};\n  position: relative;\n`;\n\nconst Chevron = styled<BoxComponent>(Box)`\n  display: none;\n\n  svg {\n    width: 1.4rem;\n  }\n\n  path {\n    fill: ${({ theme }) => theme.colors.primary600};\n  }\n`;\n\nexport { ContentTypeCollapses };\nexport type { ContentTypeCollapsesProps, HiddenCheckboxAction, VisibleCheckboxAction };\n", "import * as React from 'react';\n\nimport { Checkbox, Box, Flex, Typography } from '@strapi/design-system';\nimport get from 'lodash/get';\nimport { useIntl } from 'react-intl';\n\nimport { Action } from '../../../../../../../shared/contracts/permissions';\nimport {\n  PermissionsDataManagerContextValue,\n  usePermissionsDataManager,\n} from '../hooks/usePermissionsDataManager';\nimport { cellWidth, firstRowWidth } from '../utils/constants';\nimport { RecursiveRecordOfBooleans, getCheckboxState } from '../utils/getCheckboxState';\nimport { removeConditionKeyFromData } from '../utils/removeConditionKeyFromData';\n\ninterface GlobalActionsProps {\n  actions: Action[];\n  isFormDisabled?: boolean;\n  kind: Extract<keyof PermissionsDataManagerContextValue['modifiedData'], `${string}Types`>;\n}\n\nconst GlobalActions = ({ actions = [], isFormDisabled, kind }: GlobalActionsProps) => {\n  const { formatMessage } = useIntl();\n  const { modifiedData, onChangeCollectionTypeGlobalActionCheckbox } = usePermissionsDataManager();\n\n  const displayedActions = actions.filter(({ subjects }) => subjects && subjects.length);\n\n  const checkboxesState = React.useMemo(() => {\n    const actionsIds = displayedActions.map(({ actionId }) => actionId);\n\n    const data = modifiedData[kind];\n\n    const relatedActionsData = actionsIds.reduce<Record<string, RecursiveRecordOfBooleans>>(\n      (acc, actionId) => {\n        Object.keys(data).forEach((ctUid) => {\n          const actionIdData = get(data, [ctUid, actionId]);\n\n          const actionIdState = { [ctUid]: removeConditionKeyFromData(actionIdData)! };\n\n          if (!acc[actionId]) {\n            acc[actionId] = actionIdState;\n          } else {\n            acc[actionId] = { ...acc[actionId], ...actionIdState };\n          }\n        });\n\n        return acc;\n      },\n      {}\n    );\n\n    const checkboxesState = Object.keys(relatedActionsData).reduce<\n      Record<\n        string,\n        {\n          hasAllActionsSelected: boolean;\n          hasSomeActionsSelected: boolean;\n        }\n      >\n    >((acc, current) => {\n      acc[current] = getCheckboxState(relatedActionsData[current]);\n\n      return acc;\n    }, {});\n\n    return checkboxesState;\n  }, [modifiedData, displayedActions, kind]);\n\n  return (\n    <Box paddingBottom={4} paddingTop={6} style={{ paddingLeft: firstRowWidth }}>\n      <Flex gap={0}>\n        {displayedActions.map(({ label, actionId }) => {\n          return (\n            <Flex\n              shrink={0}\n              width={cellWidth}\n              direction=\"column\"\n              alignItems=\"center\"\n              justifyContent=\"center\"\n              key={actionId}\n              gap={3}\n            >\n              <Typography variant=\"sigma\" textColor=\"neutral500\">\n                {formatMessage({\n                  id: `Settings.roles.form.permissions.${label.toLowerCase()}`,\n                  defaultMessage: label,\n                })}\n              </Typography>\n              <Checkbox\n                disabled={isFormDisabled}\n                onCheckedChange={(value) => {\n                  onChangeCollectionTypeGlobalActionCheckbox(kind, actionId, !!value);\n                }}\n                name={actionId}\n                aria-label={formatMessage(\n                  {\n                    id: `Settings.permissions.select-all-by-permission`,\n                    defaultMessage: 'Select all {label} permissions',\n                  },\n                  {\n                    label: formatMessage({\n                      id: `Settings.roles.form.permissions.${label.toLowerCase()}`,\n                      defaultMessage: label,\n                    }),\n                  }\n                )}\n                checked={\n                  get(checkboxesState, [actionId, 'hasSomeActionsSelected'], false)\n                    ? 'indeterminate'\n                    : get(checkboxesState, [actionId, 'hasAllActionsSelected'], false)\n                }\n              />\n            </Flex>\n          );\n        })}\n      </Flex>\n    </Box>\n  );\n};\n\nexport { GlobalActions };\nexport type { GlobalActionsProps };\n", "import { Box } from '@strapi/design-system';\n\nimport { ContentPermission } from '../../../../../../../shared/contracts/permissions';\n\nimport { ContentTypeCollapses } from './ContentTypeCollapses';\nimport { GlobalActions, GlobalActionsProps } from './GlobalActions';\n\ninterface ContentTypesProps extends Pick<GlobalActionsProps, 'kind'> {\n  isFormDisabled?: boolean;\n  layout: ContentPermission;\n}\n\nconst ContentTypes = ({\n  isFormDisabled,\n  kind,\n  layout: { actions, subjects },\n}: ContentTypesProps) => {\n  const sortedSubjects = [...subjects].sort((a, b) => a.label.localeCompare(b.label));\n\n  return (\n    <Box background=\"neutral0\">\n      <GlobalActions actions={actions} kind={kind} isFormDisabled={isFormDisabled} />\n      <ContentTypeCollapses\n        actions={actions}\n        isFormDisabled={isFormDisabled}\n        pathToData={kind}\n        subjects={sortedSubjects}\n      />\n    </Box>\n  );\n};\n\nexport { ContentTypes };\n", "import * as React from 'react';\n\nimport {\n  Accordion,\n  Box,\n  BoxComponent,\n  Checkbox,\n  Flex,\n  Grid,\n  Modal,\n  Typography,\n} from '@strapi/design-system';\nimport get from 'lodash/get';\nimport { useIntl } from 'react-intl';\nimport { styled } from 'styled-components';\n\nimport {\n  SettingPermission,\n  PluginPermission,\n} from '../../../../../../../shared/contracts/permissions';\nimport { capitalise } from '../../../../../utils/strings';\nimport {\n  PermissionsDataManagerContextValue,\n  usePermissionsDataManager,\n} from '../hooks/usePermissionsDataManager';\nimport { createArrayOfValues } from '../utils/createArrayOfValues';\nimport { ChildrenForm, ConditionForm } from '../utils/forms';\nimport { RecursiveRecordOfBooleans, getCheckboxState } from '../utils/getCheckboxState';\nimport { removeConditionKeyFromData } from '../utils/removeConditionKeyFromData';\n\nimport { ConditionsButton } from './ConditionsButton';\nimport { ConditionsModal } from './ConditionsModal';\n\nimport type { GenericLayout } from '../utils/layouts';\n\n/* -------------------------------------------------------------------------------------------------\n * PluginsAndSettingsPermissions\n * -----------------------------------------------------------------------------------------------*/\n\ntype Layout = GenericLayout<SettingPermission | PluginPermission>[];\n\ninterface PluginsAndSettingsPermissionsProps extends Pick<RowProps, 'kind' | 'isFormDisabled'> {\n  layout: Layout;\n}\n\nconst PluginsAndSettingsPermissions = ({\n  layout,\n  ...restProps\n}: PluginsAndSettingsPermissionsProps) => {\n  return (\n    <Box padding={6} background=\"neutral0\">\n      <Accordion.Root size=\"M\">\n        {layout.map(({ category, categoryId, childrenForm }, index) => {\n          return (\n            <Row\n              key={category}\n              childrenForm={childrenForm}\n              variant={index % 2 === 1 ? 'primary' : 'secondary'}\n              name={category}\n              pathToData={[restProps.kind, categoryId]}\n              {...restProps}\n            />\n          );\n        })}\n      </Accordion.Root>\n    </Box>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * Row\n * -----------------------------------------------------------------------------------------------*/\n\ninterface RowProps\n  extends Pick<Layout[number], 'childrenForm'>,\n    Pick<Accordion.HeaderProps, 'variant'> {\n  kind: Exclude<keyof PermissionsDataManagerContextValue['modifiedData'], `${string}Types`>;\n  name: string;\n  isFormDisabled?: boolean;\n  pathToData: string[];\n}\n\nconst Row = ({\n  childrenForm,\n  kind,\n  name,\n  isFormDisabled = false,\n  variant,\n  pathToData,\n}: RowProps) => {\n  const { formatMessage } = useIntl();\n\n  const categoryName = name.split('::').pop() ?? '';\n\n  return (\n    <Accordion.Item value={name}>\n      <Accordion.Header variant={variant}>\n        <Accordion.Trigger\n          caretPosition=\"right\"\n          description={`${formatMessage(\n            { id: 'Settings.permissions.category', defaultMessage: categoryName },\n            { category: categoryName }\n          )} ${kind === 'plugins' ? 'plugin' : kind}`}\n        >\n          {capitalise(categoryName)}\n        </Accordion.Trigger>\n      </Accordion.Header>\n      <Accordion.Content>\n        <Box padding={6}>\n          {childrenForm.map(({ actions, subCategoryName, subCategoryId }) => (\n            <SubCategory\n              key={subCategoryName}\n              actions={actions}\n              categoryName={categoryName}\n              isFormDisabled={isFormDisabled}\n              subCategoryName={subCategoryName}\n              pathToData={[...pathToData, subCategoryId]}\n            />\n          ))}\n        </Box>\n      </Accordion.Content>\n    </Accordion.Item>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * SubCategory\n * -----------------------------------------------------------------------------------------------*/\n\ninterface SubCategoryProps {\n  actions?: Array<SettingPermission | PluginPermission>;\n  categoryName: string;\n  isFormDisabled?: boolean;\n  subCategoryName: string;\n  pathToData: string[];\n}\n\nconst SubCategory = ({\n  actions = [],\n  categoryName,\n  isFormDisabled,\n  subCategoryName,\n  pathToData,\n}: SubCategoryProps) => {\n  const { modifiedData, onChangeParentCheckbox, onChangeSimpleCheckbox } =\n    usePermissionsDataManager();\n  const [isConditionModalOpen, setIsConditionModalOpen] = React.useState(false);\n  const { formatMessage } = useIntl();\n\n  const mainData = get(modifiedData, pathToData, {});\n\n  const dataWithoutCondition = React.useMemo(() => {\n    return Object.keys(mainData).reduce<RecursiveRecordOfBooleans>((acc, current) => {\n      acc[current] = removeConditionKeyFromData(mainData[current])!;\n\n      return acc;\n    }, {});\n  }, [mainData]);\n\n  const { hasAllActionsSelected, hasSomeActionsSelected } = getCheckboxState(dataWithoutCondition);\n\n  // We need to format the actions so it matches the shape of the ConditionsModal actions props\n  const formattedActions = React.useMemo(() => {\n    return actions.map((action) => {\n      const checkboxName = [...pathToData, action.action, 'properties', 'enabled'];\n      const checkboxValue = get(modifiedData, checkboxName, false);\n      const conditionValue = get(modifiedData, [...pathToData, action.action, 'conditions'], {});\n      const hasConditions = createArrayOfValues(conditionValue).some((val) => val);\n\n      return {\n        ...action,\n        isDisplayed: checkboxValue,\n        checkboxName: checkboxName.join('..'),\n        hasSomeActionsSelected: checkboxValue,\n        value: checkboxValue,\n        hasConditions,\n        label: action.displayName,\n        actionId: action.action,\n        pathToConditionsObject: [...pathToData, action.action],\n      };\n    });\n  }, [actions, modifiedData, pathToData]);\n\n  const datum: ChildrenForm = get(modifiedData, [...pathToData], {});\n\n  const doesButtonHasCondition = createArrayOfValues(\n    Object.entries(datum).reduce<Record<string, ConditionForm>>((acc, current) => {\n      const [catName, { conditions }] = current;\n\n      acc[catName] = conditions;\n\n      return acc;\n    }, {})\n  ).some((val) => val);\n\n  return (\n    <>\n      <Box>\n        <Flex justifyContent=\"space-between\" alignItems=\"center\">\n          <Box paddingRight={4}>\n            <Typography variant=\"sigma\" textColor=\"neutral600\">\n              {subCategoryName}\n            </Typography>\n          </Box>\n          <Border flex={1} />\n          <Box paddingLeft={4}>\n            <Checkbox\n              name={pathToData.join('..')}\n              disabled={isFormDisabled}\n              // Keep same signature as packages/core/admin/admin/src/components/Roles/Permissions/index.js l.91\n              onCheckedChange={(value) => {\n                onChangeParentCheckbox({\n                  target: {\n                    name: pathToData.join('..'),\n                    value: !!value,\n                  },\n                });\n              }}\n              checked={hasSomeActionsSelected ? 'indeterminate' : hasAllActionsSelected}\n            >\n              {formatMessage({ id: 'app.utils.select-all', defaultMessage: 'Select all' })}\n            </Checkbox>\n          </Box>\n        </Flex>\n        <Flex paddingTop={6} paddingBottom={6}>\n          <Grid.Root gap={2} style={{ flex: 1 }}>\n            {formattedActions.map(({ checkboxName, value, action, displayName, hasConditions }) => {\n              return (\n                <Grid.Item col={3} key={action} direction=\"column\" alignItems=\"start\">\n                  <CheckboxWrapper $disabled={isFormDisabled} $hasConditions={hasConditions}>\n                    <Checkbox\n                      name={checkboxName}\n                      disabled={isFormDisabled}\n                      // Keep same signature as packages/core/admin/admin/src/components/Roles/Permissions/index.js l.91\n                      onCheckedChange={(value) => {\n                        onChangeSimpleCheckbox({\n                          target: {\n                            name: checkboxName,\n                            value: !!value,\n                          },\n                        });\n                      }}\n                      checked={value}\n                    >\n                      {displayName}\n                    </Checkbox>\n                  </CheckboxWrapper>\n                </Grid.Item>\n              );\n            })}\n          </Grid.Root>\n          <Modal.Root\n            open={isConditionModalOpen}\n            onOpenChange={() => {\n              setIsConditionModalOpen((prev) => !prev);\n            }}\n          >\n            <Modal.Trigger>\n              <ConditionsButton hasConditions={doesButtonHasCondition} />\n            </Modal.Trigger>\n            <ConditionsModal\n              headerBreadCrumbs={[categoryName, subCategoryName]}\n              actions={formattedActions}\n              isFormDisabled={isFormDisabled}\n              onClose={() => {\n                setIsConditionModalOpen(false);\n              }}\n            />\n          </Modal.Root>\n        </Flex>\n      </Box>\n    </>\n  );\n};\n\nconst Border = styled<BoxComponent>(Box)`\n  align-self: center;\n  border-top: 1px solid ${({ theme }) => theme.colors.neutral150};\n`;\n\nconst CheckboxWrapper = styled.div<{ $hasConditions?: boolean; $disabled?: boolean }>`\n  position: relative;\n  word-break: keep-all;\n  ${({ $hasConditions, $disabled, theme }) =>\n    $hasConditions &&\n    `\n    &:before {\n      content: '';\n      position: absolute;\n      top: -0.4rem;\n      left: -0.8rem;\n      width: 0.6rem;\n      height: 0.6rem;\n      border-radius: 2rem;\n      background: ${$disabled ? theme.colors.neutral100 : theme.colors.primary600};\n    }\n  `}\n`;\n\nexport { PluginsAndSettingsPermissions };\n", "import * as React from 'react';\n\nimport { Tabs } from '@strapi/design-system';\nimport { produce } from 'immer';\nimport cloneDeep from 'lodash/cloneDeep';\nimport get from 'lodash/get';\nimport has from 'lodash/has';\nimport isEmpty from 'lodash/isEmpty';\nimport set from 'lodash/set';\nimport { useIntl } from 'react-intl';\n\nimport * as PermissonContracts from '../../../../../../../shared/contracts/permissions';\nimport { Permission } from '../../../../../../../shared/contracts/shared';\nimport { isObject } from '../../../../../utils/objects';\nimport {\n  PermissionsDataManagerContextValue,\n  PermissionsDataManagerProvider,\n} from '../hooks/usePermissionsDataManager';\nimport { difference } from '../utils/difference';\nimport { ConditionForm, Form, createDefaultCTForm, createDefaultForm } from '../utils/forms';\nimport { GenericLayout, formatLayout } from '../utils/layouts';\nimport { formatPermissionsForAPI } from '../utils/permissions';\nimport { updateConditionsToFalse } from '../utils/updateConditionsToFalse';\nimport { updateValues } from '../utils/updateValues';\n\nimport { ContentTypes } from './ContentTypes';\nimport { PluginsAndSettingsPermissions } from './PluginsAndSettings';\n\nconst TAB_LABELS = [\n  {\n    labelId: 'app.components.LeftMenuLinkContainer.collectionTypes',\n    defaultMessage: 'Collection Types',\n    id: 'collectionTypes',\n  },\n  {\n    labelId: 'app.components.LeftMenuLinkContainer.singleTypes',\n    id: 'singleTypes',\n    defaultMessage: 'Single Types',\n  },\n  {\n    labelId: 'app.components.LeftMenuLinkContainer.plugins',\n    defaultMessage: 'Plugins',\n    id: 'plugins',\n  },\n  {\n    labelId: 'app.components.LeftMenuLinkContainer.settings',\n    defaultMessage: 'Settings',\n    id: 'settings',\n  },\n] as const;\n\n/* -------------------------------------------------------------------------------------------------\n * Permissions\n * -----------------------------------------------------------------------------------------------*/\n\nexport interface PermissionsAPI {\n  getPermissions: () => {\n    didUpdateConditions: boolean;\n    permissionsToSend: Omit<Permission, 'id' | 'createdAt' | 'updatedAt' | 'actionParameters'>[];\n  };\n  resetForm: () => void;\n  setFormAfterSubmit: () => void;\n}\n\ninterface PermissionsProps {\n  isFormDisabled?: boolean;\n  permissions?: Permission[];\n  layout: PermissonContracts.GetAll.Response['data'];\n}\n\nconst Permissions = React.forwardRef<PermissionsAPI, PermissionsProps>(\n  ({ layout, isFormDisabled, permissions = [] }, api) => {\n    const [{ initialData, layouts, modifiedData }, dispatch] = React.useReducer(\n      reducer,\n      initialState,\n      () => init(layout, permissions)\n    );\n    const { formatMessage } = useIntl();\n\n    React.useImperativeHandle(api, () => {\n      return {\n        getPermissions() {\n          const collectionTypesDiff = difference(\n            initialData.collectionTypes,\n            modifiedData.collectionTypes\n          );\n          const singleTypesDiff = difference(initialData.singleTypes, modifiedData.singleTypes);\n\n          const contentTypesDiff = { ...collectionTypesDiff, ...singleTypesDiff };\n\n          let didUpdateConditions;\n\n          if (isEmpty(contentTypesDiff)) {\n            didUpdateConditions = false;\n          } else {\n            didUpdateConditions = Object.values(contentTypesDiff).some((permission = {}) => {\n              return Object.values(permission).some((permissionValue) =>\n                has(permissionValue, 'conditions')\n              );\n            });\n          }\n\n          return { permissionsToSend: formatPermissionsForAPI(modifiedData), didUpdateConditions };\n        },\n        resetForm() {\n          dispatch({ type: 'RESET_FORM' });\n        },\n        setFormAfterSubmit() {\n          dispatch({ type: 'SET_FORM_AFTER_SUBMIT' });\n        },\n      } satisfies PermissionsAPI;\n    });\n\n    const handleChangeCollectionTypeLeftActionRowCheckbox = (\n      pathToCollectionType: OnChangeCollectionTypeRowLeftCheckboxAction['pathToCollectionType'],\n      propertyName: OnChangeCollectionTypeRowLeftCheckboxAction['propertyName'],\n      rowName: OnChangeCollectionTypeRowLeftCheckboxAction['rowName'],\n      value: OnChangeCollectionTypeRowLeftCheckboxAction['value']\n    ) => {\n      dispatch({\n        type: 'ON_CHANGE_COLLECTION_TYPE_ROW_LEFT_CHECKBOX',\n        pathToCollectionType,\n        propertyName,\n        rowName,\n        value,\n      });\n    };\n\n    const handleChangeCollectionTypeGlobalActionCheckbox = (\n      collectionTypeKind: OnChangeCollectionTypeGlobalActionCheckboxAction['collectionTypeKind'],\n      actionId: OnChangeCollectionTypeGlobalActionCheckboxAction['actionId'],\n      value: OnChangeCollectionTypeGlobalActionCheckboxAction['value']\n    ) => {\n      dispatch({\n        type: 'ON_CHANGE_COLLECTION_TYPE_GLOBAL_ACTION_CHECKBOX',\n        collectionTypeKind,\n        actionId,\n        value,\n      });\n    };\n\n    const handleChangeConditions = (conditions: OnChangeConditionsAction['conditions']) => {\n      dispatch({ type: 'ON_CHANGE_CONDITIONS', conditions });\n    };\n\n    const handleChangeSimpleCheckbox: PermissionsDataManagerContextValue['onChangeSimpleCheckbox'] =\n      React.useCallback(({ target: { name, value } }) => {\n        dispatch({\n          type: 'ON_CHANGE_SIMPLE_CHECKBOX',\n          keys: name,\n          value,\n        });\n      }, []);\n\n    const handleChangeParentCheckbox: PermissionsDataManagerContextValue['onChangeParentCheckbox'] =\n      React.useCallback(({ target: { name, value } }) => {\n        dispatch({\n          type: 'ON_CHANGE_TOGGLE_PARENT_CHECKBOX',\n          keys: name,\n          value,\n        });\n      }, []);\n\n    return (\n      <PermissionsDataManagerProvider\n        availableConditions={layout.conditions}\n        modifiedData={modifiedData}\n        onChangeConditions={handleChangeConditions}\n        onChangeSimpleCheckbox={handleChangeSimpleCheckbox}\n        onChangeParentCheckbox={handleChangeParentCheckbox}\n        onChangeCollectionTypeLeftActionRowCheckbox={\n          handleChangeCollectionTypeLeftActionRowCheckbox\n        }\n        onChangeCollectionTypeGlobalActionCheckbox={handleChangeCollectionTypeGlobalActionCheckbox}\n      >\n        <Tabs.Root defaultValue={TAB_LABELS[0].id}>\n          <Tabs.List\n            aria-label={formatMessage({\n              id: 'Settings.permissions.users.tabs.label',\n              defaultMessage: 'Tabs Permissions',\n            })}\n          >\n            {TAB_LABELS.map((tabLabel) => (\n              <Tabs.Trigger key={tabLabel.id} value={tabLabel.id}>\n                {formatMessage({ id: tabLabel.labelId, defaultMessage: tabLabel.defaultMessage })}\n              </Tabs.Trigger>\n            ))}\n          </Tabs.List>\n          <Tabs.Content value={TAB_LABELS[0].id}>\n            <ContentTypes\n              layout={layouts.collectionTypes}\n              kind=\"collectionTypes\"\n              isFormDisabled={isFormDisabled}\n            />\n          </Tabs.Content>\n          <Tabs.Content value={TAB_LABELS[1].id}>\n            <ContentTypes\n              layout={layouts.singleTypes}\n              kind=\"singleTypes\"\n              isFormDisabled={isFormDisabled}\n            />\n          </Tabs.Content>\n          <Tabs.Content value={TAB_LABELS[2].id}>\n            <PluginsAndSettingsPermissions\n              layout={layouts.plugins}\n              kind=\"plugins\"\n              isFormDisabled={isFormDisabled}\n            />\n          </Tabs.Content>\n          <Tabs.Content value={TAB_LABELS[3].id}>\n            <PluginsAndSettingsPermissions\n              layout={layouts.settings}\n              kind=\"settings\"\n              isFormDisabled={isFormDisabled}\n            />\n          </Tabs.Content>\n        </Tabs.Root>\n      </PermissionsDataManagerProvider>\n    );\n  }\n);\n\n/* -------------------------------------------------------------------------------------------------\n * reducer\n * -----------------------------------------------------------------------------------------------*/\n\ninterface PermissionForms {\n  collectionTypes: Form;\n  plugins: Record<string, Form>;\n  settings: Record<string, Form>;\n  singleTypes: Form;\n}\n\ninterface State {\n  initialData: PermissionForms;\n  modifiedData: PermissionForms;\n  layouts: {\n    collectionTypes: PermissonContracts.ContentPermission;\n    singleTypes: PermissonContracts.ContentPermission;\n    plugins: GenericLayout<PermissonContracts.PluginPermission>[];\n    settings: GenericLayout<PermissonContracts.SettingPermission>[];\n  };\n}\n\nconst initialState = {\n  initialData: {},\n  modifiedData: {},\n  layouts: {},\n};\n\ninterface OnChangeCollectionTypeGlobalActionCheckboxAction {\n  type: 'ON_CHANGE_COLLECTION_TYPE_GLOBAL_ACTION_CHECKBOX';\n  collectionTypeKind: keyof PermissionForms;\n  actionId: string;\n  value: boolean;\n}\n\ninterface OnChangeCollectionTypeRowLeftCheckboxAction {\n  type: 'ON_CHANGE_COLLECTION_TYPE_ROW_LEFT_CHECKBOX';\n  pathToCollectionType: string;\n  propertyName: string;\n  rowName: string;\n  value: boolean;\n}\n\ninterface OnChangeConditionsAction {\n  type: 'ON_CHANGE_CONDITIONS';\n  conditions: Record<string, ConditionForm>;\n}\n\ninterface OnChangeSimpleCheckboxAction {\n  type: 'ON_CHANGE_SIMPLE_CHECKBOX';\n  keys: string;\n  value: boolean;\n}\n\ninterface OnChangeToggleParentCheckbox {\n  type: 'ON_CHANGE_TOGGLE_PARENT_CHECKBOX';\n  keys: string;\n  value: boolean;\n}\n\ninterface ResetFormAction {\n  type: 'RESET_FORM';\n}\n\ninterface SetFormAfterSubmitAction {\n  type: 'SET_FORM_AFTER_SUBMIT';\n}\n\ntype Action =\n  | OnChangeCollectionTypeGlobalActionCheckboxAction\n  | OnChangeCollectionTypeRowLeftCheckboxAction\n  | OnChangeConditionsAction\n  | OnChangeSimpleCheckboxAction\n  | OnChangeToggleParentCheckbox\n  | ResetFormAction\n  | SetFormAfterSubmitAction;\n\n/* eslint-disable consistent-return */\nconst reducer = (state: State, action: Action) =>\n  produce(state, (draftState) => {\n    switch (action.type) {\n      // This action is called when a checkbox in the <GlobalActions />\n      // changes\n      case 'ON_CHANGE_COLLECTION_TYPE_GLOBAL_ACTION_CHECKBOX': {\n        const { collectionTypeKind, actionId, value } = action;\n        const pathToData = ['modifiedData', collectionTypeKind];\n\n        Object.keys(get(state, pathToData)).forEach((collectionType) => {\n          const collectionTypeActionData = get(\n            state,\n            [...pathToData, collectionType, actionId],\n            undefined\n          );\n\n          if (collectionTypeActionData) {\n            let updatedValues = updateValues(collectionTypeActionData, value);\n\n            // We need to remove the applied conditions\n            // @ts-expect-error – TODO: type better\n            if (!value && updatedValues.conditions) {\n              // @ts-expect-error – TODO: type better\n              const updatedConditions = updateValues(updatedValues.conditions, false);\n\n              updatedValues = { ...updatedValues, conditions: updatedConditions };\n            }\n\n            set(draftState, [...pathToData, collectionType, actionId], updatedValues);\n          }\n        });\n\n        break;\n      }\n      case 'ON_CHANGE_COLLECTION_TYPE_ROW_LEFT_CHECKBOX': {\n        const { pathToCollectionType, propertyName, rowName, value } = action;\n        let nextModifiedDataState = cloneDeep(state.modifiedData);\n        const pathToModifiedDataCollectionType = pathToCollectionType.split('..');\n\n        const objToUpdate = get(nextModifiedDataState, pathToModifiedDataCollectionType, {});\n\n        Object.keys(objToUpdate).forEach((actionId) => {\n          // When a ct has multiple properties (ex: locales, field)\n          // We need to make sure that we add any new property to the modifiedData\n          // object.\n          if (has(objToUpdate[actionId], `properties.${propertyName}`)) {\n            const objValue = get(objToUpdate, [actionId, 'properties', propertyName, rowName]);\n            const pathToDataToSet = [\n              ...pathToModifiedDataCollectionType,\n              actionId,\n              'properties',\n              propertyName,\n              rowName,\n            ];\n\n            if (!isObject(objValue)) {\n              set(nextModifiedDataState, pathToDataToSet, value);\n            } else {\n              const updatedValue = updateValues(objValue, value);\n\n              set(nextModifiedDataState, pathToDataToSet, updatedValue);\n            }\n          }\n        });\n\n        // When we uncheck a row, we need to check if we also need to disable the conditions\n        if (!value) {\n          // @ts-expect-error – TODO: type better\n          nextModifiedDataState = updateConditionsToFalse(nextModifiedDataState);\n        }\n\n        set(draftState, 'modifiedData', nextModifiedDataState);\n\n        break;\n      }\n      case 'ON_CHANGE_CONDITIONS': {\n        Object.entries(action.conditions).forEach((array) => {\n          const [stringPathToData, conditionsToUpdate] = array;\n\n          set(\n            draftState,\n            ['modifiedData', ...stringPathToData.split('..'), 'conditions'],\n            conditionsToUpdate\n          );\n        });\n\n        break;\n      }\n      case 'ON_CHANGE_SIMPLE_CHECKBOX': {\n        let nextModifiedDataState = cloneDeep(state.modifiedData);\n\n        set(nextModifiedDataState, [...action.keys.split('..')], action.value);\n\n        // When we uncheck a single checkbox we need to remove the conditions from the parent\n        if (!action.value) {\n          // @ts-expect-error – TODO: type better\n          nextModifiedDataState = updateConditionsToFalse(nextModifiedDataState);\n        }\n\n        set(draftState, 'modifiedData', nextModifiedDataState);\n\n        break;\n      }\n      /*\n       * Here the idea is to retrieve a specific value of the modifiedObject\n       * then update all the boolean values of the retrieved one\n       * and update the drafState.\n       *\n       * For instance in order to enable create action for all the fields and locales\n       * of the restaurant content type we need to :\n       * 1. Retrieve the modifiedData.collectionTypes.restaurant.create object\n       * 2. Toggle all the end boolean values to the desired one\n       * 3. Update the draftState\n       *\n       * Since the case works well in order to update what we called \"parent\" checkbox. We can\n       * reuse the action when we need to toggle change all the values that depends on this one.\n       * A parent checkbox is a checkbox which value is not a boolean but depends on its children ones, therefore,\n       * a parent checkbox does not have a represented value in the draftState, they are just helpers.\n       *\n       * Given the following data:\n       *\n       * const data = {\n       *  restaurant: {\n       *   create: {\n       *     fields: { name: true },\n       *     locales: { en: false }\n       *   }\n       *  }\n       * }\n       *\n       * The value of the create checkbox for the restaurant will be ƒalse since not all its children have\n       * truthy values and in order to set its value to true when need to have all the values of its children set to true.\n       *\n       * Similarly, we can reuse the logic for the components attributes\n       *\n       */\n      case 'ON_CHANGE_TOGGLE_PARENT_CHECKBOX': {\n        const { keys, value } = action;\n        const pathToValue = [...keys.split('..')];\n        let nextModifiedDataState = cloneDeep(state.modifiedData);\n        const oldValues = get(nextModifiedDataState, pathToValue, {});\n\n        const updatedValues = updateValues(oldValues, value);\n        set(nextModifiedDataState, pathToValue, updatedValues);\n\n        // When we uncheck a parent checkbox we need to remove the associated conditions\n        if (!value) {\n          // @ts-expect-error – TODO: type better\n          nextModifiedDataState = updateConditionsToFalse(nextModifiedDataState);\n        }\n\n        set(draftState, ['modifiedData'], nextModifiedDataState);\n\n        break;\n      }\n      case 'RESET_FORM': {\n        draftState.modifiedData = state.initialData;\n        break;\n      }\n      case 'SET_FORM_AFTER_SUBMIT': {\n        draftState.initialData = state.modifiedData;\n        break;\n      }\n      default:\n        return draftState;\n    }\n  });\n\n/* -------------------------------------------------------------------------------------------------\n * init (reducer)\n * -----------------------------------------------------------------------------------------------*/\n\nconst init = (\n  layout: PermissionsProps['layout'],\n  permissions: PermissionsProps['permissions']\n): State => {\n  const {\n    conditions,\n    sections: { collectionTypes, singleTypes, plugins, settings },\n  } = layout;\n\n  const layouts = {\n    collectionTypes,\n    singleTypes,\n    plugins: formatLayout(plugins, 'plugin'),\n    settings: formatLayout(settings, 'category'),\n  };\n\n  const defaultForm = {\n    collectionTypes: createDefaultCTForm(collectionTypes, conditions, permissions),\n    singleTypes: createDefaultCTForm(singleTypes, conditions, permissions),\n    plugins: createDefaultForm(layouts.plugins, conditions, permissions),\n    settings: createDefaultForm(layouts.settings, conditions, permissions),\n  };\n\n  return {\n    initialData: defaultForm,\n    modifiedData: defaultForm,\n    layouts,\n  };\n};\n\nexport { Permissions };\nexport type {\n  State,\n  OnChangeCollectionTypeRowLeftCheckboxAction,\n  OnChangeConditionsAction,\n  OnChangeCollectionTypeGlobalActionCheckboxAction,\n};\n"],
  "mappings": "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",
  "names": ["isObject", "transform", "object", "object", "base", "transform", "isEqual", "isObject", "permissions", "current", "acc", "createDefaultConditionsForm", "isEmpty", "merge", "groupBy", "has", "omit", "value", "childrenForm", "label", "ActionRow", "Wrapper", "get", "hasAllActionsSelected", "hasSomeActionsSelected", "upperFirst", "checkboxesState", "set", "cloneDeep"]
}
