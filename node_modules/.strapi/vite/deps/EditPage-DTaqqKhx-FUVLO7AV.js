import {
  COMMON_USER_SCHEMA
} from "./chunk-VMVPMDQP.js";
import {
  MagicLinkCE,
  SelectRoles
} from "./chunk-DBUNBXNH.js";
import {
  getDisplayName
} from "./chunk-2E5FOOCQ.js";
import {
  selectAdminPermissions
} from "./chunk-4MBCKCTI.js";
import "./chunk-5SHGYQVP.js";
import {
  BackButton,
  Form2 as Form,
  Layouts,
  MemoizedInputRenderer,
  create3 as create,
  create6 as create2,
  create7 as create3,
  errorsTrads,
  require_pick,
  useAdminUsers,
  useEnterprise,
  useUpdateUserMutation
} from "./chunk-WAN4NJHK.js";
import {
  Page,
  useAPIErrorHandler,
  useNotification,
  useRBAC,
  useTypedSelector
} from "./chunk-Z4DUCMVZ.js";
import {
  Box,
  Button,
  Flex,
  Grid,
  Typography,
  isBaseQueryError,
  useIntl
} from "./chunk-3AE57NTV.js";
import "./chunk-2JZ35VNI.js";
import {
  useMatch,
  useNavigate
} from "./chunk-ZJMETV45.js";
import "./chunk-IYHTQODQ.js";
import {
  ForwardRef$4x
} from "./chunk-UCO6YWR3.js";
import {
  require_jsx_runtime
} from "./chunk-QBLEIVF7.js";
import "./chunk-WRI5LBAT.js";
import {
  require_react
} from "./chunk-BCGHH3YY.js";
import {
  __toESM
} from "./chunk-WGAPYIUP.js";

// node_modules/@strapi/admin/dist/admin/EditPage-DTaqqKhx.mjs
var import_jsx_runtime = __toESM(require_jsx_runtime(), 1);
var React = __toESM(require_react(), 1);
var import_pick = __toESM(require_pick(), 1);
var EDIT_VALIDATION_SCHEMA = create2().shape({
  ...COMMON_USER_SCHEMA,
  isActive: create(),
  roles: create3().min(1, {
    id: errorsTrads.required.id,
    defaultMessage: "This field is required"
  }).required({
    id: errorsTrads.required.id,
    defaultMessage: "This field is required"
  })
});
var fieldsToPick = ["email", "firstname", "lastname", "username", "isActive", "roles"];
var EditPage = () => {
  var _a, _b, _c;
  const { formatMessage } = useIntl();
  const match = useMatch("/settings/users/:id");
  const id = ((_a = match == null ? void 0 : match.params) == null ? void 0 : _a.id) ?? "";
  const navigate = useNavigate();
  const { toggleNotification } = useNotification();
  const MagicLink = useEnterprise(
    MagicLinkCE,
    async () => (await import("./MagicLinkEE-DCazf_P2-WOUWV5PD.js")).MagicLinkEE
  );
  const {
    _unstableFormatAPIError: formatAPIError,
    _unstableFormatValidationErrors: formatValidationErrors
  } = useAPIErrorHandler();
  const permissions = useTypedSelector(selectAdminPermissions);
  const {
    isLoading: isLoadingRBAC,
    allowedActions: { canUpdate }
  } = useRBAC({
    read: ((_b = permissions.settings) == null ? void 0 : _b.users.read) ?? [],
    update: ((_c = permissions.settings) == null ? void 0 : _c.users.update) ?? []
  });
  const [updateUser] = useUpdateUserMutation();
  const {
    data,
    error,
    isLoading: isLoadingAdminUsers
  } = useAdminUsers(
    { id },
    {
      refetchOnMountOrArgChange: true
    }
  );
  const [user] = (data == null ? void 0 : data.users) ?? [];
  React.useEffect(() => {
    if (error) {
      if (error.name === "UnauthorizedError") {
        toggleNotification({
          type: "info",
          message: formatMessage({
            id: "notification.permission.not-allowed-read",
            defaultMessage: "You are not allowed to see this document"
          })
        });
        navigate("/");
      } else {
        toggleNotification({
          type: "danger",
          message: formatAPIError(error)
        });
      }
    }
  }, [error, formatAPIError, formatMessage, navigate, toggleNotification]);
  const isLoading = isLoadingAdminUsers || !MagicLink || isLoadingRBAC;
  if (isLoading) {
    return (0, import_jsx_runtime.jsx)(Page.Loading, {});
  }
  const initialData = {
    ...(0, import_pick.default)(user, fieldsToPick),
    roles: user.roles.map(({ id: id2 }) => id2),
    password: "",
    confirmPassword: ""
  };
  const handleSubmit = async (body, actions) => {
    const { confirmPassword: _confirmPassword, ...bodyRest } = body;
    const res = await updateUser({
      id,
      ...bodyRest
    });
    if ("error" in res && isBaseQueryError(res.error)) {
      if (res.error.name === "ValidationError") {
        actions.setErrors(formatValidationErrors(res.error));
      }
      toggleNotification({
        type: "danger",
        message: formatAPIError(res.error)
      });
    } else {
      toggleNotification({
        type: "success",
        message: formatMessage({ id: "notification.success.saved", defaultMessage: "Saved" })
      });
      actions.setValues({
        ...(0, import_pick.default)(body, fieldsToPick),
        password: "",
        confirmPassword: ""
      });
    }
  };
  return (0, import_jsx_runtime.jsxs)(Page.Main, { children: [
    (0, import_jsx_runtime.jsx)(Page.Title, { children: formatMessage(
      { id: "Settings.PageTitle", defaultMessage: "Settings - {name}" },
      {
        name: "Users"
      }
    ) }),
    (0, import_jsx_runtime.jsx)(
      Form,
      {
        method: "PUT",
        onSubmit: handleSubmit,
        initialValues: initialData,
        validationSchema: EDIT_VALIDATION_SCHEMA,
        children: ({ isSubmitting, modified }) => {
          return (0, import_jsx_runtime.jsxs)(import_jsx_runtime.Fragment, { children: [
            (0, import_jsx_runtime.jsx)(
              Layouts.Header,
              {
                primaryAction: (0, import_jsx_runtime.jsx)(
                  Button,
                  {
                    disabled: isSubmitting || !canUpdate || !modified,
                    startIcon: (0, import_jsx_runtime.jsx)(ForwardRef$4x, {}),
                    loading: isSubmitting,
                    type: "submit",
                    children: formatMessage({ id: "global.save", defaultMessage: "Save" })
                  }
                ),
                title: formatMessage(
                  {
                    id: "app.containers.Users.EditPage.header.label",
                    defaultMessage: "Edit {name}"
                  },
                  {
                    // @ts-expect-error â€“ issues with the Entity ID type, still.
                    name: getDisplayName(initialData)
                  }
                ),
                navigationAction: (0, import_jsx_runtime.jsx)(BackButton, { fallback: "../users" })
              }
            ),
            (0, import_jsx_runtime.jsxs)(Layouts.Content, { children: [
              (user == null ? void 0 : user.registrationToken) && (0, import_jsx_runtime.jsx)(Box, { paddingBottom: 6, children: (0, import_jsx_runtime.jsx)(MagicLink, { registrationToken: user.registrationToken }) }),
              (0, import_jsx_runtime.jsxs)(Flex, { direction: "column", alignItems: "stretch", gap: 7, children: [
                (0, import_jsx_runtime.jsx)(
                  Box,
                  {
                    background: "neutral0",
                    hasRadius: true,
                    shadow: "filterShadow",
                    paddingTop: 6,
                    paddingBottom: 6,
                    paddingLeft: 7,
                    paddingRight: 7,
                    children: (0, import_jsx_runtime.jsxs)(Flex, { direction: "column", alignItems: "stretch", gap: 4, children: [
                      (0, import_jsx_runtime.jsx)(Typography, { variant: "delta", tag: "h2", children: formatMessage({
                        id: "app.components.Users.ModalCreateBody.block-title.details",
                        defaultMessage: "Details"
                      }) }),
                      (0, import_jsx_runtime.jsx)(Grid.Root, { gap: 5, children: LAYOUT.map(
                        (row) => row.map(({ size, label, ...field }) => {
                          return (0, import_jsx_runtime.jsx)(
                            Grid.Item,
                            {
                              col: size,
                              direction: "column",
                              alignItems: "stretch",
                              children: (0, import_jsx_runtime.jsx)(
                                MemoizedInputRenderer,
                                {
                                  ...field,
                                  disabled: !canUpdate,
                                  label: formatMessage(label),
                                  placeholder: "placeholder" in field ? formatMessage(field.placeholder) : void 0
                                }
                              )
                            },
                            field.name
                          );
                        })
                      ) })
                    ] })
                  }
                ),
                (0, import_jsx_runtime.jsx)(
                  Box,
                  {
                    background: "neutral0",
                    hasRadius: true,
                    shadow: "filterShadow",
                    paddingTop: 6,
                    paddingBottom: 6,
                    paddingLeft: 7,
                    paddingRight: 7,
                    children: (0, import_jsx_runtime.jsxs)(Flex, { direction: "column", alignItems: "stretch", gap: 4, children: [
                      (0, import_jsx_runtime.jsx)(Typography, { variant: "delta", tag: "h2", children: formatMessage({
                        id: "global.roles",
                        defaultMessage: "User's role"
                      }) }),
                      (0, import_jsx_runtime.jsx)(Grid.Root, { gap: 5, children: (0, import_jsx_runtime.jsx)(Grid.Item, { col: 6, xs: 12, direction: "column", alignItems: "stretch", children: (0, import_jsx_runtime.jsx)(SelectRoles, { disabled: !canUpdate }) }) })
                    ] })
                  }
                )
              ] })
            ] })
          ] });
        }
      }
    )
  ] });
};
var LAYOUT = [
  [
    {
      label: {
        id: "Auth.form.firstname.label",
        defaultMessage: "First name"
      },
      name: "firstname",
      placeholder: {
        id: "Auth.form.firstname.placeholder",
        defaultMessage: "e.g. Kai"
      },
      type: "string",
      size: 6,
      required: true
    },
    {
      label: {
        id: "Auth.form.lastname.label",
        defaultMessage: "Last name"
      },
      name: "lastname",
      placeholder: {
        id: "Auth.form.lastname.placeholder",
        defaultMessage: "e.g. Doe"
      },
      type: "string",
      size: 6
    }
  ],
  [
    {
      label: {
        id: "Auth.form.email.label",
        defaultMessage: "Email"
      },
      name: "email",
      placeholder: {
        id: "Auth.form.email.placeholder",
        defaultMessage: "e.g. kai.doe@strapi.io"
      },
      type: "email",
      size: 6,
      required: true
    },
    {
      label: {
        id: "Auth.form.username.label",
        defaultMessage: "Username"
      },
      name: "username",
      placeholder: {
        id: "Auth.form.username.placeholder",
        defaultMessage: "e.g. Kai_Doe"
      },
      type: "string",
      size: 6
    }
  ],
  [
    {
      autoComplete: "new-password",
      label: {
        id: "global.password",
        defaultMessage: "Password"
      },
      name: "password",
      type: "password",
      size: 6
    },
    {
      autoComplete: "new-password",
      label: {
        id: "Auth.form.confirmPassword.label",
        defaultMessage: "Password confirmation"
      },
      name: "confirmPassword",
      type: "password",
      size: 6
    }
  ],
  [
    {
      label: {
        id: "Auth.form.active.label",
        defaultMessage: "Active"
      },
      name: "isActive",
      type: "boolean",
      size: 6
    }
  ]
];
var ProtectedEditPage = () => {
  const permissions = useTypedSelector((state) => {
    var _a;
    return (_a = state.admin_app.permissions.settings) == null ? void 0 : _a.users.read;
  });
  return (0, import_jsx_runtime.jsx)(Page.Protect, { permissions, children: (0, import_jsx_runtime.jsx)(EditPage, {}) });
};
export {
  EditPage,
  ProtectedEditPage
};
//# sourceMappingURL=EditPage-DTaqqKhx-FUVLO7AV.js.map
