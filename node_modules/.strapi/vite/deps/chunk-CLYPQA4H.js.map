{
  "version": 3,
  "sources": ["../../../@strapi/admin/ee/admin/src/hooks/useLicenseLimits.ts"],
  "sourcesContent": ["import * as React from 'react';\n\nimport { useGetLicenseLimitsQuery } from '../../../../admin/src/services/admin';\nimport { GetLicenseLimitInformation } from '../../../../shared/contracts/admin';\n\ninterface UseLicenseLimitsArgs {\n  enabled?: boolean;\n}\n\nfunction useLicenseLimits({ enabled }: UseLicenseLimitsArgs = { enabled: true }) {\n  const { data, isError, isLoading } = useGetLicenseLimitsQuery(undefined, {\n    skip: !enabled,\n  });\n\n  type FeatureNames = GetLicenseLimitInformation.Response['data']['features'][number]['name'];\n\n  type GetFeatureType = <T>(name: FeatureNames) => Record<string, T> | undefined;\n\n  const getFeature = React.useCallback<GetFeatureType>(\n    (name) => {\n      const feature = data?.data?.features.find((feature) => feature.name === name);\n\n      if (feature && 'options' in feature) {\n        return feature.options;\n      } else {\n        return {};\n      }\n    },\n    [data]\n  );\n\n  return { license: data?.data, getFeature, isError, isLoading };\n}\n\nexport { useLicenseLimits };\nexport type { UseLicenseLimitsArgs };\n"],
  "mappings": ";;;;;;;;;;;;AASA,SAAS,iBAAiB,EAAE,QAAA,IAAkC,EAAE,SAAS,KAAA,GAAQ;AAC/E,QAAM,EAAE,MAAM,SAAS,UAAU,IAAI,yBAAyB,QAAW;IACvE,MAAM,CAAC;EAAA,CACR;AAMD,QAAM,aAAmB;IACvB,CAAC,SAAS;;AACF,YAAA,WAAU,kCAAM,SAAN,mBAAY,SAAS,KAAK,CAACA,aAAYA,SAAQ,SAAS;AAEpE,UAAA,WAAW,aAAa,SAAS;AACnC,eAAO,QAAQ;MAAA,OACV;AACL,eAAO,CAAA;MAAC;IACV;IAEF,CAAC,IAAI;EAAA;AAGP,SAAO,EAAE,SAAS,6BAAM,MAAM,YAAY,SAAS,UAAU;AAC/D;",
  "names": ["feature"]
}
