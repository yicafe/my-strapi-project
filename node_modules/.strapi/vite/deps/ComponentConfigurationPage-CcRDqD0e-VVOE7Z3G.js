import {
  ConfigurationForm,
  TEMP_FIELD_NAME
} from "./chunk-K6TL3Y2F.js";
import "./chunk-GVULHBGY.js";
import "./chunk-K7N6QYV7.js";
import {
  setIn
} from "./chunk-G6UKOFGJ.js";
import "./chunk-3NRGS3Y7.js";
import {
  useTypedSelector
} from "./chunk-SUV7SII6.js";
import "./chunk-3TBNZ2ES.js";
import {
  DEFAULT_SETTINGS,
  contentManagerApi,
  convertEditLayoutToFieldLayouts,
  extractContentTypeComponents,
  useGetInitialDataQuery
} from "./chunk-6YOYCAO7.js";
import "./chunk-RPX6VIML.js";
import "./chunk-XFNRNHKP.js";
import "./chunk-6YBPPFQZ.js";
import "./chunk-AQOKKIFP.js";
import "./chunk-ZESFYHFX.js";
import "./chunk-MMOBCIZG.js";
import "./chunk-WAN4NJHK.js";
import {
  Page,
  useAPIErrorHandler,
  useNotification
} from "./chunk-Z4DUCMVZ.js";
import {
  useIntl
} from "./chunk-3AE57NTV.js";
import "./chunk-2JZ35VNI.js";
import {
  useParams
} from "./chunk-ZJMETV45.js";
import "./chunk-IYHTQODQ.js";
import "./chunk-UCO6YWR3.js";
import {
  require_jsx_runtime
} from "./chunk-QBLEIVF7.js";
import "./chunk-WRI5LBAT.js";
import {
  require_react
} from "./chunk-BCGHH3YY.js";
import {
  __toESM
} from "./chunk-WGAPYIUP.js";

// node_modules/@strapi/content-manager/dist/_chunks/ComponentConfigurationPage-CcRDqD0e.mjs
var import_jsx_runtime = __toESM(require_jsx_runtime(), 1);
var React = __toESM(require_react(), 1);
var componentsApi = contentManagerApi.injectEndpoints({
  endpoints: (builder) => ({
    getComponentConfiguration: builder.query({
      query: (uid) => `/content-manager/components/${uid}/configuration`,
      transformResponse: (response) => response.data,
      providesTags: (_result, _error, uid) => [{ type: "ComponentConfiguration", id: uid }]
    }),
    updateComponentConfiguration: builder.mutation({
      query: ({ uid, ...body }) => ({
        url: `/content-manager/components/${uid}/configuration`,
        method: "PUT",
        data: body
      }),
      transformResponse: (response) => response.data,
      invalidatesTags: (_result, _error, { uid }) => [
        { type: "ComponentConfiguration", id: uid },
        // otherwise layouts already fetched will have stale component configuration data.
        { type: "ContentTypeSettings", id: "LIST" }
      ]
    })
  })
});
var { useGetComponentConfigurationQuery, useUpdateComponentConfigurationMutation } = componentsApi;
var ComponentConfigurationPage = () => {
  const { slug: model } = useParams();
  const { toggleNotification } = useNotification();
  const { formatMessage } = useIntl();
  const { _unstableFormatAPIError: formatAPIError } = useAPIErrorHandler();
  const {
    components,
    fieldSizes,
    schema,
    error: errorSchema,
    isLoading: isLoadingSchema,
    isFetching: isFetchingSchema
  } = useGetInitialDataQuery(void 0, {
    selectFromResult: (res) => {
      var _a, _b, _c;
      const schema2 = (_a = res.data) == null ? void 0 : _a.components.find((ct) => ct.uid === model);
      const componentsByKey = (_b = res.data) == null ? void 0 : _b.components.reduce(
        (acc, component) => {
          acc[component.uid] = component;
          return acc;
        },
        {}
      );
      const components2 = extractContentTypeComponents(schema2 == null ? void 0 : schema2.attributes, componentsByKey);
      const fieldSizes2 = Object.entries(((_c = res.data) == null ? void 0 : _c.fieldSizes) ?? {}).reduce((acc, [attributeName, { default: size }]) => {
        acc[attributeName] = size;
        return acc;
      }, {});
      return {
        isFetching: res.isFetching,
        isLoading: res.isLoading,
        error: res.error,
        components: components2,
        schema: schema2,
        fieldSizes: fieldSizes2
      };
    }
  });
  React.useEffect(() => {
    if (errorSchema) {
      toggleNotification({
        type: "danger",
        message: formatAPIError(errorSchema)
      });
    }
  }, [errorSchema, formatAPIError, toggleNotification]);
  const {
    data,
    isLoading: isLoadingConfig,
    isFetching: isFetchingConfig,
    error
  } = useGetComponentConfigurationQuery(model ?? "");
  React.useEffect(() => {
    if (error) {
      toggleNotification({
        type: "danger",
        message: formatAPIError(error)
      });
    }
  }, [error, formatAPIError, toggleNotification]);
  const isLoading = isLoadingConfig || isLoadingSchema || isFetchingConfig || isFetchingSchema;
  const editLayout = React.useMemo(
    () => data && !isLoading ? formatEditLayout(data, { schema, components }) : {
      layout: [],
      components: {},
      metadatas: {},
      options: {},
      settings: DEFAULT_SETTINGS
    },
    [data, isLoading, schema, components]
  );
  const [updateConfiguration] = useUpdateComponentConfigurationMutation();
  const handleSubmit = async (formData) => {
    try {
      const meta = Object.entries((data == null ? void 0 : data.component.metadatas) ?? {}).reduce(
        (acc, [name, { edit, list }]) => {
          const {
            __temp_key__,
            size: _size,
            name: _name,
            ...editedMetadata
          } = formData.layout.flatMap((row) => row.children).find((field) => field.name === name) ?? {};
          acc[name] = {
            edit: {
              ...edit,
              ...editedMetadata
            },
            list
          };
          return acc;
        },
        {}
      );
      const res = await updateConfiguration({
        layouts: {
          edit: formData.layout.map(
            (row) => row.children.reduce((acc, { name, size }) => {
              if (name !== TEMP_FIELD_NAME) {
                return [...acc, { name, size }];
              }
              return acc;
            }, [])
          ),
          list: data == null ? void 0 : data.component.layouts.list
        },
        settings: setIn(formData.settings, "displayName", void 0),
        metadatas: meta,
        uid: model
      });
      if ("data" in res) {
        toggleNotification({
          type: "success",
          message: formatMessage({ id: "notification.success.saved", defaultMessage: "Saved" })
        });
      } else {
        toggleNotification({
          type: "danger",
          message: formatAPIError(res.error)
        });
      }
    } catch {
      toggleNotification({
        type: "danger",
        message: formatMessage({ id: "notification.error", defaultMessage: "An error occurred" })
      });
    }
  };
  if (isLoading) {
    return (0, import_jsx_runtime.jsx)(Page.Loading, {});
  }
  if (error || errorSchema || !schema) {
    return (0, import_jsx_runtime.jsx)(Page.Error, {});
  }
  return (0, import_jsx_runtime.jsxs)(import_jsx_runtime.Fragment, { children: [
    (0, import_jsx_runtime.jsx)(Page.Title, { children: `Configure ${editLayout.settings.displayName} Edit View` }),
    (0, import_jsx_runtime.jsx)(
      ConfigurationForm,
      {
        onSubmit: handleSubmit,
        attributes: schema.attributes,
        fieldSizes,
        layout: editLayout
      }
    )
  ] });
};
var formatEditLayout = (data, { schema, components }) => {
  const editAttributes = convertEditLayoutToFieldLayouts(
    data.component.layouts.edit,
    schema == null ? void 0 : schema.attributes,
    data.component.metadatas,
    { configurations: data.components, schemas: components }
  );
  const componentEditAttributes = Object.entries(data.components).reduce(
    (acc, [uid, configuration]) => {
      acc[uid] = {
        layout: convertEditLayoutToFieldLayouts(
          configuration.layouts.edit,
          components[uid].attributes,
          configuration.metadatas
        ),
        settings: {
          ...configuration.settings,
          icon: components[uid].info.icon,
          displayName: components[uid].info.displayName
        }
      };
      return acc;
    },
    {}
  );
  const editMetadatas = Object.entries(data.component.metadatas).reduce(
    (acc, [attribute, metadata]) => {
      return {
        ...acc,
        [attribute]: metadata.edit
      };
    },
    {}
  );
  return {
    layout: [editAttributes],
    components: componentEditAttributes,
    metadatas: editMetadatas,
    options: {
      ...schema == null ? void 0 : schema.options,
      ...schema == null ? void 0 : schema.pluginOptions
    },
    settings: {
      ...data.component.settings,
      displayName: schema == null ? void 0 : schema.info.displayName
    }
  };
};
var ProtectedComponentConfigurationPage = () => {
  const permissions = useTypedSelector(
    (state) => {
      var _a;
      return (_a = state.admin_app.permissions.contentManager) == null ? void 0 : _a.componentsConfigurations;
    }
  );
  return (0, import_jsx_runtime.jsx)(Page.Protect, { permissions, children: (0, import_jsx_runtime.jsx)(ComponentConfigurationPage, {}) });
};
export {
  ComponentConfigurationPage,
  ProtectedComponentConfigurationPage
};
//# sourceMappingURL=ComponentConfigurationPage-CcRDqD0e-VVOE7Z3G.js.map
