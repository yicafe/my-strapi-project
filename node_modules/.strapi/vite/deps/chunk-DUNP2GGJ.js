import {
  RelativeTime
} from "./chunk-CQV24LJX.js";
import {
  ConfirmDialog,
  Table
} from "./chunk-WAN4NJHK.js";
import {
  useQueryParams,
  useTracking
} from "./chunk-Z4DUCMVZ.js";
import {
  Box,
  Dialog,
  Flex,
  IconButton,
  LinkButton,
  Typography,
  useCollator,
  useIntl
} from "./chunk-3AE57NTV.js";
import {
  NavLink,
  useNavigate
} from "./chunk-ZJMETV45.js";
import {
  ForwardRef$1r,
  ForwardRef$j
} from "./chunk-UCO6YWR3.js";
import {
  require_jsx_runtime
} from "./chunk-QBLEIVF7.js";
import {
  dt
} from "./chunk-WRI5LBAT.js";
import {
  __toESM
} from "./chunk-WGAPYIUP.js";

// node_modules/@strapi/admin/dist/admin/Table-DQnLoM7I.mjs
var import_jsx_runtime = __toESM(require_jsx_runtime(), 1);
var Table2 = ({
  permissions,
  headers = [],
  isLoading = false,
  tokens = [],
  onConfirmDelete,
  tokenType
}) => {
  const [{ query }] = useQueryParams();
  const { formatMessage, locale } = useIntl();
  const [, sortOrder] = query && query.sort ? query.sort.split(":") : [void 0, "ASC"];
  const navigate = useNavigate();
  const { trackUsage } = useTracking();
  const formatter = useCollator(locale);
  const sortedTokens = [...tokens].sort((a, b) => {
    return sortOrder === "DESC" ? formatter.compare(b.name, a.name) : formatter.compare(a.name, b.name);
  });
  const { canDelete, canUpdate, canRead } = permissions;
  const handleRowClick = (id) => () => {
    if (canRead) {
      trackUsage("willEditTokenFromList", {
        tokenType
      });
      navigate(id.toString());
    }
  };
  return (0, import_jsx_runtime.jsx)(Table.Root, { headers, rows: sortedTokens, isLoading, children: (0, import_jsx_runtime.jsxs)(Table.Content, { children: [
    (0, import_jsx_runtime.jsx)(Table.Head, { children: headers.map((header) => (0, import_jsx_runtime.jsx)(Table.HeaderCell, { ...header }, header.name)) }),
    (0, import_jsx_runtime.jsx)(Table.Empty, {}),
    (0, import_jsx_runtime.jsx)(Table.Loading, {}),
    (0, import_jsx_runtime.jsx)(Table.Body, { children: sortedTokens.map((token) => (0, import_jsx_runtime.jsxs)(Table.Row, { onClick: handleRowClick(token.id), children: [
      (0, import_jsx_runtime.jsx)(Table.Cell, { maxWidth: "25rem", children: (0, import_jsx_runtime.jsx)(Typography, { textColor: "neutral800", fontWeight: "bold", ellipsis: true, children: token.name }) }),
      (0, import_jsx_runtime.jsx)(Table.Cell, { maxWidth: "25rem", children: (0, import_jsx_runtime.jsx)(Typography, { textColor: "neutral800", ellipsis: true, children: token.description }) }),
      (0, import_jsx_runtime.jsx)(Table.Cell, { children: (0, import_jsx_runtime.jsx)(Typography, { textColor: "neutral800", children: (0, import_jsx_runtime.jsx)(RelativeTime, { timestamp: new Date(token.createdAt) }) }) }),
      (0, import_jsx_runtime.jsx)(Table.Cell, { children: token.lastUsedAt && (0, import_jsx_runtime.jsx)(Typography, { textColor: "neutral800", children: (0, import_jsx_runtime.jsx)(
        RelativeTime,
        {
          timestamp: new Date(token.lastUsedAt),
          customIntervals: [
            {
              unit: "hours",
              threshold: 1,
              text: formatMessage({
                id: "Settings.apiTokens.lastHour",
                defaultMessage: "last hour"
              })
            }
          ]
        }
      ) }) }),
      canUpdate || canRead || canDelete ? (0, import_jsx_runtime.jsx)(Table.Cell, { children: (0, import_jsx_runtime.jsxs)(Flex, { justifyContent: "end", children: [
        canUpdate && (0, import_jsx_runtime.jsx)(UpdateButton, { tokenName: token.name, tokenId: token.id }),
        canDelete && (0, import_jsx_runtime.jsx)(
          DeleteButton,
          {
            tokenName: token.name,
            onClickDelete: () => onConfirmDelete == null ? void 0 : onConfirmDelete(token.id),
            tokenType
          }
        )
      ] }) }) : null
    ] }, token.id)) })
  ] }) });
};
var MESSAGES_MAP = {
  edit: {
    id: "app.component.table.edit",
    defaultMessage: "Edit {target}"
  },
  read: {
    id: "app.component.table.read",
    defaultMessage: "Read {target}"
  }
};
var DefaultButton = ({
  tokenName,
  tokenId,
  buttonType = "edit",
  children
}) => {
  const { formatMessage } = useIntl();
  return (0, import_jsx_runtime.jsx)(
    LinkButtonStyled,
    {
      tag: NavLink,
      to: tokenId.toString(),
      onClick: (e) => e.stopPropagation(),
      title: formatMessage(MESSAGES_MAP[buttonType], { target: tokenName }),
      variant: "ghost",
      size: "S",
      children
    }
  );
};
var LinkButtonStyled = dt(LinkButton)`
  padding: 0.7rem;

  & > span {
    display: flex;
  }
`;
var DeleteButton = ({ tokenName, onClickDelete, tokenType }) => {
  const { formatMessage } = useIntl();
  const { trackUsage } = useTracking();
  const handleClickDelete = () => {
    trackUsage("willDeleteToken", {
      tokenType
    });
    onClickDelete();
  };
  return (0, import_jsx_runtime.jsx)(Dialog.Root, { children: (0, import_jsx_runtime.jsxs)(Box, { paddingLeft: 1, onClick: (e) => e.stopPropagation(), children: [
    (0, import_jsx_runtime.jsx)(Dialog.Trigger, { children: (0, import_jsx_runtime.jsx)(
      IconButton,
      {
        label: formatMessage(
          {
            id: "global.delete-target",
            defaultMessage: "Delete {target}"
          },
          { target: `${tokenName}` }
        ),
        name: "delete",
        variant: "ghost",
        children: (0, import_jsx_runtime.jsx)(ForwardRef$j, {})
      }
    ) }),
    (0, import_jsx_runtime.jsx)(ConfirmDialog, { onConfirm: handleClickDelete })
  ] }) });
};
var UpdateButton = ({ tokenName, tokenId }) => {
  return (0, import_jsx_runtime.jsx)(DefaultButton, { tokenName, tokenId, children: (0, import_jsx_runtime.jsx)(ForwardRef$1r, {}) });
};

export {
  Table2 as Table
};
//# sourceMappingURL=chunk-DUNP2GGJ.js.map
