{
  "version": 3,
  "sources": ["../../../@strapi/admin/admin/src/pages/Settings/pages/Roles/components/RoleForm.tsx", "../../../@strapi/admin/admin/src/pages/Settings/pages/Roles/EditPage.tsx"],
  "sourcesContent": ["import {\n  Box,\n  Button,\n  Field,\n  Flex,\n  Grid,\n  Textarea,\n  TextInput,\n  Typography,\n} from '@strapi/design-system';\nimport { FormikProps } from 'formik';\nimport { useIntl } from 'react-intl';\n\nimport type { AdminRole } from '../../../../../hooks/useAdminRoles';\nimport type { EditRoleFormValues } from '../EditPage';\n\ninterface RoleFormProps extends Pick<FormikProps<EditRoleFormValues>, 'values' | 'errors'> {\n  onBlur: FormikProps<EditRoleFormValues>['handleBlur'];\n  onChange: FormikProps<EditRoleFormValues>['handleChange'];\n  disabled?: boolean;\n  role: AdminRole;\n}\n\nconst RoleForm = ({ disabled, role, values, errors, onChange, onBlur }: RoleFormProps) => {\n  const { formatMessage } = useIntl();\n\n  return (\n    <Box background=\"neutral0\" padding={6} shadow=\"filterShadow\" hasRadius>\n      <Flex direction=\"column\" alignItems=\"stretch\" gap={4}>\n        <Flex justifyContent=\"space-between\">\n          <Box>\n            <Box>\n              <Typography fontWeight=\"bold\">\n                {role\n                  ? role.name\n                  : formatMessage({\n                      id: 'global.details',\n                      defaultMessage: 'Details',\n                    })}\n              </Typography>\n            </Box>\n            <Box>\n              <Typography textColor=\"neutral500\" variant=\"pi\">\n                {role\n                  ? role.description\n                  : formatMessage({\n                      id: 'Settings.roles.form.description',\n                      defaultMessage: 'Name and description of the role',\n                    })}\n              </Typography>\n            </Box>\n          </Box>\n          <Button disabled variant=\"secondary\">\n            {formatMessage(\n              {\n                id: 'Settings.roles.form.button.users-with-role',\n                defaultMessage:\n                  '{number, plural, =0 {# users} one {# user} other {# users}} with this role',\n              },\n              { number: role.usersCount }\n            )}\n          </Button>\n        </Flex>\n        <Grid.Root gap={4}>\n          <Grid.Item col={6} direction=\"column\" alignItems=\"stretch\">\n            <Field.Root\n              name=\"name\"\n              error={errors.name && formatMessage({ id: errors.name })}\n              required\n            >\n              <Field.Label>\n                {formatMessage({\n                  id: 'global.name',\n                  defaultMessage: 'Name',\n                })}\n              </Field.Label>\n              <TextInput\n                disabled={disabled}\n                onChange={onChange}\n                onBlur={onBlur}\n                value={values.name || ''}\n              />\n              <Field.Error />\n            </Field.Root>\n          </Grid.Item>\n          <Grid.Item col={6} direction=\"column\" alignItems=\"stretch\">\n            <Field.Root\n              name=\"description\"\n              error={errors.description && formatMessage({ id: errors.description })}\n            >\n              <Field.Label>\n                {formatMessage({\n                  id: 'global.description',\n                  defaultMessage: 'Description',\n                })}\n              </Field.Label>\n              <Textarea\n                disabled={disabled}\n                onChange={onChange}\n                onBlur={onBlur}\n                value={values.description}\n              />\n              <Field.Error />\n            </Field.Root>\n          </Grid.Item>\n        </Grid.Root>\n      </Flex>\n    </Box>\n  );\n};\n\nexport { RoleForm };\nexport type { RoleFormProps };\n", "import * as React from 'react';\n\nimport { Box, Button, Flex, Main } from '@strapi/design-system';\nimport { Check } from '@strapi/icons';\nimport { Formik, FormikHelpers } from 'formik';\nimport { useIntl } from 'react-intl';\nimport { Navigate, useMatch } from 'react-router-dom';\nimport * as yup from 'yup';\n\nimport { Layouts } from '../../../../components/Layouts/Layout';\nimport { Page } from '../../../../components/PageHelpers';\nimport { useTypedSelector } from '../../../../core/store/hooks';\nimport { BackButton } from '../../../../features/BackButton';\nimport { useNotification } from '../../../../features/Notifications';\nimport { useTracking } from '../../../../features/Tracking';\nimport { useAdminRoles } from '../../../../hooks/useAdminRoles';\nimport { useAPIErrorHandler } from '../../../../hooks/useAPIErrorHandler';\nimport {\n  useGetRolePermissionLayoutQuery,\n  useGetRolePermissionsQuery,\n  useUpdateRoleMutation,\n  useUpdateRolePermissionsMutation,\n} from '../../../../services/users';\nimport { isBaseQueryError } from '../../../../utils/baseQuery';\nimport { translatedErrors } from '../../../../utils/translatedErrors';\n\nimport { Permissions, PermissionsAPI } from './components/Permissions';\nimport { RoleForm } from './components/RoleForm';\n\nconst EDIT_ROLE_SCHEMA = yup.object().shape({\n  name: yup.string().required(translatedErrors.required.id),\n  description: yup.string().optional(),\n});\n\n/**\n * TODO: be nice if we could just infer this from the schema\n */\ninterface EditRoleFormValues {\n  name: string;\n  description: string;\n}\n\nconst EditPage = () => {\n  const { toggleNotification } = useNotification();\n  const { formatMessage } = useIntl();\n  const match = useMatch('/settings/roles/:id');\n  const id = match?.params.id;\n  const permissionsRef = React.useRef<PermissionsAPI>(null);\n  const { trackUsage } = useTracking();\n  const {\n    _unstableFormatAPIError: formatAPIError,\n    _unstableFormatValidationErrors: formatValidationErrors,\n  } = useAPIErrorHandler();\n\n  const { isLoading: isLoadingPermissionsLayout, data: permissionsLayout } =\n    useGetRolePermissionLayoutQuery({\n      /**\n       * Role here is a query param so if there's no role we pass an empty string\n       * which returns us a default layout.\n       */\n      role: id ?? '',\n    });\n\n  const {\n    roles,\n    isLoading: isRoleLoading,\n    refetch: refetchRole,\n  } = useAdminRoles(\n    { id },\n    {\n      refetchOnMountOrArgChange: true,\n    }\n  );\n\n  const role = roles[0] ?? {};\n\n  const { data: permissions, isLoading: isLoadingPermissions } = useGetRolePermissionsQuery(\n    {\n      id: id!,\n    },\n    {\n      skip: !id,\n      refetchOnMountOrArgChange: true,\n    }\n  );\n\n  const [updateRole] = useUpdateRoleMutation();\n  const [updateRolePermissions] = useUpdateRolePermissionsMutation();\n\n  if (!id) {\n    return <Navigate to=\"/settings/roles\" />;\n  }\n\n  const handleEditRoleSubmit = async (\n    data: EditRoleFormValues,\n    formik: FormikHelpers<EditRoleFormValues>\n  ) => {\n    try {\n      const { permissionsToSend, didUpdateConditions } =\n        permissionsRef.current?.getPermissions() ?? {};\n\n      const res = await updateRole({\n        id,\n        ...data,\n      });\n\n      if ('error' in res) {\n        if (isBaseQueryError(res.error) && res.error.name === 'ValidationError') {\n          formik.setErrors(formatValidationErrors(res.error));\n        } else {\n          toggleNotification({\n            type: 'danger',\n            message: formatAPIError(res.error),\n          });\n        }\n\n        return;\n      }\n\n      if (role.code !== 'strapi-super-admin' && permissionsToSend) {\n        const updateRes = await updateRolePermissions({\n          id: res.data.id,\n          permissions: permissionsToSend,\n        });\n\n        if ('error' in updateRes) {\n          if (isBaseQueryError(updateRes.error) && updateRes.error.name === 'ValidationError') {\n            formik.setErrors(formatValidationErrors(updateRes.error));\n          } else {\n            toggleNotification({\n              type: 'danger',\n              message: formatAPIError(updateRes.error),\n            });\n          }\n\n          return;\n        }\n\n        if (didUpdateConditions) {\n          trackUsage('didUpdateConditions');\n        }\n      }\n\n      permissionsRef.current?.setFormAfterSubmit();\n\n      await refetchRole();\n\n      toggleNotification({\n        type: 'success',\n        message: formatMessage({ id: 'notification.success.saved' }),\n      });\n    } catch (error) {\n      toggleNotification({\n        type: 'danger',\n        message: formatMessage({ id: 'notification.error', defaultMessage: 'An error occurred' }),\n      });\n    }\n  };\n\n  const isFormDisabled = !isRoleLoading && role.code === 'strapi-super-admin';\n\n  if (isLoadingPermissionsLayout || isRoleLoading || isLoadingPermissions || !permissionsLayout) {\n    return <Page.Loading />;\n  }\n\n  return (\n    <Main>\n      <Page.Title>\n        {formatMessage(\n          { id: 'Settings.PageTitle', defaultMessage: 'Settings - {name}' },\n          {\n            name: 'Roles',\n          }\n        )}\n      </Page.Title>\n      <Formik\n        enableReinitialize\n        initialValues={\n          {\n            name: role.name ?? '',\n            description: role.description ?? '',\n          } satisfies EditRoleFormValues\n        }\n        onSubmit={handleEditRoleSubmit}\n        validationSchema={EDIT_ROLE_SCHEMA}\n        validateOnChange={false}\n      >\n        {({ handleSubmit, values, errors, handleChange, handleBlur, isSubmitting }) => (\n          <form onSubmit={handleSubmit}>\n            <Layouts.Header\n              primaryAction={\n                <Flex gap={2}>\n                  <Button\n                    type=\"submit\"\n                    startIcon={<Check />}\n                    disabled={role.code === 'strapi-super-admin'}\n                    loading={isSubmitting}\n                  >\n                    {formatMessage({\n                      id: 'global.save',\n                      defaultMessage: 'Save',\n                    })}\n                  </Button>\n                </Flex>\n              }\n              title={formatMessage({\n                id: 'Settings.roles.edit.title',\n                defaultMessage: 'Edit a role',\n              })}\n              subtitle={formatMessage({\n                id: 'Settings.roles.create.description',\n                defaultMessage: 'Define the rights given to the role',\n              })}\n              navigationAction={<BackButton fallback=\"../roles\" />}\n            />\n            <Layouts.Content>\n              <Flex direction=\"column\" alignItems=\"stretch\" gap={6}>\n                <RoleForm\n                  disabled={isFormDisabled}\n                  errors={errors}\n                  values={values}\n                  onChange={handleChange}\n                  onBlur={handleBlur}\n                  role={role}\n                />\n                <Box shadow=\"filterShadow\" hasRadius>\n                  <Permissions\n                    isFormDisabled={isFormDisabled}\n                    permissions={permissions}\n                    ref={permissionsRef}\n                    layout={permissionsLayout}\n                  />\n                </Box>\n              </Flex>\n            </Layouts.Content>\n          </form>\n        )}\n      </Formik>\n    </Main>\n  );\n};\n\nconst ProtectedEditPage = () => {\n  const permissions = useTypedSelector(\n    (state) => state.admin_app.permissions.settings?.roles.update\n  );\n\n  return (\n    <Page.Protect permissions={permissions}>\n      <EditPage />\n    </Page.Protect>\n  );\n};\n\nexport { EditPage, ProtectedEditPage };\nexport type { EditRoleFormValues };\n"],
  "mappings": "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",
  "names": ["create", "translatedErrors"]
}
